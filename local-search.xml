<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈 JavaScript_callback() 回调函数</title>
    <link href="/2021/07/17/2107171/"/>
    <url>/2021/07/17/2107171/</url>
    
    <content type="html"><![CDATA[<p>在<strong>MDN</strong>的文档中，对**callback()**的定义为：</p><p><em>被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为回调函数。</em></p><p><em>A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.</em></p><h3 id="1-理解回调函数"><a href="#1-理解回调函数" class="headerlink" title="1. 理解回调函数"></a>1. 理解回调函数</h3><p><strong>调用过程</strong>：函数a的参数为函数b，当函数a执行完之后再去执行b</p><blockquote><p>或许，可以通俗地认为：做完函数a的事情，再去做函数b的事情</p></blockquote><p>再<strong>打个比方</strong>：</p><p>你去上学，妈妈送你去上学并叮嘱你要记得将缴费单交给老师。</p><p>此时，函数a为妈妈送你上学，函数b为你将缴费单交给老师。也就是你要做完函数a，才会去执行函数b。</p><p><strong>提个疑问</strong>:</p><p>Q：为什么不直接把整个事情在函数a中写好，而是要通过一个参数进行回调呢？</p><p>A：如果你直接写进去，<code>function a()&#123;...;b();&#125;</code>，那就直接写死了，失去了变量的灵活性。当你要传入别的函数时，需要重新写一遍函数a。</p><h3 id="2-代码展示"><a href="#2-代码展示" class="headerlink" title="2. 代码展示"></a>2. 代码展示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">callback</span>) </span>&#123;      <br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;parent函数a！&quot;</span>);   <br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;调用回调函数&quot;</span>);   <br>   callback(); <span class="hljs-comment">// 调用回调函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;回调函数b&quot;</span>); &#125;   <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;回调函数c&quot;</span>); &#125;   <br>  <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123; a(b); a(c); &#125;<br><br>test();<br></code></pre></td></tr></table></figure><h3 id="3-为什么需要回调"><a href="#3-为什么需要回调" class="headerlink" title="3. 为什么需要回调"></a>3. 为什么需要回调</h3><p>JavaScript 在浏览器中运行，浏览器的主进程是<strong>单线程事件循环</strong>。如果我们尝试在单线程事件循环中，<u>执行长时间运行</u>的操作，则会阻止该过程。</p><p>JavaScript 是按从上到下的顺序运行代码。在有些情况下，<strong>必须在某些情况发生之后</strong>，代码才能运行，这就不是按顺序运行了。这是异步编程。</p><p>回调函数确保：函数在某个任务完成之前不运行，在任务完成之后立即运行。它帮助我们编写异步 JavaScript 代码，避免问题和错误。</p><p>在 JavaScript 里创建回调函数的方法是：将它作为参数传递给另一个函数，然后当某个任务完成之后，立即调用它。</p><h3 id="4-Javascript-回调地狱"><a href="#4-Javascript-回调地狱" class="headerlink" title="4.  Javascript 回调地狱"></a>4.  Javascript 回调地狱</h3><p>当多个异步函数一个接一个地执行时，会产生<strong>回调地狱</strong>。它也被称为<strong>厄运金字塔</strong>。</p><p>代码变得更加难以理解，以及难以维护和修改。这是由回调函数的嵌套而引发的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p_client = <span class="hljs-keyword">new</span> Db(<span class="hljs-string">&#x27;integration_tests_20&#x27;</span>, <span class="hljs-keyword">new</span> Server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">27017</span>, &#123;&#125;), &#123;<span class="hljs-string">&#x27;pk&#x27;</span>:CustomPKFactory&#125;);<br>   p_client.open(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, p_client</span>) </span>&#123;<br>       p_client.dropDatabase(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, done</span>) </span>&#123;<br>           p_client.createCollection(<span class="hljs-string">&#x27;test_custom_key&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, collection</span>) </span>&#123;<br>               collection.insert(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, docs</span>) </span>&#123;<br>                   collection.find(&#123;<span class="hljs-string">&#x27;_id&#x27;</span>:<span class="hljs-keyword">new</span> ObjectID(<span class="hljs-string">&quot;aaaaaaaaaaaa&quot;</span>)&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, cursor</span>) </span>&#123;<br>                       cursor.toArray(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, items</span>) </span>&#123;<br>                           test.assertEquals(<span class="hljs-number">1</span>, items.length);<br> <br>                           <span class="hljs-comment">// Let&#x27;s close the db</span><br>                           p_client.close();<br>                       &#125;);<br>                   &#125;);<br>               &#125;);<br>           &#125;);<br>       &#125;);<br>   &#125;);<br><br></code></pre></td></tr></table></figure><p> ↑ 就如上面的代码</p><h3 id="5-如何避免回调地狱？"><a href="#5-如何避免回调地狱？" class="headerlink" title="5. 如何避免回调地狱？"></a>5. 如何避免回调地狱？</h3><ol><li>使用promise</li><li>借助 async-await</li><li>使用 async.js 库</li></ol><blockquote><p>这里就不细讲了</p></blockquote><h3 id="6-优点和使用场景"><a href="#6-优点和使用场景" class="headerlink" title="6. 优点和使用场景"></a>6. 优点和使用场景</h3><p><strong>用一句话概括：在直接调用函数A()时，把另一个函数B()作为参数，传入函数A()里面，以此来通过函数A()间接调用函数B()。</strong></p><p><strong>优点</strong></p><ul><li><p>DRY，避免重复代码</p></li><li><p>可以将通用的逻辑抽象</p></li><li><p>加强代码可维护性</p></li><li><p>加强代码可读性</p></li><li><p>分离专职的函数</p></li></ul><p><strong>使用场景</strong></p><ul><li>异步执行(例如读文件，发送HTTP请求)</li><li>事件监听和处理</li><li>设置超时和时间间隔的方法</li><li>通用化：代码简洁 </li></ul><p>一篇关于callback()的好文：<a href="https://segmentfault.com/a/1190000021942060"><a href="https://segmentfault.com/a/1190000021942060">从零起步，真正理解Javascript回调函数</a></a></p>]]></content>
    
    
    <categories>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>回调</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/2021/07/15/2107151/"/>
    <url>/2021/07/15/2107151/</url>
    
    <content type="html"><![CDATA[<blockquote><p>递归，可以通俗地理解为：无限套娃。</p></blockquote><p>我们都听过：“从前有座山，山里有座庙，庙里有个和尚，和尚在讲故事，讲的是，从前有座山，山里……”</p><p>这个就是一种递归，先执行自己的部分，然后再调用自己，进行无限循环</p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>在《学习 JavaScript 数据结构与算法（第三版）》书中，对递归的定义为：</p><p><em>递归是一种解决问题的方法，它从解决问题的各个小部分开始，直到解决最初的大问题。递归通常涉及函数调用自身</em></p><p><strong>形式一</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursiveFunction</span>(<span class="hljs-params">someParam</span>) </span>&#123;<br>  recursiveFunction(someParam);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>形式二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursiveFunction1</span>(<span class="hljs-params">someParam</span>) </span>&#123;<br>  recursiveFunction2(someParam);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursiveFunction2</span>(<span class="hljs-params">someParam</span>) </span>&#123;<br>  recursiveFunction1(someParam);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述两种形式的递归，都没有基线条件，及没有停止点，会一直递归下去，造成<strong>栈溢出</strong>的现象。故，一般在使用递归的时候，都会进行条件判断，满足条件之后就跳出递归，避免一直死循环下去。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><h4 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h4><p><strong>迭代阶乘</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">factorialIterative</span>(<span class="hljs-params">number</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>  <span class="hljs-keyword">let</span> total = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n = number; n &gt; <span class="hljs-number">1</span>; n--) &#123;<br>    total = total * n;<br>  &#125;<br>  <span class="hljs-keyword">return</span> total;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>递归阶乘</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">factorial</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span> || n === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> n * factorial(n - <span class="hljs-number">1</span>); <span class="hljs-comment">// 通过再次调用自身，进行计算</span><br>&#125;<br></code></pre></td></tr></table></figure><p>每当一个函数被一个算法调用时，该函数会进入调用栈的顶部</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210715105325.png" alt="栈调用情况"></p><p>如果没有添加用以停止函数递归的调用的基线条件，当出现栈溢出错误时，浏览器会抛出错误</p><h4 id="斐波那契数"><a href="#斐波那契数" class="headerlink" title="斐波那契数"></a>斐波那契数</h4><p>由 0、1、1、2、3、5、8、13、21、34 等数组成的序列。数 2 由 1 + 1 得到，数 3 由 1 + 2 得到，数 5 由 2 + 3 得到，以此类推。斐波那契数列的定义：</p><ul><li>位置 0 的斐波那契数是零</li><li>1 和 2 的斐波那契数是 1</li><li>n（此处 n &gt; 2）的斐波那契数是（n - 1）的斐波那契数加上（n - 2）的斐波那契数</li></ul><p><strong>迭代求斐波那契数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fibonacciIterative</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> fibNMinus2 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> fibNMinus1 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> fibN = n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>    fibN = fibNMinus1 + fibNMinus2;<br>    fibNMinus2 = fibNMinus1;<br>    fibNMinus1 = fibN;<br>  &#125;<br>  <span class="hljs-keyword">return</span> fibN;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>递归求斐波那契数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fibonacci</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">20</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>记忆化</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fibonacciMemoization</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> memo = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]; <span class="hljs-comment">//第1,2个数已经写好了</span><br>  <span class="hljs-keyword">const</span> fibonacci = <span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (memo[n] != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> memo[n]; <span class="hljs-comment">//如果是第1,2个数，直接返回本身</span><br>    <span class="hljs-keyword">return</span> (memo[n] = fibonacci(n - <span class="hljs-number">1</span>, memo) + fibonacci(n - <span class="hljs-number">2</span>, memo)); <span class="hljs-comment">//存缓存</span><br>  &#125;;<br>  <span class="hljs-keyword">return</span> fibonacci(n);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-速度"><a href="#3-速度" class="headerlink" title="3. 速度"></a>3. 速度</h3><p>从测试上看，迭代的速度会比递归的快很多。</p><p>使用递归的好处：</p><ul><li>代码量少</li><li>结构清晰，易懂</li></ul><p>递归主要是调用函数，需要不断地进行进栈出栈，所以消耗时间较多</p><p>具体可查看：<a href="https://www.jianshu.com/p/6bdc8e3637f2">《递归为什么那么慢？递归的改进算法》</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>算法</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试题大全</title>
    <link href="/2021/07/13/2107131/"/>
    <url>/2021/07/13/2107131/</url>
    
    <content type="html"><![CDATA[<p>本文转载于：<a href="https://jcmpd975ac.feishu.cn/base/appNuDKPaGtimrdkB0JnXmpoktZ?table=tbl1IUBnjs02VgLW&amp;view=vewJHSwJVd">https://jcmpd975ac.feishu.cn/base/appNuDKPaGtimrdkB0JnXmpoktZ?table=tbl1IUBnjs02VgLW&amp;view=vewJHSwJVd</a></p><p>以及一篇掘金上的文章，整理得也很不错：<a href="https://juejin.cn/post/6977258091662278669">《前端进阶指南》</a></p><h3 id="面试要点解析"><a href="#面试要点解析" class="headerlink" title="面试要点解析"></a>面试要点解析</h3><table><thead><tr><th>知识点</th><th>类型</th><th>模块</th></tr></thead><tbody><tr><td><a href="https://segmentfault.com/a/1190000013069516#https://segmentfault.com/a/1190000013069516">盒子模型</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000013424772#https://segmentfault.com/a/1190000013424772">CSS选择器</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/25321647#https://zhuanlan.zhihu.com/p/25321647">BFC</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D#https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D">position</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox#https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox">flex布局</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/41604775#https://zhuanlan.zhihu.com/p/41604775">css优先级</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903817104850952#https://juejin.cn/post/6844903817104850952">双飞冀/圣杯布局</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000010780991#https://segmentfault.com/a/1190000010780991">CSS3新特性</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844904034281734151#https://juejin.cn/post/6844904034281734151#heading-9">CSS样式隔离</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://blog.csdn.net/weixin_43883485/article/details/103504171#https://blog.csdn.net/weixin_43883485/article/details/103504171">CSS性能优化</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/#https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">层叠上下文</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903821529841671#https://juejin.cn/post/6844903821529841671">div居中</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000012739764#https://segmentfault.com/a/1190000012739764">浮动</a></td><td>css</td><td>前端基础</td></tr><tr><td><a href="https://www.cnblogs.com/yc8930143/p/7237456.html#https://www.cnblogs.com/yc8930143/p/7237456.html">行内元素、块级元素</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903811232825357#https://juejin.cn/post/6844903811232825357">跨标签页通信</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://blog.csdn.net/Charissa2017/article/details/104779412#https://blog.csdn.net/Charissa2017/article/details/104779412">history和hash两种路由</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://blog.poetries.top/browser-working-principle/guide/part5/lesson22.html#https://blog.poetries.top/browser-working-principle/guide/part5/lesson22.html#javascript-%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D-dom-%E7%94%9F%E6%88%90%E7%9A%84">DOM树</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://javascript.ruanyifeng.com/dom/event.html#https://javascript.ruanyifeng.com/dom/event.html">事件模型</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903593275817998#https://juejin.cn/post/6844903593275817998">缓存策略</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://xie.infoq.cn/article/5d36d123bfd1c56688e125ad3#https://xie.infoq.cn/article/5d36d123bfd1c56688e125ad3">浏览器架构</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">浏览器工作原理</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000020231307#https://segmentfault.com/a/1190000020231307">内存泄露</a></td><td>html&amp;浏览器</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/2#https://github.com/mqyqingfeng/Blog/issues/2">原型链（点击这里查看）</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/16#https://github.com/mqyqingfeng/Blog/issues/16">继承</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/6#https://github.com/mqyqingfeng/Blog/issues/6">作用域</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/9#https://github.com/mqyqingfeng/Blog/issues/9">闭包</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/5#https://github.com/mqyqingfeng/Blog/issues/5">变量提升</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/7#https://github.com/mqyqingfeng/Blog/issues/7">this的指向</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000003985390#https://segmentfault.com/a/1190000003985390">立即执行函数</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903613584654344#https://juejin.cn/post/6844903613584654344">instanceof原理</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/12#https://github.com/mqyqingfeng/Blog/issues/12">bind的实现</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000018017796#https://segmentfault.com/a/1190000018017796">apply和call</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/42#https://github.com/mqyqingfeng/Blog/issues/42">柯里化</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844904016325902344#https://juejin.cn/post/6844904016325902344">v8垃圾回收机制</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/155#https://github.com/mqyqingfeng/Blog/issues/155">浮点数精度</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/13#https://github.com/mqyqingfeng/Blog/issues/13">new操作符</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/33058983#https://zhuanlan.zhihu.com/p/33058983">事件循环机制</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844904063570542599#https://juejin.cn/post/6844904063570542599">promise原理</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="http://www.alloyteam.com/2016/02/generators-in-depth/#http://www.alloyteam.com/2016/02/generators-in-depth/">generator原理</a></td><td>javascript</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844904030905303054#https://juejin.cn/post/6844904030905303054">模块机制</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="http://www.ruanyifeng.com/blog/2015/05/require.html#http://www.ruanyifeng.com/blog/2015/05/require.html">require原理</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="https://learnku.com/articles/38802#https://learnku.com/articles/38802">事件循环</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="https://www.cnblogs.com/dashnowords/p/10958457.html#https://www.cnblogs.com/dashnowords/p/10958457.html">cluster原理</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="https://www.barretlee.com/blog/2017/06/06/dive-to-nodejs-at-stream-module/#https://www.barretlee.com/blog/2017/06/06/dive-to-nodejs-at-stream-module/">流机制</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="https://cloud.tencent.com/developer/article/1630068#https://cloud.tencent.com/developer/article/1630068">pipe原理</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="https://juejin.cn/post/6844903444839399438#https://juejin.cn/post/6844903444839399438">守护进程</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="http://www.ayqy.net/blog/nodejs%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/#http://www.ayqy.net/blog/nodejs%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/">进程通信</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="http://www.alloyteam.com/2013/12/node-js-series-exception-caught/#http://www.alloyteam.com/2013/12/node-js-series-exception-caught/">异常处理</a></td><td>Node</td><td>大前端</td></tr><tr><td><a href="https://juejin.cn/post/6844903988794671117#https://juejin.cn/post/6844903988794671117">合成事件</a></td><td>React</td><td>框架</td></tr><tr><td><a href="https://segmentfault.com/a/1190000019994425#https://segmentfault.com/a/1190000019994425">virtual dom</a></td><td>React</td><td>框架</td></tr><tr><td><a href="https://juejin.cn/post/6844903781813993486#https://juejin.cn/post/6844903781813993486">setState过程</a></td><td>React</td><td>框架</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/57346388#https://zhuanlan.zhihu.com/p/57346388">fiber</a></td><td>React</td><td>框架</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/24776678#https://zhuanlan.zhihu.com/p/24776678">高阶组件</a></td><td>React</td><td>框架</td></tr><tr><td><a href="https://github.com/HuJiaoHJ/blog/issues/12#https://github.com/HuJiaoHJ/blog/issues/12">错误处理</a></td><td>React</td><td>框架</td></tr><tr><td><a href="https://github.com/brickspert/blog/issues/36#https://github.com/brickspert/blog/issues/36">性能优化</a></td><td>React</td><td>框架</td></tr><tr><td><a href="https://cn.redux.js.org/docs/introduction/ThreePrinciples.html#https://cn.redux.js.org/docs/introduction/ThreePrinciples.html">redux核心原则</a></td><td>Redux</td><td>框架</td></tr><tr><td><a href="https://tech.meituan.com/2017/07/14/redux-design-code.html#https://tech.meituan.com/2017/07/14/redux-design-code.html">redux核心逻辑</a></td><td>Redux</td><td>框架</td></tr><tr><td><a href="https://juejin.cn/post/6844903869730799629#https://juejin.cn/post/6844903869730799629">数据绑定原理</a></td><td>Vue</td><td>框架</td></tr><tr><td><a href="https://www.cnblogs.com/tugenhua0707/p/11760466.html#https://www.cnblogs.com/tugenhua0707/p/11760466.html">computed和watch</a></td><td>Vue</td><td>框架</td></tr><tr><td><a href="https://juejin.cn/post/6844903927129849864#https://juejin.cn/post/6844903927129849864">slot</a></td><td>Vue</td><td>框架</td></tr><tr><td><a href="https://www.cnblogs.com/leiting/p/13174545.html#https://www.cnblogs.com/leiting/p/13174545.html">next tick原理</a></td><td>Vue</td><td>框架</td></tr><tr><td><a href="https://juejin.cn/post/6844903950886371342#https://juejin.cn/post/6844903950886371342">keep alive</a></td><td>Vue</td><td>框架</td></tr><tr><td><a href="https://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html#https://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html">实现一个trim方法</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://cloud.tencent.com/developer/article/1497418#https://cloud.tencent.com/developer/article/1497418">实现一个deepClone方法</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://juejin.cn/post/6844904093467541517#https://juejin.cn/post/6844904093467541517">实现 add(1)(2)(3)</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/72179476#https://zhuanlan.zhihu.com/p/72179476">大数相加</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://segmentfault.com/a/1190000021366004#https://segmentfault.com/a/1190000021366004">拍平数组</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/22#https://github.com/mqyqingfeng/Blog/issues/22">实现防抖函数</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/26#https://github.com/mqyqingfeng/Blog/issues/26">实现节流函数</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-string/#https://leetcode-cn.com/problems/reverse-string/">实现字符串翻转</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/27#https://github.com/mqyqingfeng/Blog/issues/27">数组去重</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://www.jianshu.com/p/928c68f92c0c#https://www.jianshu.com/p/928c68f92c0c">实现千位分隔符</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-number/#https://leetcode-cn.com/problems/palindrome-number/">判断是否是回文数</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://github.com/mqyqingfeng/Blog/issues/63#https://github.com/mqyqingfeng/Blog/issues/63">实现一个模板引擎</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://blog.csdn.net/huang_miao_xin/article/details/51331710#https://blog.csdn.net/huang_miao_xin/article/details/51331710">判断一个数是否是素数</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-primes/solution/ru-he-gao-xiao-pan-ding-shai-xuan-su-shu-by-labula/#https://leetcode-cn.com/problems/count-primes/solution/ru-he-gao-xiao-pan-ding-shai-xuan-su-shu-by-labula/">获取n以内所有的素数</a></td><td>编程题</td><td>算法</td></tr><tr><td><a href="https://juejin.cn/post/6844903801321685000#https://juejin.cn/post/6844903801321685000">进程和线程</a></td><td>操作系统</td><td>基础</td></tr><tr><td><a href="https://www.jianshu.com/p/c1015f5ffa74#https://www.jianshu.com/p/c1015f5ffa74">进程通信</a></td><td>操作系统</td><td>基础</td></tr><tr><td><a href="https://blog.csdn.net/qq_35642036/article/details/82809812#https://blog.csdn.net/qq_35642036/article/details/82809812">进程调度策略</a></td><td>操作系统</td><td>基础</td></tr><tr><td><a href="https://www.jianshu.com/p/44125bb12ebf#https://www.jianshu.com/p/44125bb12ebf">死锁</a></td><td>操作系统</td><td>基础</td></tr><tr><td><a href="https://imageslr.github.io/2020/02/27/select-poll-epoll.html#https://imageslr.github.io/2020/02/27/select-poll-epoll.html">IO多路复用</a></td><td>操作系统</td><td>基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000017466120#https://segmentfault.com/a/1190000017466120">模块化机制</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903544756109319#https://juejin.cn/post/6844903544756109319">tree shaking</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://www.h5w3.com/19480.html#https://www.h5w3.com/19480.html">uglify原理</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://my.oschina.net/u/4088983/blog/4545928#https://my.oschina.net/u/4088983/blog/4545928">babel原理</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://developer.aliyun.com/article/61047#https://developer.aliyun.com/article/61047">webpack工作流程</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903789804126222#https://juejin.cn/post/6844903789804126222">webpack插件机制</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://github.com/youngwind/blog/issues/101#https://github.com/youngwind/blog/issues/101">webpack loader机制</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://tech.antfin.com/community/articles/536#https://tech.antfin.com/community/articles/536">前端微服务</a></td><td>工程化</td><td>前端基础</td></tr><tr><td><a href="https://bitable.feishu.cn/appqZ3ER93h8KtHXoQBX1DcER4c?table=tblyCmQgadfXai2c&view=vewExxoMGY#https://bitable.feishu.cn/appqZ3ER93h8KtHXoQBX1DcER4c?table=tblyCmQgadfXai2c&view=vewExxoMGY">最近看的书</a></td><td>其他</td><td>其他</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/139064270#https://zhuanlan.zhihu.com/p/139064270">平常的学习途径</a></td><td>其他</td><td>其他</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/139952856#https://zhuanlan.zhihu.com/p/139952856">你比较擅长哪一块，不足的地方在哪里</a></td><td>其他</td><td>其他</td></tr><tr><td><a href="https://refactoringguru.cn/design-patterns#https://refactoringguru.cn/design-patterns">常用设计模式</a></td><td>设计架构</td><td>其他</td></tr><tr><td><a href="https://www.jianshu.com/p/f667ea3e4a11#https://www.jianshu.com/p/f667ea3e4a11">重构</a></td><td>设计架构</td><td>其他</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/79899786#https://zhuanlan.zhihu.com/p/79899786">MVVM</a></td><td>设计架构</td><td>其他</td></tr><tr><td><a href="https://blog.csdn.net/zhangli_/article/details/50419783#https://blog.csdn.net/zhangli_/article/details/50419783">MVC</a></td><td>设计架构</td><td>其他</td></tr><tr><td><a href="https://www.jianshu.com/p/4b754ea48a40#https://www.jianshu.com/p/4b754ea48a40">MVP</a></td><td>设计架构</td><td>其他</td></tr><tr><td><a href="https://leetcode-cn.com/problems/fibonacci-number/#https://leetcode-cn.com/problems/fibonacci-number/">斐波那契数列</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/#https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">合并二维有序数组成一维有序数组</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/#https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">链表：反转链表</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/linked-list-cycle/#https://leetcode-cn.com/problems/linked-list-cycle/">链表：链表有环</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/#https://leetcode-cn.com/problems/valid-parenthesis-string/">堆栈队列：判断括号字符串是否有效</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/#https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">返回数组中第k个最大元素</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/02.03.html#https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/02.03.html">找出数组中和为sum的n个数</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/smallest-string-with-a-given-numeric-value/#https://leetcode-cn.com/problems/smallest-string-with-a-given-numeric-value/">贪心：具有给定数值的最小字符串</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/#https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/">二叉树：最大深度</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/#https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">二叉树：层次遍历</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-sudoku/#https://leetcode-cn.com/problems/valid-sudoku/">剪枝：判断数独是否有效</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/sqrtx/#https://leetcode-cn.com/problems/sqrtx/">二分查找：求解平方根</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/#https://leetcode-cn.com/problems/implement-trie-prefix-tree/">字典树：实现一个字典树</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/climbing-stairs/#https://leetcode-cn.com/problems/climbing-stairs/">爬楼梯问题</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/shortest-distance-to-a-character/#https://leetcode-cn.com/problems/shortest-distance-to-a-character/">最短距离</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/lru-cache/#https://leetcode-cn.com/problems/lru-cache/">LRU缓存</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://leetcode-cn.com/problems/invert-binary-tree/#https://leetcode-cn.com/problems/invert-binary-tree/">翻转二叉树</a></td><td>算法</td><td>算法</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/32059190#https://zhuanlan.zhihu.com/p/32059190">七层网络模型</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://coolshell.cn/articles/19840.html#https://coolshell.cn/articles/19840.html">http</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/26682342#https://zhuanlan.zhihu.com/p/26682342">https</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://juejin.cn/post/6844903984524705800#https://juejin.cn/post/6844903984524705800">http2.0</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://blog.csdn.net/wolfGuiDao/article/details/108729560#https://blog.csdn.net/wolfGuiDao/article/details/108729560">http3.0</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://blog.csdn.net/LL845876425/article/details/106393358#https://blog.csdn.net/LL845876425/article/details/106393358">websocket</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://coolshell.cn/articles/11564.html#https://coolshell.cn/articles/11564.html">tcp</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/337678680#https://zhuanlan.zhihu.com/p/337678680">udp</a></td><td>网络</td><td>基础</td></tr><tr><td><a href="https://juejin.cn/post/6850037273312886797#https://juejin.cn/post/6850037273312886797">前端性能优化指标RAIL</a></td><td>性能</td><td>前端基础</td></tr><tr><td><a href="https://alienzhou.com/projects/fe-performance-journey/#https://alienzhou.com/projects/fe-performance-journey/#%E6%97%85%E9%80%94%E7%9A%84%E8%A1%8C%E7%A8%8B%E8%B7%AF%E7%BA%BF">前端性能优化手段</a></td><td>性能</td><td>前端基础</td></tr><tr><td><a href="https://juejin.cn/post/6844904083212468238#https://juejin.cn/post/6844904083212468238">重排和重绘</a></td><td>性能</td><td>前端基础</td></tr><tr><td><a href="https://cloud.tencent.com/developer/article/1508941#https://cloud.tencent.com/developer/article/1508941">白屏</a></td><td>性能</td><td>前端基础</td></tr><tr><td><a href="https://zhuanlan.zhihu.com/p/33370207#https://zhuanlan.zhihu.com/p/33370207">大量图片加载优化</a></td><td>性能</td><td>前端基础</td></tr><tr><td><a href="https://www.jianshu.com/p/d616d887953a#https://www.jianshu.com/p/d616d887953a">描述下浏览器从输入网址到页面展现的整个过程</a></td><td>性能</td><td>前端基础</td></tr><tr><td><a href="https://www.jianshu.com/p/d24a891d4de6#https://www.jianshu.com/p/d24a891d4de6">动画性能</a></td><td>性能</td><td>前端基础</td></tr><tr><td><a href="https://segmentfault.com/a/1190000014520786#https://segmentfault.com/a/1190000014520786">渲染合成层</a></td><td>性能</td><td>前端基础</td></tr></tbody></table><h3 id="面试手册"><a href="#面试手册" class="headerlink" title="面试手册"></a>面试手册</h3><table><thead><tr><th>关键点</th><th>单选</th></tr></thead><tbody><tr><td>大厂简历筛选有一套机制，有大厂经历或学历好或经验匹配的会比较容易通过筛选，缺少光环的需要有其他东西来证明，比如优秀的项目经历，参与过好的开源项目等</td><td>简历</td></tr><tr><td>简历上描述的技术/内容/项目确保自己是真的熟悉/掌握，看看每个技能是不是自己真的掌握了，能说出个1.2.3；每个项目是否自己能说清楚，一些细节是否了解，有哪些复盘点，是否有改进空间</td><td>简历</td></tr><tr><td>简历上描述的应该是与目标岗位直接/间接相关的，其他的比较优秀的点可以一笔带过，不需要花大篇幅介绍这些与目标岗位不符的能力</td><td>简历</td></tr><tr><td>面试官简历评估时也会看跳槽频率，像1年1跳这种会被评为不稳定，这时除非学历/经历特别出色的，其他基本就不通过了</td><td>简历</td></tr><tr><td>面试除了技能/项目知识外，状态也很重要；接到面试电话说明简历评估通过了，时间可以你自己定，如果没准备好，可以把时间拉长些，给自己一些准备时间；要求当场面试的可以礼貌拒绝然后定一个合适的时间</td><td>面试</td></tr><tr><td>对不同工作年限的同学会有不同的要求，校招主要看潜力，所以基础（计算机、网络）和算法会考得比较多；1<del>3年除了潜力外还看经验是否与业务匹配，项目经验；3</del>5年看是否有独挡一面的能力，需要在技术上有较好的深度，在做事情方面有自己的一套；大于5年的除了深度外对广度也有要求，且需要有跨端和架构设计的能力，对于管理岗位也会看带团队的能力</td><td>面试</td></tr><tr><td>面试时遇到不会的不用慌，每个人的知识面不一样，碰到不会的很正常，但可以积极思考，首先坦诚表示没有了解过相关知识，然后以现有的知识体系思考下这个问题，说明思路，合理猜测结果</td><td>面试</td></tr><tr><td>有时会有面试官会刻意施加压力，这时不在于问题回答的是否正确，而在于是否能在这些压力下仍然能够理性思考，面对面试官的每个问题，可以尝试想下面试官问这个问题的背后目的是什么</td><td>面试</td></tr></tbody></table><h3 id="模拟题"><a href="#模拟题" class="headerlink" title="模拟题"></a>模拟题</h3><table><thead><tr><th>面试题</th><th>分类</th><th>知识点</th></tr></thead><tbody><tr><td></td><td>模拟题1</td><td></td></tr><tr><td>react setState是同步还是异步</td><td>模拟题1</td><td>setState过程</td></tr><tr><td>什么是高阶组件，请举例说明</td><td>模拟题1</td><td>高阶组件</td></tr><tr><td>解释一下原型链</td><td>模拟题1</td><td>原型链（点击这里查看）</td></tr><tr><td>instanceof原理</td><td>模拟题1</td><td>instanceof原理</td></tr><tr><td>apply和call的作用及区别</td><td>模拟题1</td><td>apply和call</td></tr><tr><td>position有哪些值，作用分别是什么</td><td>模拟题1</td><td>position</td></tr><tr><td>说下你对DOM树的理解</td><td>模拟题1</td><td>DOM树</td></tr><tr><td>重排和重绘是什么，有什么区别</td><td>模拟题1</td><td>重排和重绘</td></tr><tr><td>https加密过程是怎样的</td><td>模拟题1</td><td>https</td></tr><tr><td>实现 add(1)(2)(3)</td><td>模拟题1</td><td>实现 add(1)(2)(3)</td></tr><tr><td>react为什么需要合成事件</td><td>模拟题2</td><td>合成事件</td></tr><tr><td>为什么有时react两次setState，只执行一次</td><td>模拟题2</td><td>setState过程</td></tr><tr><td>redux有哪些原则</td><td>模拟题2</td><td>redux核心原则</td></tr><tr><td>es5实现继承</td><td>模拟题2</td><td>继承</td></tr><tr><td>实现一个promise</td><td>模拟题2</td><td>promise原理</td></tr><tr><td>CSS选择器有哪些</td><td>模拟题2</td><td>CSS选择器</td></tr><tr><td>说下事件模型</td><td>模拟题2</td><td>事件模型</td></tr><tr><td>如何减少白屏的时间</td><td>模拟题2</td><td>白屏</td></tr><tr><td>3次握手过程</td><td>模拟题2</td><td>tcp</td></tr><tr><td>判断链表是否有环</td><td>模拟题2</td><td>链表：链表有环</td></tr><tr><td>react合成事件是什么，和原生事件的区别</td><td>模拟题3</td><td>合成事件</td></tr><tr><td>react如何处理异常</td><td>模拟题3</td><td>异常处理</td></tr><tr><td>闭包的作用和原理</td><td>模拟题3</td><td>闭包</td></tr><tr><td>0.1+0.2为什么不等于0.3</td><td>模拟题3</td><td>浮点数精度</td></tr><tr><td>什么是BFC，BFC有什么作用，如何形成BFC</td><td>模拟题3</td><td>BFC</td></tr><tr><td>浏览器缓存策略是怎样的</td><td>模拟题3</td><td>缓存策略</td></tr><tr><td>你知道的前端性能优化手段有哪些</td><td>模拟题3</td><td>前端性能优化手段</td></tr><tr><td>前端模块化机制有哪些</td><td>模拟题3</td><td>模块化机制</td></tr><tr><td>http2.0做了哪些改进</td><td>模拟题3</td><td>http,http2.0</td></tr><tr><td>求解平方根</td><td>模拟题3</td><td>二分查找：求解平方根</td></tr><tr><td>react为什么需要fiber</td><td>模拟题4</td><td>fiber</td></tr><tr><td>redux中间件机制</td><td>模拟题4</td><td>redux核心逻辑</td></tr><tr><td>bind的实现</td><td>模拟题4</td><td>bind的实现</td></tr><tr><td>说下generator原理</td><td>模拟题4</td><td>generator原理</td></tr><tr><td>flex布局有什么好处</td><td>模拟题4</td><td>flex布局</td></tr><tr><td>如何定位内存泄露</td><td>模拟题4</td><td>内存泄露</td></tr><tr><td>渲染合成层是什么</td><td>模拟题4</td><td>渲染合成层</td></tr><tr><td>babel是什么，怎么做到的</td><td>模拟题4</td><td>babel原理</td></tr><tr><td>http2.0有哪些不足，http3.0是什么</td><td>模拟题4</td><td>http3.0,http2.0</td></tr><tr><td>实现一个发布订阅模式</td><td>模拟题4</td><td>常用设计模式</td></tr><tr><td>vue的数据绑定机制是如何实现的</td><td>模拟题5</td><td>数据绑定原理</td></tr><tr><td>vue next tick实现原理</td><td>模拟题5</td><td>next tick原理</td></tr><tr><td>谈谈变量提升</td><td>模拟题5</td><td>变量提升</td></tr><tr><td>new操作符具体做了什么</td><td>模拟题5</td><td>new操作符</td></tr><tr><td>介绍下盒子模型</td><td>模拟题5</td><td>盒子模型</td></tr><tr><td>有哪些方式可以使div居中</td><td>模拟题5</td><td>div居中</td></tr><tr><td>有听过前端性能优化指标RAIL吗</td><td>模拟题5</td><td>前端性能优化指标RAIL</td></tr><tr><td>进程和线程的区别</td><td>模拟题5</td><td>进程和线程</td></tr><tr><td>tcp滑动窗口是什么</td><td>模拟题5</td><td>tcp</td></tr><tr><td>实现一个斐波那契数列</td><td>模拟题5</td><td>斐波那契数列</td></tr><tr><td>vue的computed和watch的区别</td><td>模拟题6</td><td>computed和watch</td></tr><tr><td>说下vue的keep alive</td><td>模拟题6</td><td>keep alive</td></tr><tr><td>什么是立即执行函数</td><td>模拟题6</td><td>立即执行函数</td></tr><tr><td>谈下事件循环机制</td><td>模拟题6</td><td>事件循环机制</td></tr><tr><td>css优先级是怎么计算的</td><td>模拟题6</td><td>css优先级</td></tr><tr><td>CSS相关的性能优化</td><td>模拟题6</td><td>CSS性能优化</td></tr><tr><td>谈下webpack loader机制</td><td>模拟题6</td><td>webpack loader机制</td></tr><tr><td>进程通信方式有哪些</td><td>模拟题6</td><td>进程通信</td></tr><tr><td>爬楼梯问题</td><td>模拟题6</td><td>爬楼梯问题</td></tr><tr><td>实现一个trim方法</td><td>模拟题6</td><td>实现一个trim方法</td></tr><tr><td>react fiber有哪些优点，怎样做到的</td><td>模拟题7</td><td>fiber</td></tr><tr><td>谈谈你对作用域的理解</td><td>模拟题7</td><td>作用域</td></tr><tr><td>双飞冀/圣杯布局</td><td>模拟题7</td><td>双飞冀/圣杯布局</td></tr><tr><td>浮动元素会造成什么影响，如何清除浮动</td><td>模拟题7</td><td>浮动</td></tr><tr><td>网站首页有大量的图片，加载很慢，如何去优化呢？</td><td>模拟题7</td><td>大量图片加载优化</td></tr><tr><td>描述下浏览器从输入网址到页面展现的整个过程</td><td>模拟题7</td><td>描述下浏览器从输入网址到页面展现的整个过程</td></tr><tr><td>uglify原理的是什么</td><td>模拟题7</td><td>uglify原理</td></tr><tr><td>tcp重试机制</td><td>模拟题7</td><td>tcp</td></tr><tr><td>层次遍历二叉树</td><td>模拟题7</td><td>二叉树：层次遍历,二叉树：最大深度</td></tr><tr><td>实现节流函数</td><td>模拟题7</td><td>实现节流函数</td></tr><tr><td>react有哪些性能优化的点</td><td>模拟题8</td><td>性能优化</td></tr><tr><td>v8垃圾回收机制</td><td>模拟题8</td><td>v8垃圾回收机制</td></tr><tr><td>CSS样式隔离手段</td><td>模拟题8</td><td>CSS样式隔离</td></tr><tr><td>行内元素、块级元素有哪些，区别是什么</td><td>模拟题8</td><td>行内元素、块级元素</td></tr><tr><td>聊下你知道的浏览器架构</td><td>模拟题8</td><td>浏览器架构</td></tr><tr><td>是否有写过webpack插件</td><td>模拟题8</td><td>webpack插件机制</td></tr><tr><td>websocket建立过程</td><td>模拟题8</td><td>websocket</td></tr><tr><td>合并二维有序数组成一维有序数组</td><td>模拟题8</td><td>合并二维有序数组成一维有序数组</td></tr><tr><td>实现防抖函数</td><td>模拟题8</td><td>实现防抖函数</td></tr><tr><td>最近看了什么书，有什么心得</td><td>模拟题8</td><td>最近看的书</td></tr><tr><td>CSS3有哪些新特性</td><td>模拟题9</td><td>CSS3新特性</td></tr><tr><td>层叠上下文是什么</td><td>模拟题9</td><td>层叠上下文</td></tr><tr><td>history和hash两种路由方式的最大区别是什么？</td><td>模拟题9</td><td>history和hash两种路由</td></tr><tr><td>动画性能如何优化</td><td>模拟题9</td><td>动画性能</td></tr><tr><td>tree shaking是什么，有什么作用，原理是什么</td><td>模拟题9</td><td>tree shaking</td></tr><tr><td>webpack工作流程是怎样的</td><td>模拟题9</td><td>webpack工作流程</td></tr><tr><td>什么场景下会用策略模式</td><td>模拟题9</td><td>常用设计模式</td></tr><tr><td>找出数组中和为sum的n个数</td><td>模拟题9</td><td>找出数组中和为sum的n个数</td></tr><tr><td>判断括号字符串是否有效</td><td>模拟题9</td><td>堆栈队列：判断括号字符串是否有效</td></tr><tr><td>平常的学习途径</td><td>模拟题9</td><td>平常的学习途径</td></tr><tr><td>node模块机制是怎样的</td><td>模拟题十</td><td>模块机制</td></tr><tr><td>node require具体实现是什么</td><td>模拟题十</td><td>require原理</td></tr><tr><td>node事件循环与浏览器的哪些不一样</td><td>模拟题十</td><td>事件循环,事件循环机制</td></tr><tr><td>cluster原理是怎样的</td><td>模拟题十</td><td>cluster原理</td></tr><tr><td>pipe原理是怎样的</td><td>模拟题十</td><td>pipe原理</td></tr><tr><td>node的异常处理方式</td><td>模拟题十</td><td>异常处理</td></tr><tr><td>适配器和外观模式的区别</td><td>模拟题十</td><td>常用设计模式</td></tr><tr><td>重构的手段有哪些</td><td>模拟题十</td><td>重构</td></tr><tr><td>数组去重</td><td>模拟题十</td><td>数组去重</td></tr><tr><td>你比较擅长哪一块，不足的地方在哪里</td><td>模拟题十</td><td>你比较擅长哪一块，不足的地方在哪里</td></tr><tr><td>跨标签页通信的方式有哪些</td><td></td><td>跨标签页通信</td></tr><tr><td>前端微服务是用来解决什么问题的</td><td></td><td>前端微服务</td></tr><tr><td>udp和tcp的区别</td><td></td><td>tcp,udp</td></tr><tr><td>node内置了哪些流，是怎么工作的</td><td></td><td>流机制</td></tr><tr><td>守护进程是什么，为什么需要它</td><td></td><td>守护进程</td></tr><tr><td>node进程通信有哪些方式</td><td></td><td>进程通信</td></tr><tr><td>MVVM、MVC、MVP分别用于什么场景，区别是什么</td><td></td><td>MVVM,MVC,MVP</td></tr><tr><td>拍平多维数组</td><td></td><td>拍平数组</td></tr><tr><td>实现一个模板引擎</td><td></td><td>实现一个模板引擎</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>面试高频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
      <tag>css</tag>
      
      <tag>html&amp;浏览器</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Node</tag>
      
      <tag>React</tag>
      
      <tag>Vue</tag>
      
      <tag>操作系统</tag>
      
      <tag>工程化</tag>
      
      <tag>架构设计</tag>
      
      <tag>网络</tag>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（六）散列表</title>
    <link href="/2021/07/12/2107112/"/>
    <url>/2021/07/12/2107112/</url>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>HashTable、HashMap，是Dictionary类的一种散列表实现方式</p><p>散列算法：尽可能快地在数据结构中找到一个值</p><p>散列函数：给定一个键值，然后返回值在表中的地址</p><blockquote><p>应用：</p><p>关系型数据库：创建新的表时，同时创建一个索引来更快地查询到记录的key</p></blockquote><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210712113143.png"></p><h3 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h3><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HaspTable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">toStrFn = defaultToString</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.toStrFn = toStrFn;<br>        <span class="hljs-built_in">this</span>.table = &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建散列函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">loseloseHashCode</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> key === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-keyword">const</span> tableKey = <span class="hljs-built_in">this</span>.toStrFn(key);<br>    <span class="hljs-keyword">let</span> hash = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; tableKey.length; i++) &#123;<br>        has += tableKey.charCodeAt(i);  <span class="hljs-comment">//转换为ASII码值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> hash % <span class="hljs-number">37</span>;  <span class="hljs-comment">//规避操作数超过数值变量最大表示范围的风险</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">hashCode</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.loseloeseHashCode(key);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong></p><ul><li><p>put(key,value)：向散列表增加一个新的项（也能更新散列表）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">put</span>(<span class="hljs-params">key, value</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(key != <span class="hljs-literal">null</span> &amp;&amp; value ! <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">const</span> position = <span class="hljs-built_in">this</span>.hashCode(key);<br>        <span class="hljs-built_in">this</span>.table[position] = <span class="hljs-keyword">new</span> ValuePair(key, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove(key)：根据键值从散列表中移除值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> hash = <span class="hljs-built_in">this</span>.hashCode(key);<br>    <span class="hljs-keyword">const</span> valuePair = <span class="hljs-built_in">this</span>.table[hash];<br>    <span class="hljs-keyword">if</span>(valuePair != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.table[hash];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>get(key)：返回根据键值检索到的特定的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> valuePair = <span class="hljs-built_in">this</span>.table[<span class="hljs-built_in">this</span>.hashCode(key)];<br>    <span class="hljs-keyword">return</span> valuePair == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : valuePair.value;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> hash = <span class="hljs-keyword">new</span> HashTable();<br><br>hash.put(<span class="hljs-string">&#x27;Gandalf&#x27;</span>, <span class="hljs-string">&#x27;gandalf@email.com&#x27;</span>);<br>hash.put(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;johnsnow@email.com&#x27;</span>);<br>hash.put(<span class="hljs-string">&#x27;Tyrion&#x27;</span>, <span class="hljs-string">&#x27;tyrion@email.com&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(hash.hashCode(<span class="hljs-string">&#x27;Gandalf&#x27;</span>) + <span class="hljs-string">&#x27; - Gandalf&#x27;</span>); <span class="hljs-comment">// 19 - Gandalf</span><br><span class="hljs-built_in">console</span>.log(hash.hashCode(<span class="hljs-string">&#x27;John&#x27;</span>) + <span class="hljs-string">&#x27; - John&#x27;</span>);  <span class="hljs-comment">// 29 - John</span><br><span class="hljs-built_in">console</span>.log(hash.hashCode(<span class="hljs-string">&#x27;Tyrion&#x27;</span>) + <span class="hljs-string">&#x27; - Tyrion&#x27;</span>);  <span class="hljs-comment">// 16 - Tyrion</span><br><span class="hljs-built_in">console</span>.log(hash.get(<span class="hljs-string">&#x27;Gandalf&#x27;</span>)); <span class="hljs-comment">// gandalf@email.com</span><br><span class="hljs-built_in">console</span>.log(hash.get(<span class="hljs-string">&#x27;Loiane&#x27;</span>)); <span class="hljs-comment">// undefined</span><br><br>hash.remove(<span class="hljs-string">&#x27;Gandalf&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(hash.get(<span class="hljs-string">&#x27;Gandalf&#x27;</span>));<br></code></pre></td></tr></table></figure><p><strong>散列表和散列集合</strong></p><p>类似</p><p>散列集合由一个集合构成，插入、移除或获取元素时，使用的是hashCode函数</p><blockquote><p>不同之处： 不需要添加键值对，只插入值而没有键</p></blockquote><h3 id="4-处理散列表的冲突"><a href="#4-处理散列表的冲突" class="headerlink" title="4. 处理散列表的冲突"></a>4. 处理散列表的冲突</h3><p>当键有相同的散列值时，不同的值在散列表中对应着相同的位置，后面添加的值会覆盖前面的，称为冲突。</p><p><strong>处理冲突的几种方法： 分离链接、线性探查和双散列法</strong></p><h4 id="1-分离链接"><a href="#1-分离链接" class="headerlink" title="1. 分离链接"></a>1. 分离链接</h4><p>解决冲突的最简单的方法</p><p>分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210712142136.png"></p><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashTableSeparateChaining</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">toStrFn = defaultString</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.toStrFn = toStrFn;<span class="hljs-number">2</span><br>        <span class="hljs-built_in">this</span>.table = &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong></p><ul><li><p>put(key,value)：向散列表增加一个新的项（也能更新散列表）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">put</span>(<span class="hljs-params">key, value</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(key != <span class="hljs-literal">null</span> &amp;&amp; value != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">const</span> position = <span class="hljs-built_in">this</span>.hashCode(key);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.table[position] == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.table[position] = <span class="hljs-keyword">new</span> LinkedList();<br>        &#125;<br>        <span class="hljs-built_in">this</span>.table[position].push(<span class="hljs-keyword">new</span> ValuePair(key, value));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove(key)：根据键值从散列表中移除值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> position = <span class="hljs-built_in">this</span>.hashCode(key);<br>    <span class="hljs-keyword">const</span> linkedList = <span class="hljs-built_in">this</span>.table[position];<br>    <span class="hljs-keyword">if</span> (linkedList != <span class="hljs-literal">null</span> &amp;&amp; !linkedList.isEmpty()) &#123;<br>        <span class="hljs-keyword">let</span> current = linkedList.getHead();<br>        <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (current.element.key === key)&#123;<br>                linkedList.remove(current.element);<br>                <span class="hljs-keyword">if</span> (linkedList.isEmpty()) &#123;<br>                    <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.table[position];<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            current = current.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>get(key)：返回根据键值检索到的特定的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> position = <span class="hljs-built_in">this</span>.hashCode(key);<br>    <span class="hljs-keyword">const</span> linkedList = <span class="hljs-built_in">this</span>.table[position];<br>    <span class="hljs-keyword">if</span>(linkedList != <span class="hljs-literal">null</span> &amp;&amp; !linkedList.isEmpty()) &#123;<br>        <span class="hljs-keyword">let</span> current = linkedList.getHead();<br>        <span class="hljs-keyword">while</span>(current != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(current.element.key === key)&#123;<br>                <span class="hljs-keyword">return</span> current.element.value;<br>            &#125;<br>            current = current.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-线性探查"><a href="#2-线性探查" class="headerlink" title="2. 线性探查"></a>2. 线性探查</h4><p>将元素直接存储到表中</p><p>当想向表中添加一个新元素的时候，如果索引为position的位置被占据，以此寻找position+1、position+2……直到有空的位置</p><p><strong>删除键值对</strong>：</p><ol><li><p>软删除： 使用特殊的值（标记）来表示键值对被删除，并不是真的删除</p><blockquote><p>会降低散列表的效率，因为搜索键值会随时间变慢</p></blockquote><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210712152055.png"></p></li><li><p>检验是否有必要将一个或多个元素移动到之前的位置。当搜索一个键的时候，这种方法可以避免找到一个空位置</p><blockquote><p>需要移动元素，挪动键值对</p></blockquote><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210712152417.png"></p></li></ol><p><strong>方法</strong></p><ul><li><p>put(key,value)：向散列表增加一个新的项（也能更新散列表）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">put</span>(<span class="hljs-params">key, value</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(key != <span class="hljs-literal">null</span> &amp;&amp; value != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">const</span> position = <span class="hljs-built_in">this</span>.hashCode(key);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.table[position] == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.table[position] = <span class="hljs-keyword">new</span> ValuePair(key, value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">let</span> index = position + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">this</span>.table[position] != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//如果位置被占了，就找下一位</span><br>                index++;<br>            &#125;<br>            <span class="hljs-built_in">this</span>.table[index] = <span class="hljs-keyword">new</span> ValuePair(key, value);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove(key)：根据键值从散列表中移除值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> position = <span class="hljs-built_in">this</span>.hashCode(key);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.table[position] != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.table[position].key === key) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.table[position];<br>            <span class="hljs-built_in">this</span>.varifyRemoveSideEffect(key, position);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> index = position + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.table[index] != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.table[index].key !== key) &#123;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.table[index] != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.table[index].key === key) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.table[index];<br>            <span class="hljs-built_in">this</span>.verifyRemoveSideEffect(key, index);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">verifyRemoveSideEffect</span>(<span class="hljs-params">key, removedPosition</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> hash = <span class="hljs-built_in">this</span>.hashCode(key); <br>    <span class="hljs-keyword">let</span> index = removedPosition + <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.table[index] != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">const</span> posHash = <span class="hljs-built_in">this</span>.hashCode(<span class="hljs-built_in">this</span>.table[index].key);<br>        <span class="hljs-keyword">if</span> (posHash &lt;= hash || posHash &lt;= removedPosition) &#123; <br>            <span class="hljs-built_in">this</span>.table[removedPosition] = <span class="hljs-built_in">this</span>.table[index];<br>            <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.table[index];  removedPosition = index; <br>        &#125; <br>        index++; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>get(key)：返回根据键值检索到的特定的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> position = <span class="hljs-built_in">this</span>.hashCode(key);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.table[position] != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.table[position].key === key) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.table[position].value;<br>        &#125;<br>        <span class="hljs-keyword">let</span> index = position + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">this</span>.table[index] != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.table[index].key !== key) &#123;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.table[index] != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.table[index].key === key) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.table[position].value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-ES2015Map类"><a href="#5-ES2015Map类" class="headerlink" title="5. ES2015Map类"></a>5. ES2015Map类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>map.set(<span class="hljs-string">&#x27;Gandalf&#x27;</span>, <span class="hljs-string">&#x27;gandalf@email.com&#x27;</span>);<br>map.set(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;johnsnow@email.com&#x27;</span>);<br>map.set(<span class="hljs-string">&#x27;Tyrion&#x27;</span>, <span class="hljs-string">&#x27;tyrion@email.com&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(map.has(<span class="hljs-string">&#x27;Gandalf&#x27;</span>)); <span class="hljs-comment">// true console.log(map.size);</span><br><span class="hljs-built_in">console</span>.log(map.keys()); <span class="hljs-comment">// 输出&#123;&quot;Gandalf&quot;, &quot;John&quot;, &quot;Tyrion&quot;&#125; </span><br><span class="hljs-built_in">console</span>.log(map.values()); <span class="hljs-comment">// 输出&#123;&quot;gandalf@email.com&quot;, &quot;johnsnow@email.com&quot;, &quot;tyrion@email.com&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(map.get(<span class="hljs-string">&#x27;Tyrion&#x27;</span>)); <span class="hljs-comment">// tyrion@email.com</span><br>map.delete(<span class="hljs-string">&#x27;John&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="6-ES2105-WeakMap类和WeakSet类"><a href="#6-ES2105-WeakMap类和WeakSet类" class="headerlink" title="6. ES2105 WeakMap类和WeakSet类"></a>6. ES2105 WeakMap类和WeakSet类</h3><p>除了Set和Map这两种新的数据结构，ES2015还增加了它们的弱化版本，WeakSet和WeakMap</p><p><strong>区别</strong>： </p><ul><li>WeakSet或WeakMap类没有entries、keys和values等方法</li><li>只能用对象作为键</li></ul><p> 创建和使用这两个类主要是为了<strong>性能</strong>，WeakSet和WeakMap是弱化的（用对象作为键），没有强引用的键。这使得JavaScript的垃圾回收器可以从中清除整个入口。</p><p>必须用键才可以取出值。这些类没有entries、keys和values等迭代器方法，因此，除非你知道键，否则没有办法取出值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>();<br><span class="hljs-keyword">const</span> ob1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Gandalf&#x27;</span> &#125;; <br><span class="hljs-keyword">const</span> ob2 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span> &#125;;<br><span class="hljs-keyword">const</span> ob3 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tyrion&#x27;</span> &#125;;<br>map.set(ob1, <span class="hljs-string">&#x27;gandalf@email.com&#x27;</span>);<br>map.set(ob2, <span class="hljs-string">&#x27;johnsnow@email.com&#x27;</span>);<br>map.set(ob3, <span class="hljs-string">&#x27;tyrion@email.com&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(map.has(ob1)); <br><span class="hljs-built_in">console</span>.log(map.get(ob3)); <span class="hljs-comment">// tyrion@email.com &#123;4&#125; map.delete(ob2);</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>散列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（五）字典</title>
    <link href="/2021/07/11/2107111/"/>
    <url>/2021/07/11/2107111/</url>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>字典是以<strong>键值</strong>的形式来存储元素。字典也称作映射、符号表或关联数组。</p><p>es6中有字典Map</p><p>常用操作：键值对的增删改查</p><h3 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h3><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defaultToString &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../util&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dictionary</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">toStrFn = defaultToString</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.toStrFn = toStrFn;<br>        <span class="hljs-built_in">this</span>.table = &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在字典中，理想的情况是用字符串作为键名，值可以是任何类型。但是，由于JavaScript 不是强类型的语言，我们<strong>不能保证键一定是字符串</strong>。我们需要把所有作为键名传入的对象转化为字符串，使得从Dictionary 类中搜索和获取值更简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValuePair</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">key, value</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`[#<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.key&#125;</span>: <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.value&#125;</span>]`</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用</strong></p><ul><li><p>set(key,value)：向字典中添加新元素</p><p>如果key 已经存在，那么已存在的 value 会被新的值覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">key, value</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span> &amp;&amp; value != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">const</span> tableKey = <span class="hljs-built_in">this</span>.toStrFn(key);  <span class="hljs-comment">//获取表示key的字符串</span><br>        <span class="hljs-comment">//创建一个新的键值对，并赋值给table对象上的key属性</span><br>        <span class="hljs-built_in">this</span>.table[tableKey] = <span class="hljs-keyword">new</span> ValuePair(key, value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove(key)：通过使用键值作为参数来从字典中移除键值对应的数据值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hasKey(key)) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.table[<span class="hljs-built_in">this</span>.toStrFn(key)];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>hasKey(key)：如果某个键值存在于该字典中，返回true，否则返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">hasKey</span>(<span class="hljs-params">key</span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.table[<span class="hljs-built_in">this</span>.toStrFn(key)] != <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>get(key)：通过以键值作为参数查找特定的数值并返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> valuePair = <span class="hljs-built_in">this</span>.table[<span class="hljs-built_in">this</span>.toStrFn(key)]; <br>    <span class="hljs-keyword">return</span> valuePair == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : valuePair.value; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hasKey(key)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.table[<span class="hljs-built_in">this</span>.toStrFn(key)];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>clear()：删除该字典中的所有值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">this</span>.table = &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>size()：返回字典所包含值的数量。与数组的length 属性类似。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">size</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>.table).length;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>isEmpty()：在size 等于零的时候返回true，否则返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.size() === <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>keys()：将字典所包含的所有键名以数组形式返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">keys</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.keyValues().map(<span class="hljs-function"><span class="hljs-params">valuePair</span> =&gt;</span> valuePair.key);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> keys = [];<br><span class="hljs-keyword">const</span> valuePairs = <span class="hljs-built_in">this</span>.keyValues();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; valuePairs.length; i++) &#123;<br>keys.push(valuePairs[i].key);<br>&#125;<br><span class="hljs-keyword">return</span> keys;<br></code></pre></td></tr></table></figure></li><li><p>values()：将字典所包含的所有数值以数组形式返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">values</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.keyValues().map(<span class="hljs-function"><span class="hljs-params">valuePair</span> =&gt;</span> valuePair.value);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>keyValues()：将字典中所有[键，值]对返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">keyValues</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.values(<span class="hljs-built_in">this</span>.table); <span class="hljs-comment">//Object.values()为ECMAScript 2017</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">keyValues</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> valuePairs = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">this</span>.table) &#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hasKey(k)) &#123;<br>        valuePairs.push(<span class="hljs-built_in">this</span>.table[k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> valuePairs;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>forEach(callbackFn)：迭代字典中所有的键值对。callbackFn 有两个参数：key 和value。该方法可以在回调函数返回false 时被中止（和Array 类中的every 方法相似）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">forEach</span>(<span class="hljs-params">callbackFn</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> valuePairs = <span class="hljs-built_in">this</span>.keyValues(); <span class="hljs-comment">// &#123;1&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; valuePairs.length; i++) &#123; <span class="hljs-comment">// &#123;2&#125;</span><br>        <span class="hljs-keyword">const</span> result = callbackFn(valuePairs[i].key, valuePairs[i].value); <span class="hljs-comment">// &#123;3&#125;</span><br>        <span class="hljs-keyword">if</span> (result === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// &#123;4&#125;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>toString()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> valuePairs = <span class="hljs-built_in">this</span>.keyValues();<br>    <span class="hljs-keyword">let</span> objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;valuePairs[<span class="hljs-number">0</span>].toString()&#125;</span>`</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; valuePairs.length; i++) &#123;<br>    objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;objString&#125;</span>,<span class="hljs-subst">$&#123;valuePairs[i].toString()&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> objString;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dictionary = <span class="hljs-keyword">new</span> Dictionary();<br>dictionary.set(<span class="hljs-string">&#x27;Gandalf&#x27;</span>, <span class="hljs-string">&#x27;gandalf@email.com&#x27;</span>);<br>dictionary.set(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;johnsnow@email.com&#x27;</span>);<br>dictionary.set(<span class="hljs-string">&#x27;Tyrion&#x27;</span>, <span class="hljs-string">&#x27;tyrion@email.com&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(dictionary.hasKey(<span class="hljs-string">&#x27;Gandalf&#x27;</span>)) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(dictionary.size());  <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(dictionary.keys());  <span class="hljs-comment">//[&quot;Gandalf&quot;, &quot;John&quot;, &quot;Tyrion&quot;]</span><br><span class="hljs-built_in">console</span>.log(dictionary.values()); <span class="hljs-comment">//[&quot;gandalf@email.com&quot;, &quot;johnsnow@email.com&quot;, &quot;tyrion@email.com&quot;]</span><br><span class="hljs-built_in">console</span>.log(dictionary.get(<span class="hljs-string">&#x27;Tyrion&#x27;</span>));  <span class="hljs-comment">//tyrion@email.com</span><br><br>dictionary.remove(<span class="hljs-string">&#x27;John&#x27;</span>);<br><br>dictionary.forEach(<span class="hljs-function">(<span class="hljs-params">k, v</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;forEach: &#x27;</span>, <span class="hljs-string">`key: <span class="hljs-subst">$&#123;k&#125;</span>, value: <span class="hljs-subst">$&#123;v&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-LeetCode"><a href="#4-LeetCode" class="headerlink" title="4. LeetCode"></a>4. LeetCode</h3><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210711205701.png" alt="LeetCode349"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums1</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums2</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number[]&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> intersection = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums1, nums2</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>    nums1.forEach(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> &#123;<br>        map.set(n,<span class="hljs-literal">true</span>);<br>    &#125;);<br>    <span class="hljs-keyword">const</span> res = [];<br>    nums2.forEach(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(map.get(n))&#123;<br>            res.push(n);<br>            map.delete(n);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><p>将nums1的每个值以key的形式存在字典里，值设置为true</p><p>遍历nums2，如果在字典里找到有对应的值，则添加到res里，并在字典里删除这个值</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210711210321.png" alt="LeetCode2"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">s</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;boolean&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> isValid = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(s.length % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>    <span class="hljs-keyword">const</span> stack = [];       <span class="hljs-comment">//栈</span><br>    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();  <span class="hljs-comment">//字典</span><br>    map.set(<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>);<br>    map.set(<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>);<br>    map.set(<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>        <span class="hljs-keyword">const</span> c = s[i];<br>        <span class="hljs-keyword">if</span>(map.has(c)) &#123;  <span class="hljs-comment">//如果这个值和map匹配上，则向栈中添加</span><br>            stack.push(c);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> t = stack[stack.length - <span class="hljs-number">1</span>]; <span class="hljs-comment">//栈顶元素</span><br>            <span class="hljs-keyword">if</span>(map.get(t) === c) &#123;  <span class="hljs-comment">//键对匹配上，删除栈内的元素</span><br>                stack.pop();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.length === <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用栈和字典这两个数据结构</p><p>栈：后进先出</p><p>字典：键对匹配</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210711212356.png" alt="LeetCode1"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;nums.length; i += <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">const</span> n = nums[i];<br>        <span class="hljs-keyword">const</span> n2 = target - n;<br>        <span class="hljs-keyword">if</span>(map.has(n2)) &#123;  <span class="hljs-comment">//在map中寻找是否有能匹配上的值</span><br>            <span class="hljs-keyword">return</span> [map.get(n2), i];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            map.set(n, i);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>内存消耗大，执行时间快</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210711214150.png" alt="LeetCode"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> r = <span class="hljs-number">0</span>; r &lt; s.length; r++) &#123;<br>        <span class="hljs-keyword">if</span>(map.has(s[r]) &amp;&amp; map.get(s[r])&gt;= l)&#123;<br>            l = map.get(s[r]) + <span class="hljs-number">1</span>;<br>        &#125;<br>        res = <span class="hljs-built_in">Math</span>.max(res, r - l + <span class="hljs-number">1</span>);<br>        map.set(s[r], r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用滑动窗口，如果map里有这个元素且在窗口内，则左指针向右移动</p><p>直到不满足条件，取窗口大小与res进行比较，res存储较大的那个数，并将右指针与指向的数字以键对的形式存储到map里</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210711214615.png" alt="LeetCode76"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">s</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">t</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;string&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> minWindow = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s, t</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> need = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> c <span class="hljs-keyword">of</span> t)&#123;<br>        need.set(c, need.has(c)? need.get(c) + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>    &#125;  <span class="hljs-comment">//need存储t各个字符所需要的个数</span><br>    <span class="hljs-keyword">let</span> needType = need.size;  <span class="hljs-comment">// 不同字符种类数</span><br>    <span class="hljs-keyword">let</span> res = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(r &lt; s.length) &#123; <span class="hljs-comment">//右指针移动</span><br>        <span class="hljs-keyword">const</span> c = s[r];<br>        <span class="hljs-keyword">if</span>(need.has(c)) &#123;  <span class="hljs-comment">//找到need里有对应的值，则减少该字符想要的个数</span><br>            need.set(c, need.get(c) - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(need.get(c) === <span class="hljs-number">0</span>) needType--;  <span class="hljs-comment">//当该字符变为0个，直接needType-1</span><br>        &#125;<br>        <span class="hljs-keyword">while</span>(needType === <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//当所有值都找到时，进行</span><br>            <span class="hljs-keyword">const</span> newRes = s.substring(l, r + <span class="hljs-number">1</span>);  <span class="hljs-comment">//截取字符</span><br>            <span class="hljs-keyword">if</span>(!res || newRes.length &lt; res.length) res = newRes;<br>            <span class="hljs-keyword">const</span> c2 = s[l];  <span class="hljs-comment">//c2存放左指针对应的值</span><br>            <span class="hljs-keyword">if</span>(need.has(c2)) &#123;  <span class="hljs-comment">//如果左指针对应的值是need的</span><br>                need.set(c2,need.get(c2) + <span class="hljs-number">1</span>);  <span class="hljs-comment">//因为移动，会将这个值移出窗口，会使得need里c2需要的个数+1</span><br>                <span class="hljs-keyword">if</span>(need.get(c2) === <span class="hljs-number">1</span>) needType++; <span class="hljs-comment">//如果刚好为1个，即需要多增加一个type</span><br>            &#125;<br>            l++;  <span class="hljs-comment">//当窗口里找到所有t，左指针移动</span><br>        &#125;<br>        r++;  <span class="hljs-comment">//当need不为0，右指针移动，继续寻找对应</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用滑动窗口，并使用map进行键对匹配</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>字典</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（四）集合</title>
    <link href="/2021/07/10/2107103/"/>
    <url>/2021/07/10/2107103/</url>
    
    <content type="html"><![CDATA[<p><strong>一种无序且唯一的数据结构</strong></p><p><strong>es6中有集合Set</strong></p><p><strong>集合的常见操作：去重、判断某元素是否在集合中、求交集</strong></p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>集合是由一组<strong>无序且唯一</strong>（即不能重复）的项组成的</p><h3 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h3><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Set</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">this</span>.items = &#123;&#125;;  <span class="hljs-comment">//使用对象来模拟</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong></p><ul><li><p>has(element)：如果元素在集合中，返回true，否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">has</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> element <span class="hljs-keyword">in</span> items;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">has</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.hasOwnProperty.call(<span class="hljs-built_in">this</span>.item, element);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>add(element)：向集合添加一个新元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">this</span>.has(element)) &#123;<br>        <span class="hljs-built_in">this</span>.items[element] = element;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>delete(element)：从集合移除一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">detele</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.has(element)) &#123;<br>        detele <span class="hljs-built_in">this</span>.items[element];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>clear()：移除集合中的所有元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items = &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>size()：返回集合所包含元素的数量。它与数组的length 属性类似</p><p>方法一：和其他数据结构一样，直接使用length</p><p>方法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">size</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>.items).length;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">sizeLegacy</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">this</span>.items) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.items.hasOwnProperty(key))&#123;<br>            count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>values()：返回一个包含集合中所有值（元素）的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">values</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.values(<span class="hljs-built_in">this</span>.items);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>but <code>Object.values()</code>是ECMAScript 2017添加的，适用于现代浏览器中，等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">valuesLegacy</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> values = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">this</span>.items) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.items.hasOwnProperty(key)) &#123;<br>            values.push(key);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> values;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li></ul><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>set.add(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(set.values()); <span class="hljs-comment">// [1]</span><br><span class="hljs-built_in">console</span>.log(set.has(<span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(set.size()); <span class="hljs-comment">// 1</span><br>set.add(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(set.values()); <span class="hljs-comment">// [1, 2]</span><br><span class="hljs-built_in">console</span>.log(set.has(<span class="hljs-number">2</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(set.size()); <span class="hljs-comment">// 2</span><br>set.delete(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(set.values()); <span class="hljs-comment">// [2]</span><br>set.delete(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(set.values()); <span class="hljs-comment">// []</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//去重</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> arr2 = [...new <span class="hljs-built_in">Set</span>(arr)];<br></code></pre></td></tr></table></figure><h3 id="4-集合的运算"><a href="#4-集合的运算" class="headerlink" title="4. 集合的运算"></a>4. 集合的运算</h3><h4 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">union</span>(<span class="hljs-params">otherSet</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> unionSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>    <span class="hljs-built_in">this</span>.values().forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> unionSet.add(value));<br>    otherSet.values().forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> unionSet.add(value));<br>    <span class="hljs-keyword">return</span> unionSet;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">intersection</span>(<span class="hljs-params">otherSet</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> intersectionSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>    <span class="hljs-keyword">const</span> values = <span class="hljs-built_in">this</span>.values();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(otherSet.has(values[i])) &#123;<br>            intersectionSet.add(values[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> intersectionSet;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化一下，迭代AB集合中元素较少的那个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">intersection</span>(<span class="hljs-params">otherSet</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> intersectionSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(); <br>    <span class="hljs-keyword">const</span> values = <span class="hljs-built_in">this</span>.values(); <br>    <span class="hljs-keyword">const</span> otherValues = otherSet.values();<br>    <span class="hljs-keyword">let</span> biggerSet = values; <br>    <span class="hljs-keyword">let</span> smallerSet = otherValues; <br>    <span class="hljs-keyword">if</span> (otherValues.length - values.length &gt; <span class="hljs-number">0</span>) &#123; <br>        biggerSet = otherValues;<br>        smallerSet = values;<br>    &#125;<br>    smallerSet.forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-comment">// 元素少的迭代次数少</span><br>        <span class="hljs-keyword">if</span> (biggerSet.includes(value)) &#123;<br>            intersectionSet.add(value);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> intersectionSet;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">difference</span>(<span class="hljs-params">otherSet</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> differenceSet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>    <span class="hljs-built_in">this</span>.values().forEach(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(!otherSet.has(value)) &#123;<br>            differenceSet.add(value);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> differenceSet;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">isSubsetOf</span>(<span class="hljs-params">otherSet</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.size() &gt; otherSet.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> isSubset = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.values().every(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(!otherSet.has(value))&#123;<br>            isSubset = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> isSubset;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-前端与集合"><a href="#5-前端与集合" class="headerlink" title="5. 前端与集合"></a>5. 前端与集合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br><br><span class="hljs-keyword">let</span> o = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;;<br>mySet.add(o)<br>mySet.add(&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;);<br>mySet.add(<span class="hljs-string">&#x27;text&#x27;</span>);<br><br><span class="hljs-keyword">const</span> has = mySet.has(o);<br><br>mySet.delete(o)<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet.keys()) <span class="hljs-built_in">console</span>.log(item);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet.value()) <span class="hljs-built_in">console</span>.log(item);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> mySet.keys()) <span class="hljs-built_in">console</span>.log(key, value);<br><br><span class="hljs-keyword">const</span> myArr =[...mySet];<br><span class="hljs-keyword">const</span> myArr = <span class="hljs-built_in">Array</span>.from(mySet);<br><br><span class="hljs-keyword">const</span> mySet2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]);<br><span class="hljs-keyword">const</span> intersection = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([..mySet].filter(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> mySet2.has(x)));<br><span class="hljs-keyword">const</span> difference = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([..mySet].filter(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> !mySet2.has(x)));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（三）链表</title>
    <link href="/2021/07/10/2107101/"/>
    <url>/2021/07/10/2107101/</url>
    
    <content type="html"><![CDATA[<p><strong>多个元素组成的列表</strong></p><p><strong>元素存储不连续，用next指针连在一起</strong></p><p><strong>JavaScript中没有链表</strong></p><p><strong>可以使用Object模拟链表</strong></p><blockquote><p>数组 VS 链表</p><p>数组：增删<strong>非</strong>首位元素时需要移动元素</p><p>链表：增删<strong>非</strong>首位元素时，不需要移动元素，只需要更改next的指向即可</p></blockquote><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>存储有序的元素集合</p><p>不是连续放置的</p><p>一个存储元素本身的节点 + 一个指向下一个元素的引用</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210423215543759.png" alt="image-20210423215543759"></p><h3 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h3><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;  <span class="hljs-comment">//表示想要添加到链表中的项</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">element, next</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.element = element;<br>      <span class="hljs-built_in">this</span>.next = next;  <span class="hljs-comment">//指向链表中下一个元素的指针</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.head = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//保存引用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//返回特定位置的元素</span><br><span class="hljs-function"><span class="hljs-title">getElementAt</span>(<span class="hljs-params">index</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt;= <span class="hljs-built_in">this</span>.count) &#123;<br>      <span class="hljs-keyword">let</span> node = <span class="hljs-built_in">this</span>.head;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; index &amp;&amp; node != <span class="hljs-literal">null</span>; i++) &#123;<br>        node = node.next;  <span class="hljs-comment">//通过循环，使得node指向index元素</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> node;<br>    &#125; <br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;out range&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//返回元素在链表中的索引。如果链表中没有该元素则返回-1</span><br><span class="hljs-function"><span class="hljs-title">indexOf</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.size() &amp;&amp; current != <span class="hljs-literal">null</span>; i++) &#123;<br>      <span class="hljs-keyword">if</span> (current.element === element) &#123;<br>        <span class="hljs-keyword">return</span> i;<br>      &#125;<br>      current = current.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//向尾部添加一个新元素</span><br><span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> node = <span class="hljs-keyword">new</span> Node(element);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.head == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">//如果是空链表，直接加到头部</span><br>      <span class="hljs-built_in">this</span>.head = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">while</span> (current.next != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//获得最后一项</span><br>            current = current.next;<br>        &#125; <br>        <span class="hljs-comment">//当current.next == undefined||null时，即到达链表尾部</span><br>        <span class="hljs-comment">//**链表最后一个节点的下一个元素始终是undefined或null**</span><br>        current.next = node;  <span class="hljs-comment">//将其next赋为新元素，建立链接</span><br>    &#125;<br>    <span class="hljs-built_in">this</span>.count++;<br>&#125;<br><span class="hljs-comment">//也可以使用这个方法</span><br><span class="hljs-comment">// ……</span><br><span class="hljs-comment">// else &#123;</span><br><span class="hljs-comment">//      **let current = this.getElementAt(this.count - 1);**  //找到node</span><br><span class="hljs-comment">//      **current.next = node;**</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// ……</span><br><br><span class="hljs-comment">//向特定位置插入一个新元素</span><br><span class="hljs-function"><span class="hljs-title">insert</span>(<span class="hljs-params">element, index</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt;= <span class="hljs-built_in">this</span>.count) &#123;  <span class="hljs-comment">//在范围内</span><br>        <span class="hljs-keyword">let</span> node = <span class="hljs-keyword">new</span> Node(element);<br>        <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//在头部直接加</span><br>            <span class="hljs-keyword">const</span> current = <span class="hljs-built_in">this</span>.head;<br>            node.next = current;<br>            <span class="hljs-built_in">this</span>.head = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> pre = <span class="hljs-built_in">this</span>.getElementAt(index - <span class="hljs-number">1</span>);  <span class="hljs-comment">//获得前一个节点的位置</span><br>            node.next = pre.next; <span class="hljs-comment">//新创建的节点赋值为pre.next</span><br>            pre.next = node;  <span class="hljs-comment">//将pre.next指向新创建的节点</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++;  <span class="hljs-comment">//长度+1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;out range&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//从特定位置移除一个元素</span><br><span class="hljs-function"><span class="hljs-title">removeAt</span>(<span class="hljs-params">index</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; <span class="hljs-built_in">this</span>.count) &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//移除第一项</span><br>            <span class="hljs-built_in">this</span>.head = current.next; <span class="hljs-comment">//也可以使用head=head.next</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; index; i++) &#123;  <span class="hljs-comment">//从移除的位置开始，其后元素往前移一位</span><br>                <span class="hljs-keyword">let</span> pre = current;<br>                current = current.next;<br>            &#125;<br>            <span class="hljs-comment">//pre为要移除元素的前一位，next指针指向移除元素的下一位，即实现了移除元素</span><br>            pre.next = current.next; <br>        &#125;<br>        <span class="hljs-built_in">this</span>.count--;<br>        <span class="hljs-keyword">return</span> current.element;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//如果index不在范围内，返回undefined</span><br>&#125;<br><br><span class="hljs-comment">//移除一个元素</span><br><span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> index = <span class="hljs-built_in">this</span>.indexOf(element);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.removeAt(index);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.size() === <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">size</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">getHead</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.head;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.head = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//把LinkedList对象转换成一个字符串</span><br><span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.head == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.head.element&#125;</span>`</span>;<br>    <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head.next;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">this</span>.size() &amp;&amp; current != <span class="hljs-literal">null</span>; i++) &#123;<br>      objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;objString&#125;</span>,<span class="hljs-subst">$&#123;current.element&#125;</span>`</span>;<br>      current = current.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> objString;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210424130232992.png" alt="image-20210424130232992"></p><h3 id="3-双向链表"><a href="#3-双向链表" class="headerlink" title="3. 双向链表"></a>3. 双向链表</h3><p>链接是双向的：一个链向下一个元素，另一个链向前一个元素</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210425190521544.png" alt="image-20210425190521544"></p><p>优势：在单向链表中，如果迭代时错过了要找的元素，就需要回到起点重新开始迭代</p><p>双向链表要同时控制 next 和 prev 这两个指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">element, next</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.element = element;<br>      <span class="hljs-built_in">this</span>.next = next; <br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defaultEquals</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a === b;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">equalsFn = defaultEquals</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.head = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-built_in">this</span>.equalsFn = equalsFn;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoublyNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">element,next,prev</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(element,next);<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoublyLinkedList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">equalasFn = defaultEquals</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(equalasFn);<br>        <span class="hljs-built_in">this</span>.tail = <span class="hljs-literal">undefined</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">insert</span>(<span class="hljs-params">element, index</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt;= <span class="hljs-built_in">this</span>.count) &#123;<br>        <span class="hljs-keyword">const</span> node = <span class="hljs-keyword">new</span> DoublyNode(element);<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.head == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//空链表，直接让this.head和this.tail指向node即可</span><br>                <span class="hljs-built_in">this</span>.head = node;<br>                <span class="hljs-built_in">this</span>.tail = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node.next = <span class="hljs-built_in">this</span>.head;<br>                current.prev = node; <br>                <span class="hljs-built_in">this</span>.head = node;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index === <span class="hljs-built_in">this</span>.count) &#123; <span class="hljs-comment">//插入到末尾</span><br>            current = <span class="hljs-built_in">this</span>.tail;<br>            current.next = node;<br>            node.prev = current;<br>            <span class="hljs-built_in">this</span>.tail = node;<br>        &#125; eles &#123;<br>            <span class="hljs-keyword">const</span> previous = <span class="hljs-built_in">this</span>.getElementAt(index - <span class="hljs-number">1</span>); <span class="hljs-comment">//查找插入点前一个位置</span><br>            current = previous.next;<br>            node.next = current;<br>            previous.next = node;<br>            current.prev = node;<br>            node.prev = previous;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">removeAt</span>(<span class="hljs-params">index</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; <span class="hljs-built_in">this</span>.count) &#123; <span class="hljs-comment">//在范围内</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.head = current.next;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.count === <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">this</span>.tail = <span class="hljs-literal">undefined</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.head.prev = <span class="hljs-literal">undefined</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index === <span class="hljs-built_in">this</span>.count - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//删除最后一个元素</span><br>            current = <span class="hljs-built_in">this</span>.tail;<br>            <span class="hljs-built_in">this</span>.tail = current.prev;<br>            <span class="hljs-built_in">this</span>.tail.next = <span class="hljs-literal">undefined</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            current = <span class="hljs-built_in">this</span>.getElementAt(index);<br>            <span class="hljs-keyword">const</span> previous = current.prev;<br>            previous.next = current.next;<br>            current.next.prev = previous;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.count--;<br>        <span class="hljs-keyword">return</span> current.element;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-循环链表"><a href="#4-循环链表" class="headerlink" title="4. 循环链表"></a>4. 循环链表</h3><p>具有链表单项引用+双向链表双向引用</p><p>最后一个元素指向下一个元素的指针（tail.next）指向第一个元素（head）</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210425202902743.png" alt="image-20210425202902743"></p><p>双向循环链表：有指向head元素的tail.next和指向tail元素的head.prev</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210425203025901.png" alt="image-20210425203025901"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularLinkedList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">equalsFN = defaultEquals</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(equalsFn);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">insert</span>(<span class="hljs-params">element, index</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt;= <span class="hljs-built_in">this</span>.count) &#123;<br>        <span class="hljs-keyword">const</span> node = <span class="hljs-keyword">new</span> Node(element);<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">if</span>(index === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//插入点为链表的第一个位置</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.head == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//该链表为空</span><br>                <span class="hljs-built_in">this</span>.head = node;<br>                node.next = <span class="hljs-built_in">this</span>.head;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                node.next = current; <span class="hljs-comment">//node的next指针指向头部</span><br>                current = <span class="hljs-built_in">this</span>.getElementAt(<span class="hljs-built_in">this</span>.size()); <span class="hljs-comment">//最后一个元素</span><br>                <span class="hljs-built_in">this</span>.head = node; <span class="hljs-comment">//新增元素作为链表的头部</span><br>                current.next = <span class="hljs-built_in">this</span>.head;  <span class="hljs-comment">//最后一个元素再指向头部</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> previous = <span class="hljs-built_in">this</span>.getElementAt(index - <span class="hljs-number">1</span>);<br>            node.next = previous.next;<br>            previous.next = node;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">removeAt</span>(<span class="hljs-params">index</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; <span class="hljs-built_in">this</span>.count) &#123;<br>        <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">if</span>(index === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//移除第一个元素</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.size() === <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">this</span>.head = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//只有一个元素，直接让头部为undefined</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">const</span> removed = <span class="hljs-built_in">this</span>.head;<br>                current = <span class="hljs-built_in">this</span>.getElementAt(<span class="hljs-built_in">this</span>.size()); <span class="hljs-comment">//最后一个元素</span><br>                <span class="hljs-built_in">this</span>.head = <span class="hljs-built_in">this</span>.head.next;  <span class="hljs-comment">//头部元素变成下一个元素</span><br>                current.next = <span class="hljs-built_in">this</span>.head;  <span class="hljs-comment">//最后一个元素next指针指向头部</span><br>                current = removed;  <span class="hljs-comment">//获得移除的元素，后面return移除元素的值</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> previous = <span class="hljs-built_in">this</span>.getElementAt(index - <span class="hljs-number">1</span>);<br>            current = previous.next;<br>            previous.next = current.next;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.count--;<br>        <span class="hljs-keyword">return</span> current.element;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-有序链表"><a href="#5-有序链表" class="headerlink" title="5. 有序链表"></a>5. 有序链表</h3><p>保持元素有序的链表结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Compare = &#123;<br>    <span class="hljs-attr">LESS_THAN</span>: -<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">BIGGER_THAN</span>: <span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defaultCompare</span>(<span class="hljs-params">a,b</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (a === b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a &lt; b ? Compare.LESS_THAN : Compare.BIGGER_THAN;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortedLinkedList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">equalsFn = defaultEquals, compareFn = defaultCompare</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(equalsFn);<br>        <span class="hljs-built_in">this</span>.compareFn = compareFn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">insert</span>(<span class="hljs-params">element, index = <span class="hljs-number">0</span></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.insert(element,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> pos = <span class="hljs-built_in">this</span>.getIndexNextSortedElement(element);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.insert(elemenet,pos);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">getIndexNextSortedElement</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(; i &lt; <span class="hljs-built_in">this</span>.size() &amp;&amp; current; i++) &#123;<br>        <span class="hljs-keyword">const</span> comp = <span class="hljs-built_in">this</span>.compareFn(element,current.element);<br>        <span class="hljs-keyword">if</span>(comp === Compare.LESS_THAN) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        current = current.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-创建StackLinkedList-类"><a href="#6-创建StackLinkedList-类" class="headerlink" title="6. 创建StackLinkedList 类"></a>6. 创建StackLinkedList 类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackLinkedList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items = <span class="hljs-keyword">new</span> DoublyLinkedList(); <span class="hljs-comment">// &#123;1&#125;</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">element</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.items.push(element); <span class="hljs-comment">// &#123;2&#125;</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">pop</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.removeAt(<span class="hljs-built_in">this</span>.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// &#123;3&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-LeetCode题"><a href="#7-LeetCode题" class="headerlink" title="7. LeetCode题"></a>7. LeetCode题</h3><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709224441.png" alt="LeetCode206"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * function ListNode(val, next) &#123;</span><br><span class="hljs-comment"> *     this.val = (val===undefined ? 0 : val)</span><br><span class="hljs-comment"> *     this.next = (next===undefined ? null : next)</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;ListNode&#125;</span> <span class="hljs-variable">head</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;ListNode&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseList = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> p1 = head;<br>    <span class="hljs-keyword">let</span> p2 = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>(p1) &#123;<br>        <span class="hljs-keyword">const</span> tmp = p1.next;<br>        p1.next = p2; <span class="hljs-comment">//指向前一个指针</span><br>        p2 = p1; <br>        p1 = tmp; <br>    &#125;<br>    <span class="hljs-keyword">return</span> p2; <span class="hljs-comment">//p1已经跑不见了</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>大致的思路</strong>：</p><p>翻转节点，将n+1的next指向n</p><p><strong>具体操作</strong>：</p><p>创建一对快慢指针，p1指向头部，p2指向null（慢于p1）</p><p>当p1存在时，将p1.next用tmp存起来，p1.next指向前一个指针，p2、p1向右走，直到所有节点都翻转过来</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709232326.png" alt="LeetCode2"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> addTwoNumbers = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">l1, l2</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> l3 = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">let</span> p1 = l1<br>    <span class="hljs-keyword">let</span> p2 = l2<br>    <span class="hljs-keyword">let</span> p3 = l3<br>    <span class="hljs-keyword">let</span> carry = <span class="hljs-number">0</span>  <span class="hljs-comment">//存放上一个val的个位数</span><br>    <span class="hljs-keyword">while</span>(p1 || p2) &#123;<br>        <span class="hljs-keyword">const</span> v1 = p1 ? p1.val:<span class="hljs-number">0</span><br>        <span class="hljs-keyword">const</span> v2 = p2 ? p2.val:<span class="hljs-number">0</span><br>        <span class="hljs-keyword">const</span> val = v1 + v2 + carry  <span class="hljs-comment">//加起来</span><br>        carry = <span class="hljs-built_in">Math</span>.floor(val / <span class="hljs-number">10</span>)  <span class="hljs-comment">//取出十位数</span><br>        p3.next = <span class="hljs-keyword">new</span> ListNode(val % <span class="hljs-number">10</span>)  <span class="hljs-comment">//把个位数加上去</span><br>        <span class="hljs-comment">//p1 p2向右走</span><br>        <span class="hljs-keyword">if</span>(p1) p1 = p1.next  <br>        <span class="hljs-keyword">if</span>(p2) p2 = p2.next<br>        p3 = p3.next<br>    &#125;<br>    <span class="hljs-keyword">if</span>(carry) &#123;<br>        p3.next = <span class="hljs-keyword">new</span> ListNode(carry)  <span class="hljs-comment">//把carry也放进去</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> l3.next<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709233249.png" alt="LeetCode83"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> deleteDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> p = head;<br>    <span class="hljs-keyword">while</span>(p &amp;&amp; p.next) &#123;<br>        <span class="hljs-keyword">if</span>(p.val === p.next.val)&#123;<br>            p.next = p.next.next;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            p = p.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709233956.png" alt="LeetCode141"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hasCycle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> slow = head;<br>    <span class="hljs-keyword">let</span> fast = head;<br>    <span class="hljs-keyword">while</span>(slow &amp;&amp; fast &amp;&amp; fast.next) &#123;<br>        slow = slow.next;<br>        fast = fast.next.next;<br>        <span class="hljs-keyword">if</span>(slow === fast)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>快慢指针： 快慢指针遇上，表明有环</p><h3 id="8-应用"><a href="#8-应用" class="headerlink" title="8. 应用"></a>8. 应用</h3><p>参考文章：<a href="https://blog.youlan-lan.xyz/2021/07/10/2107102/">《前端与链表》</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端与链表</title>
    <link href="/2021/07/10/2107102/"/>
    <url>/2021/07/10/2107102/</url>
    
    <content type="html"><![CDATA[<h2 id="1-原型链"><a href="#1-原型链" class="headerlink" title="1. 原型链"></a>1. 原型链</h2><p>原型链的本质是链表</p><p>原型链上的节点是各种原型对象，比如：<code>Function.prototype</code>、<code>Object.prototype</code>……</p><p>原型链通过<code>__proto__</code>属性连接各种原型对象</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><code>obj-&gt;Object.prototype-&gt;null</code></p><p><code>func-&gt;Function.prototype-&gt;Object.prototype-&gt;null</code></p><p><code>arr-&gt;Array.prototype-&gt;Object.prototype-&gt;null</code></p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ol><li>如果A沿着原型链能找到B.prototype，那么A instanceof B为true</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-keyword">instanceof</span> = <span class="hljs-function">(<span class="hljs-params">A, B</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> p = A;<br>    <span class="hljs-keyword">while</span>(p) &#123;<br>        <span class="hljs-keyword">if</span>(p === B.prototype)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        p = p.__proto__;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>如果在A对象上没有找到x属性，那么会沿着原型链找x属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br><span class="hljs-built_in">Object</span>.prototype.x = <span class="hljs-string">&#x27;x&#x27;</span>;<br><span class="hljs-keyword">const</span> func = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><span class="hljs-built_in">Function</span>.prototype.y = <span class="hljs-string">&#x27;y&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(func.x);  <span class="hljs-comment">//x</span><br><span class="hljs-built_in">console</span>.log(func.y);  <span class="hljs-comment">//y</span><br><span class="hljs-built_in">console</span>.log(obj.x);   <span class="hljs-comment">//x</span><br><span class="hljs-built_in">console</span>.log(obj.y);   <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><h2 id="2-获取JSON的节点值"><a href="#2-获取JSON的节点值" class="headerlink" title="2. 获取JSON的节点值"></a>2. 获取JSON的节点值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> json = &#123;<br>    <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">1</span> &#125; &#125;,<br>    <span class="hljs-attr">d</span>: &#123; <span class="hljs-attr">e</span>: &#123; <span class="hljs-attr">f</span>: &#123; <span class="hljs-attr">h</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-attr">g</span>: &#123; <span class="hljs-attr">i</span>: <span class="hljs-number">3</span> &#125; &#125; &#125;<br>&#125;<br><br><span class="hljs-comment">// 遍历json对象的路径</span><br><span class="hljs-keyword">const</span> path1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">const</span> path2 = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>];<br><span class="hljs-keyword">const</span> path3 = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPoint</span>(<span class="hljs-params">path</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> p = json;<br>    path.forEach(<span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> &#123;<br>        p = p[k];<br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(p);<br>&#125;<br><br>getPoint(path1); <span class="hljs-comment">// 1</span><br>getPoint(path2); <span class="hljs-comment">// 2</span><br>getPoint(path3); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>链表</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（二）队列</title>
    <link href="/2021/07/09/2107092/"/>
    <url>/2021/07/09/2107092/</url>
    
    <content type="html"><![CDATA[<p><strong>队列是一个先进先出的数据结构</strong></p><p><strong>JavaScript中没有队列，但可以用Array实现队列的所有功能</strong></p><p><strong>队列常用操作：push、shift、queue[0]</strong></p><h3 id="1-队列定义"><a href="#1-队列定义" class="headerlink" title="1. 队列定义"></a>1. 队列定义</h3><p><strong>先进先出</strong>（排队）</p><p>队列在尾部添加新元素，并从顶部移除元素</p><p>最新添加的元素必须排在队列的末尾</p><blockquote><p>用途：</p><p>食堂排队打饭</p><p>JS异步中的任务队列</p><p>计算最近请求次数</p><p>……</p></blockquote><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709202833.png"></p><h3 id="2-队列具体操作"><a href="#2-队列具体操作" class="headerlink" title="2. 队列具体操作"></a>2. 队列具体操作</h3><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.lowestCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.items = &#123;&#125;;  <span class="hljs-comment">//使用对象来存储</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong></p><ul><li><p>enqueue(element(s))：向队列尾部添加一个（或多个）新的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">enqueue</span>(<span class="hljs-params">element(s)</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.count] = element;<br>    <span class="hljs-built_in">this</span>.count++;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>dequeue()：移除队列的第一项，并返回被移除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">dequeue</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.lowestCount];<br><span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.lowestCount];<br><span class="hljs-built_in">this</span>.lowestCount++;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>peek()：返回队列中第一个元素，也将是最先被移除的元素（不移除元素，只返回元素信息）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">peek</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.lowestCount];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>isEmpty()：如果队列中不包含任何元素，返回 true，否则返回 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count - <span class="hljs-built_in">this</span>.lowestCount === <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//return this.size() === 0;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>size()：返回队列包含的元素个数，与数组的length属性类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">size</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.count - <span class="hljs-built_in">this</span>.lowestCount;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>clear(): 清空所有元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items = &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.lowestCount = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>toString()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.lowestCount]&#125;</span>`</span>;  <span class="hljs-comment">//模板字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-built_in">this</span>.lowestCount + <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">this</span>.count; i++)&#123;<br>        objString = <span class="hljs-string">`<span class="hljs-subst">$&#123;objString&#125;</span>,<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.items[i]&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> objString;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于Queue 类中的第一个索引值不一定为0，所以从索引值为lowestCount 的位置开始迭代队列</p></li></ul><h3 id="3-queue类使用"><a href="#3-queue类使用" class="headerlink" title="3.queue类使用"></a>3.queue类使用</h3><p>同stack</p><h3 id="4-双端队列定义"><a href="#4-双端队列定义" class="headerlink" title="4. 双端队列定义"></a>4. 双端队列定义</h3><p>先进先出 + 后进先出</p><p>前后都能进行添加和移除元素的特殊队列</p><blockquote><p>应用：</p><p>撤销操作</p></blockquote><h3 id="5-双端队列的具体操作"><a href="#5-双端队列的具体操作" class="headerlink" title="5. 双端队列的具体操作"></a>5. 双端队列的具体操作</h3><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Deque</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.lowestCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.items = &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong></p><p>和queue相同的： <code>isEmpty</code>、<code>clear</code>、<code>size</code>、<code>toString</code></p><p>和queue不同的：</p><ul><li><p>addFront(element)：在前端添加新的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">addFront</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEmpty()) &#123;  <span class="hljs-comment">//为空时，直接添加到双端队列的后面</span><br>        <span class="hljs-built_in">this</span>.addBack(element);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lowestCount &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//有一个元素从前端移除了，把新元素放到这个位置</span><br>        <span class="hljs-built_in">this</span>.lowestCount--;<br>        <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.lowestCount] = element;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-built_in">this</span>.count; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-built_in">this</span>.items[i] = <span class="hljs-built_in">this</span>.items[i - <span class="hljs-number">1</span>];  <span class="hljs-comment">//往后挪一个位置</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.count++;<br>        <span class="hljs-built_in">this</span>.lowestCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.items[<span class="hljs-number">0</span>] = element;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>addBack(element)：在后端添加新的元素（和enqueue()相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">addBack</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.count] = element;<br>    <span class="hljs-built_in">this</span>.count++;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>removeFront()：从前端移除第一个元素（和dequeue 方法相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">removeFront</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.lowestCount];<br><span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.lowestCount];<br><span class="hljs-built_in">this</span>.lowestCount++;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>removeBack()：从后端移除第一个元素（和Stack 类中的pop 相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">removeBack</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.pop();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>peekFront()：返回前端的第一个元素（和peek方法相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">peekFront</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.items.length - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>peekBack()：返回后端的第一个元素（和Stack 类中的peek方法相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">peekBack</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.items.length - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-Deque类使用"><a href="#6-Deque类使用" class="headerlink" title="6. Deque类使用"></a>6. Deque类使用</h3><p>同上</p><h3 id="7-解决问题"><a href="#7-解决问题" class="headerlink" title="7. 解决问题"></a>7. 解决问题</h3><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hotPotato</span>(<span class="hljs-params">elementsList, num</span>) </span>&#123;<br><span class="hljs-keyword">const</span> queue = <span class="hljs-keyword">new</span> Queue();<br><span class="hljs-keyword">const</span> elimitatedList = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; elementsList.length; i++) &#123;<br>queue.enqueue(elementsList[i]);<br>&#125;<br><span class="hljs-keyword">while</span> (queue.size() &gt; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>queue.enqueue(queue.dequeue());<br>&#125;<br>elimitatedList.push(queue.dequeue());<br>&#125;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">eliminated</span>: elimitatedList,<br><span class="hljs-attr">winner</span>: queue.dequeue()<br>&#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> names = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>];<br><span class="hljs-keyword">const</span> result = hotPotato(names, <span class="hljs-number">10</span>);<br>result.eliminated.forEach(<span class="hljs-function"><span class="hljs-params">name</span> =&gt;</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>在击鼓传花游戏中被淘汰。`</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`胜利者： <span class="hljs-subst">$&#123;result.winner&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><h4 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">palindromeChecker</span>(<span class="hljs-params">aString</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<br>        aString === <span class="hljs-literal">undefined</span> || <br>        aString === <span class="hljs-literal">null</span> ||<br>        (aString !== <span class="hljs-literal">null</span> &amp;&amp; aString.length === <span class="hljs-number">0</span>)<br>    ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> deque = <span class="hljs-keyword">new</span> Deque();<br>    <span class="hljs-keyword">const</span> lowerString = aString.toLocaleLowerCase();  <span class="hljs-comment">//转换成小写</span><br>    <span class="hljs-keyword">let</span> isEqual = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> firstChar, lastChar;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; lowerString.length; i++) &#123;<br>        deque.addBack(lowerString.charAt(i)); <span class="hljs-comment">//在后端添加新的元素</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (deque.size() &gt; <span class="hljs-number">1</span> &amp;&amp; isEqual) &#123;<br>        firstChar = deque.removeFront(); <span class="hljs-comment">//从前端移除第一个元素</span><br>        lastChar = deque.removeBack(); <span class="hljs-comment">//从后端移除第一个元素</span><br>        <span class="hljs-keyword">if</span> (firstChar !== lastChar) &#123;<br>            isEqual = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> isEqual;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="一道LeetCode题"><a href="#一道LeetCode题" class="headerlink" title="一道LeetCode题"></a>一道LeetCode题</h4><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709204129.png" alt="LeetCode933"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> RecentCounter = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.q = [];<br>&#125;;<br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">t</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br>RecentCounter.prototype.ping = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) </span>&#123;<br>   <span class="hljs-built_in">this</span>.q.push(t);<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">this</span>.q[<span class="hljs-number">0</span>] &lt; t - <span class="hljs-number">3000</span>)&#123;<br>       <span class="hljs-built_in">this</span>.q.shift(); <span class="hljs-comment">// 超出这个范围的就删除</span><br>   &#125; <br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.q.length;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your RecentCounter object will be instantiated and called as such:</span><br><span class="hljs-comment"> * var obj = new RecentCounter()</span><br><span class="hljs-comment"> * var param_1 = obj.ping(t)</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（一）栈</title>
    <link href="/2021/07/09/2107091/"/>
    <url>/2021/07/09/2107091/</url>
    
    <content type="html"><![CDATA[<p><strong>栈是一个后进先出的数据结构</strong></p><p><strong>JavaScript中没有栈，但可以用Array实现栈的所有功能</strong></p><p><strong>栈常见操作：push、pop、stack[stack. length-1]</strong></p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>后进先出，相当于往容器里放东西</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709170058.png"></p><blockquote><p>用途：</p><p>编程语言的编译器和内存中保存变量、方法调用</p><p>浏览器历史记录（浏览器的返回按钮）</p><p>函数堆栈调用</p><p>……</p></blockquote><h3 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2. 具体操作"></a>2. 具体操作</h3><p><strong>创建</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.items = [];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong>：</p><ul><li><p>push(element(s))：添加一个（或几个）新元素到栈顶</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items.push(element);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>pop()：移除栈顶的元素，同时返回被移除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">pop</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.pop();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>peek()：返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">peek</span>(<span class="hljs-params"></span>)</span> &#123;  <span class="hljs-comment">//查看栈里最后添加的元素是什么</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.items.length - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>isEmpty()：如果栈里没有任何元素就返回true，否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>)</span> &#123;  <span class="hljs-comment">//判断内部数组的长度是否为0</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length === <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>clear()：移除栈里的<strong>所有</strong>元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;  <span class="hljs-comment">//也可以多次调用pop方法，把数组中的元素全部移除</span><br><span class="hljs-built_in">this</span>.items = [];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>size()：返回栈里的元素个数（和length 属性类似）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">size</span>(<span class="hljs-params"></span>)</span> &#123;  <span class="hljs-comment">//对于集合，最好使用size代替length</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> stack = <span class="hljs-keyword">new</span> Stack();  <span class="hljs-comment">//创建栈</span><br><span class="hljs-built_in">console</span>.log(stack.isEmpty());  <span class="hljs-comment">//此时栈为空</span><br>stack.push(<span class="hljs-number">5</span>);  <span class="hljs-comment">//添加元素到栈顶</span><br><span class="hljs-built_in">console</span>.log(stack.peek());  <span class="hljs-comment">//5 =&gt; 往栈里添加的最后一个元素为5</span><br><span class="hljs-built_in">console</span>.log(stack.size());    <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(stack.isEmpty());  <span class="hljs-comment">//false</span><br>stack.push(<span class="hljs-number">8</span>);<br>stack.push(<span class="hljs-number">11</span>);<br>stack.pop(); <br>stack.pop();  <span class="hljs-comment">//调用两次，移除两个元素</span><br><span class="hljs-built_in">console</span>.log(stack.size());  <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h3 id="4-基于JavaScript对象的Stack类"><a href="#4-基于JavaScript对象的Stack类" class="headerlink" title="4. 基于JavaScript对象的Stack类"></a>4. 基于JavaScript对象的Stack类</h3><blockquote><p>最简单的方式：使用数组来存储其元素</p></blockquote><p>基本结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xxx</span> </span>&#123;<br> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>     <span class="hljs-comment">//构造</span><br>&#125;<br> <span class="hljs-comment">//写方法</span><br>&#125;<br><span class="hljs-comment">//调用</span><br></code></pre></td></tr></table></figure><h3 id="5-保护数据结构内部元素"><a href="#5-保护数据结构内部元素" class="headerlink" title="5. 保护数据结构内部元素"></a>5. 保护数据结构内部元素</h3><p>使用 “_”  “#” 前缀来声明私有属性，需要编写相应的代码逻辑</p><p>使用es6中的Symbol</p><p>使用es6中的WeakMap</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> items = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">construtor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        items.set(<span class="hljs-built_in">this</span>, []);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">element</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> s = items.get(<span class="hljs-built_in">this</span>);<br>        s.push(element);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">pop</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> s = items.get(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">const</span> r = s.pop();<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-应用"><a href="#6-应用" class="headerlink" title="6. 应用"></a>6. 应用</h3><h4 id="十进制-–-gt-二进制"><a href="#十进制-–-gt-二进制" class="headerlink" title="十进制 –&gt; 二进制"></a>十进制 –&gt; 二进制</h4><p>通过二进制的计算方法，可以知道二进制的结果是余数从高位到低位排列的</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709170610.png" alt="二进制的计算"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">decimalToBinary = <span class="hljs-function">(<span class="hljs-params">decNumber</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> remStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> number = decNumber;<br>    <span class="hljs-keyword">let</span> rem;<br>    <span class="hljs-keyword">let</span> binaryString = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">while</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>        rem = <span class="hljs-built_in">Math</span>.floor(number % <span class="hljs-number">2</span>);<br>        remStack.push(rem);<br>        number = <span class="hljs-built_in">Math</span>.floor(number / <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (!remStack.isEmpty()) &#123;<br>        binaryString += remStack.pop().toString();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> binaryString;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他进制转换"><a href="#其他进制转换" class="headerlink" title="其他进制转换"></a>其他进制转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">baseConverter</span>(<span class="hljs-params">decNumber, base</span>) </span>&#123;  <span class="hljs-comment">//decNumber转换的数字，base几进制</span><br>    <span class="hljs-keyword">const</span> remStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">const</span> digits = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br>    <span class="hljs-keyword">let</span> number = decNumber;<br>    <span class="hljs-keyword">let</span> rem;<br>    <span class="hljs-keyword">let</span> baseString = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">if</span> (!(base &gt;= <span class="hljs-number">2</span> &amp;&amp; base &lt;= <span class="hljs-number">36</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>    rem = <span class="hljs-built_in">Math</span>.floor(number % base);<br>    remStack.push(rem);   <span class="hljs-comment">//往stack里添加元素</span><br>    number = <span class="hljs-built_in">Math</span>.floor(number / base);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (!remStack.isEmpty()) &#123;<br>        baseString += digits[remStack.pop()]; <span class="hljs-comment">//从堆里面拿出元素</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> baseString;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(baseConverter(<span class="hljs-number">1111111</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h4 id="函数的堆栈调用"><a href="#函数的堆栈调用" class="headerlink" title="函数的堆栈调用"></a>函数的堆栈调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> func1 = <span class="hljs-function">() =&gt;</span> &#123;<br>    func2();<br>&#125;<br><span class="hljs-keyword">const</span> func2 = <span class="hljs-function">() =&gt;</span> &#123;<br>    func3();<br>&#125;<br><span class="hljs-keyword">const</span> func3 = <span class="hljs-function">() =&gt;</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>我们使用node进行debug：</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709171055.png"></p><p>可以看到，实际上，函数的调用也是满足后进先出的顺序</p><p>即，func3()最后进去，最先执行完的是func3()</p><h4 id="一道LeetCode题"><a href="#一道LeetCode题" class="headerlink" title="一道LeetCode题"></a>一道LeetCode题</h4><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210709172238.png" alt="LeetCode20"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> <span class="hljs-variable">s</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;boolean&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> isValid = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> stack = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>        <span class="hljs-keyword">const</span> c = s[i];<br>        <span class="hljs-keyword">if</span>(c === <span class="hljs-string">&#x27;(&#x27;</span> || c=== <span class="hljs-string">&#x27;&#123;&#x27;</span> || c === <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>            stack.push(c);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> t = stack[stack.length - <span class="hljs-number">1</span>]; <span class="hljs-comment">//栈顶元素</span><br>            <span class="hljs-keyword">if</span>(<br>                (t === <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; c ===  <span class="hljs-string">&#x27;)&#x27;</span>) ||<br>                (t === <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; c ===  <span class="hljs-string">&#x27;&#125;&#x27;</span>) ||<br>                (t === <span class="hljs-string">&#x27;[&#x27;</span> &amp;&amp; c ===  <span class="hljs-string">&#x27;]&#x27;</span>) <br>            ) &#123;<br>                stack.pop();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.length === <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数据结构</tag>
      
      <tag>栈</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 浅拷贝与深拷贝_js版</title>
    <link href="/2021/07/08/2107081/"/>
    <url>/2021/07/08/2107081/</url>
    
    <content type="html"><![CDATA[<h2 id="基础储备"><a href="#基础储备" class="headerlink" title="基础储备"></a>基础储备</h2><h3 id="1-数据类型与数据结构"><a href="#1-数据类型与数据结构" class="headerlink" title="1. 数据类型与数据结构"></a>1. 数据类型与数据结构</h3><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210708202846.png" alt="JavaScript数据类型与数据结构"></p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210708202930.png" /><p><strong>关于null和undefined：</strong></p><p>有一个小故事：</p><p>1995年JavaScript诞生时，最初像Java一样，只设置了null作为表示”无”的值。根据C语言的传统，null被设计成可以自动转为0。但是，JavaScript的设计者，觉得这样做还不够，主要有以下两个原因：</p><ol><li><p>null像在Java里一样，被当成一个对象。但是，JavaScript的数据类型分成原始类型（primitive）和合成类型（complex）两大类，作者觉得表示”无”的值最好不是对象。</p></li><li><p>JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。作者觉得，如果null自动转为0，很不容易发现错误。</p></li></ol><blockquote><p>因此，作者又设计了一个undefined。<br><strong>先有null后有undefined，出来undefined是为了填补之前的坑。</strong></p></blockquote><ul><li><p>null是一个表示”无”的对象（空对象指针），转为数值时为0；</p></li><li><p>undefined是一个表示”无”的原始值，转为数值时为NaN；</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//null的类型是对象，undefined的类型是undefined</span><br><span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span> <span class="hljs-comment">// false</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> == <span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> <span class="hljs-comment">// false </span><br></code></pre></td></tr></table></figure><h3 id="2-关于修改栈与堆"><a href="#2-关于修改栈与堆" class="headerlink" title="2. 关于修改栈与堆"></a>2. 关于修改栈与堆</h3><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210708181147.png" alt="栈" /><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210708181157.png" alt="堆"/><p>图中，obj1和obj2都指向同一个object，修改obj2<code>==</code>修改了引用地址<code>==</code>修改了那个对象</p><h3 id="3-堆与栈比较"><a href="#3-堆与栈比较" class="headerlink" title="3. 堆与栈比较"></a>3. 堆与栈比较</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]; <span class="hljs-comment">//a是array，属于引用类型</span><br><span class="hljs-keyword">var</span> b = a; <span class="hljs-comment">//传址</span><br><span class="hljs-keyword">var</span> c = a[<span class="hljs-number">0</span>];<span class="hljs-comment">//传值</span><br><span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//1,2,3,4,5</span><br>alert(c);<span class="hljs-comment">//1</span><br><span class="hljs-comment">//改变数值 </span><br>b[<span class="hljs-number">4</span>] = <span class="hljs-number">6</span>;<br>c = <span class="hljs-number">7</span>;<br><span class="hljs-built_in">console</span>.log(a[<span class="hljs-number">4</span>]);<span class="hljs-comment">//6，改变b把a也改变了</span><br><span class="hljs-built_in">console</span>.log(a[<span class="hljs-number">0</span>]);<span class="hljs-comment">//1，改变c不会把a改变</span><br></code></pre></td></tr></table></figure><p>由上可知：</p><ul><li><p>对象中传给变量的数据是<strong>引用类型</strong>的，会存储在堆中；</p></li><li><p>把对象中的属性/数组中的数组项赋值给变量，这时变量c是<strong>基本数据类型</strong>，存储在栈内存中；</p></li><li><p>改变栈中的数据不会影响堆中的数据；</p></li></ul><h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h3><p><strong>1. 声明时内存分配不同</strong></p><ul><li><p>基本数据类型： 栈，便于迅速查询变量的值</p></li><li><p>引用类型： 堆，栈中存储的变量只是引用地址（指针）</p><blockquote><p>引用类型的大小会改变，如果放在栈中，会降低其变量查询的速度。放在堆中，地址的大小是固定的，将地址存储在栈中对变量的性能<strong>没有任何负面影响</strong></p></blockquote></li></ul><p><strong>2. 不同的内存分配带来的不同访问机制</strong></p><ul><li>基本数据类型：直接访问</li><li>引用类型：通过地址去获得object的值</li></ul><p><strong>3. 复制变量时不同</strong></p><ul><li><p>基本数据类型： 复制之后完全独立，各自修改互不影响</p></li><li><p>引用类型： 复制的是引用地址</p><blockquote><p>此时两者都指向同一个对象，修改会一起修改（复制并不会在堆内存中新生成一个一模一样的对象，只是复制多一个保存指向这个对象指针的变量）</p><p>复制的是引用地址</p></blockquote></li></ul><p><strong>4. 参数传递不同</strong></p><p>即把实参复制给形参的过程</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p><strong>浅拷贝</strong></p><p>复制的标识堆内存中的数据，而是指向堆中的<strong>栈内存的指针</strong>，即复制的是<strong>引用地址</strong></p><p>只复制<strong>一层</strong>对象的属性，不包括对象里面的引用类型的数据</p><blockquote><p>只复制指向某个对象的指针，而不复制对象本身，新旧对象共享一块内存</p></blockquote><p><strong>深拷贝</strong></p><p>递归复制了所有层级，程度深</p><blockquote><p>复制并创建一个一摸一样的对象，不共享内存，修改新对象，旧对象保持不变</p></blockquote><h3 id="2-浅拷贝的实现"><a href="#2-浅拷贝的实现" class="headerlink" title="2. 浅拷贝的实现"></a>2. 浅拷贝的实现</h3><ol><li><p><strong>直接赋值</strong></p></li><li><p><strong>使用<code>object.assign()</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.assign(target, ...sources)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">21</span>&#125; &#125;;<br><span class="hljs-keyword">var</span> newObj = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj);<br><br>newObj.a.a = <span class="hljs-string">&quot;changed&quot;</span>;<br><span class="hljs-built_in">console</span>.log(obj.a.a); <span class="hljs-comment">// &quot;changed&quot;</span><br></code></pre></td></tr></table></figure><p>但可以处理<strong>一层</strong>的<strong>深度拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">30</span> &#125;;<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj1);<br>obj2.b = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(obj1); <span class="hljs-comment">// &#123; a: 10, b: 20, c: 30 &#125;</span><br><span class="hljs-built_in">console</span>.log(obj2); <span class="hljs-comment">// &#123; a: 10, b: 100, c: 30 &#125;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="3-深拷贝的实现"><a href="#3-深拷贝的实现" class="headerlink" title="3. 深拷贝的实现"></a>3. 深拷贝的实现</h3><ol><li><p><strong>手动复制</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">30</span> &#125;;<br><span class="hljs-keyword">var</span> obj2 = &#123; <span class="hljs-attr">a</span>: obj1.a, <span class="hljs-attr">b</span>: obj1.b, <span class="hljs-attr">c</span>: obj1.c &#125;;<br>obj2.b = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(obj1); <span class="hljs-comment">// &#123; a: 10, b: 20, c: 30 &#125; </span><br><span class="hljs-built_in">console</span>.log(obj2); <span class="hljs-comment">// &#123; a: 10, b: 100, c: 30 &#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>JSON做字符转换</strong></p><p>使用<code>JSON.stringify()</code>把对象转成字符串，再用<code>JSON.parse()</code>转换为新的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">body</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">10</span> &#125; &#125;;<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj1));<br>obj2.body.a = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">console</span>.log(obj1);  <span class="hljs-comment">// &#123; body: &#123; a: 10 &#125; &#125;</span><br><span class="hljs-built_in">console</span>.log(obj2);  <span class="hljs-comment">// &#123; body: &#123; a: 20 &#125; &#125;</span><br></code></pre></td></tr></table></figure><p><strong>缺点</strong></p><p>抛弃对象的constructor =&gt; 深拷贝之后，会变成Object</p><blockquote><p>故一般是Number，String，BOOlean，Array这些扁平对象去使用（可以被json直接表示的数据结构）</p><p>而RegExp、Function、Symbol等等<strong>不能转换成json</strong>的是无法通过这种方式进行深拷贝</p></blockquote></li><li><p><strong>递归拷贝</strong></p><p>实现原理： 定义一个新的对象，遍历源对象的属性 并 赋给新对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">Obj, newObj</span>) </span>&#123;    <br>  <span class="hljs-keyword">var</span> obj = newObj || &#123;&#125;;    <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> Obj) &#123;        <br>    <span class="hljs-keyword">var</span> prop = Obj[i]; <span class="hljs-comment">// 避免相互引用对象导致死循环，如Obj.a = Obj的情况</span><br>    <span class="hljs-keyword">if</span>(prop === obj) &#123;            <br>      <span class="hljs-keyword">continue</span>;<br>    &#125;        <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> prop === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>      obj[i] = (prop.constructor === <span class="hljs-built_in">Array</span>) ? [] : &#123;&#125;;  <span class="hljs-comment">// array || string</span><br>      <span class="hljs-built_in">arguments</span>.callee(prop, obj[i]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      obj[i] = prop;<br>    &#125;<br>  &#125;    <br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">var</span> str = &#123;&#125;;<br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">21</span>&#125; &#125;;<br>deepClone(obj, str);<br><span class="hljs-built_in">console</span>.log(str.a); <span class="hljs-comment">// &#123;a: &quot;hello&quot;, b: 21&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>使用Object.create()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">Obj, newObj</span>) </span>&#123;    <span class="hljs-comment">// 大致实现和递归差不多</span><br>  <span class="hljs-keyword">var</span> obj = newObj || &#123;&#125;;    <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> Obj) &#123;        <br>    <span class="hljs-keyword">var</span> prop = Obj[i];<br>    <span class="hljs-keyword">if</span>(prop === obj) &#123;            <br>      <span class="hljs-keyword">continue</span>;<br>    &#125;        <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> prop === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>      obj[i] = (prop.constructor === <span class="hljs-built_in">Array</span>) ? [] : <span class="hljs-built_in">Object</span>.create(prop);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      obj[i] = prop;<br>    &#125;<br>  &#125;    <br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>第三方函数</strong></p><p>直接使用一些函数库来做到深拷贝</p></li></ol><h3 id="4-特殊"><a href="#4-特殊" class="headerlink" title="4. 特殊"></a>4. 特殊</h3><p>对一维数组，可以实现深拷贝，例如：</p><ul><li><p>扩展运算符</p></li><li><p><code>concat()</code>和<code>slice()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">var</span> [ ...arr2 ] = arr<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">5</span><br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//[1,2,5,4,5]</span><br><span class="hljs-built_in">console</span>.log(arr2)  <span class="hljs-comment">//[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">var</span> arrCopy = arr.concat();<br>arrCopy[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="hljs-built_in">console</span>.log(arrCopy); <span class="hljs-comment">// [&quot;test&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">var</span> arrCopy = arr.slice(<span class="hljs-number">0</span>);<br>arrCopy[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="hljs-built_in">console</span>.log(arrCopy); <span class="hljs-comment">// [&quot;test&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><p>如果是多层的话，除了第一层其余的都只是进行浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> time = &#123;<br>    <span class="hljs-attr">year</span>: <span class="hljs-number">2021</span>,<br>    <span class="hljs-attr">month</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-attr">day</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> copyTime = &#123; ...time &#125;;<br>copyTime.day.value = <span class="hljs-number">2</span>;<br>copyTime.month = <span class="hljs-number">6</span>;<br><span class="hljs-built_in">console</span>.log(copyTime); <span class="hljs-comment">// &#123; year: 2021, month: 6, day: &#123; value: 2 &#125; &#125; </span><br><span class="hljs-built_in">console</span>.log(time); <span class="hljs-comment">// &#123; year: 2021, month: 7, day: &#123; value: 2 &#125; &#125;</span><br><span class="hljs-comment">//第一层的没被改变，而第二层的就被改变了</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试高频</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js基础</tag>
      
      <tag>高频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES(6-11)全版本语法大全</title>
    <link href="/2021/07/03/2107031/"/>
    <url>/2021/07/03/2107031/</url>
    
    <content type="html"><![CDATA[<p>本篇文章为课程笔记，可能有错误</p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><blockquote><p>es6是js的规格，js是es6的实现</p></blockquote><h2 id="1-新的声明方式：let"><a href="#1-新的声明方式：let" class="headerlink" title="1. 新的声明方式：let"></a>1. 新的声明方式：let</h2><p>变量</p><ul><li>不属于顶层对象window</li><li>不允许重复声明</li><li>不存在变量提升</li><li>暂时性死区</li><li>块级作用域</li></ul><h3 id="1-不属于顶层对象window"><a href="#1-不属于顶层对象window" class="headerlink" title="1. 不属于顶层对象window"></a>1. 不属于顶层对象window</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//声明的是变量，具有作用域</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span><br><span class="hljs-built_in">console</span>.log(windeow.a) <span class="hljs-comment">//可以输出</span><br><span class="hljs-comment">//没有var，是一个对象</span><br>b = <span class="hljs-number">6</span><br><span class="hljs-built_in">console</span>.log(windeow.b) <span class="hljs-comment">//可以输出</span><br></code></pre></td></tr></table></figure><p>let的出现是为了弥补var将变量挂在window上的缺陷</p><p>static文件夹下的文件是原封不动地上传到浏览器</p><p>而src文件夹下的文件会经过webpack打包，会规避一些问题</p><h3 id="2-不允许重复声明"><a href="#2-不允许重复声明" class="headerlink" title="2. 不允许重复声明"></a>2. 不允许重复声明</h3><p>var可以多次重复声明（最后一次声明会覆盖前面的声明），而let不能（会报错）</p><p>可以避免重复命名</p><h3 id="3-不存在变量提升"><a href="#3-不存在变量提升" class="headerlink" title="3. 不存在变量提升"></a>3. 不存在变量提升</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a)<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span><br><br><span class="hljs-comment">//相当于</span><br><span class="hljs-keyword">var</span> a<br><span class="hljs-built_in">console</span>.log(a)<br>a = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>而let不存在变量提升</p><h3 id="4-暂时性死区"><a href="#4-暂时性死区" class="headerlink" title="4. 暂时性死区"></a>4. 暂时性死区</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    a = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">let</span> a<br>&#125;<br><span class="hljs-comment">//会报错，a没有进行声明，在if&#123;&#125;里是一个暂时性死区</span><br></code></pre></td></tr></table></figure><h3 id="5-块级作用域"><a href="#5-块级作用域" class="headerlink" title="5. 块级作用域"></a>5. 块级作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i)  <span class="hljs-comment">//输出0 1 2</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(i)  <span class="hljs-comment">//只会输出3，因为var不存在块级作用域，i=3时不满足条件则结束循环，跳出循环之后被外部的console.log输出</span><br><span class="hljs-comment">//将var改成let，则外部的console报错</span><br></code></pre></td></tr></table></figure><p>块级作用域使得代码更加安全</p><ul><li>允许在块级作用域内声明函数</li><li>函数声明类似于<code>var</code>，即会提升到全局作用域或函数作用域的头部</li><li>同时，函数声明还会提升到所在的块级作用域的头部</li></ul><p>参考：<a href="https://zhuanlan.zhihu.com/p/100856823">https://zhuanlan.zhihu.com/p/100856823</a></p><h2 id="2-新的声明方式：const"><a href="#2-新的声明方式：const" class="headerlink" title="2. 新的声明方式：const"></a>2. 新的声明方式：const</h2><p>常量，不能被重新赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a<br>a = <span class="hljs-number">5</span> <span class="hljs-comment">//报错，应const a = 5</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210510212827.png" alt="image-20210510212827201" style="zoom:33%;" /><p>对于引用类型，const不能改变其引用地址，但是可以改变堆内存中的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;yl&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">11</span><br>&#125;<br><span class="hljs-comment">//这里添加一行 Object.freeze(obj),后面的就无法改变（但只能冻结第一层，如果多层嵌套需要obj.name）</span><br>obj.sex = <span class="hljs-string">&#x27;G&#x27;</span>  <span class="hljs-comment">//obj中会添加这一值（堆内存可以改变，栈不能改变）</span><br></code></pre></td></tr></table></figure><ul><li>不属于顶层对象window</li><li>不允许重复声明</li><li>不存在变量提升</li><li>暂时性死区</li><li>块级作用域</li></ul><blockquote><p>区别：</p><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可更改</td><td>值可更改</td><td>值不可更改</td></tr></tbody></table></blockquote><h3 id="let-VS-const"><a href="#let-VS-const" class="headerlink" title="let VS const"></a>let VS const</h3><blockquote><p>默认情况下优先使用const，如果需要被改变再考虑let</p></blockquote><p>let 变量    const 常量</p><h2 id="3-解构赋值（常用）"><a href="#3-解构赋值（常用）" class="headerlink" title="3. ==解构赋值（常用）=="></a>3. ==解构赋值（常用）==</h2><ul><li>按照一定模式，从数组和对象中提取值，对变量进行赋值</li><li>数组解构</li><li>对象解构</li><li>字符串解构</li><li>应用</li></ul><p>默认参数的使用（当没有传这个值的时候，默认赋该值）</p><p>等号左右两边的结构一样即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [a,b,c,d = <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]] <span class="hljs-comment">//输出[1,2,[3,4],5]</span><br><span class="hljs-keyword">const</span> [a,b,c,d = <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],<span class="hljs-number">6</span>] <span class="hljs-comment">//输出[1,2,[3,4],6]</span><br><span class="hljs-comment">//即如果右边有值则为右边的值，否则输出左边赋的默认值；如果右边没有值，左边也没有默认值，则underfined</span><br></code></pre></td></tr></table></figure><ul><li><p>数组通过索引进行配对（按顺序解构）</p></li><li><p>对象通过键名进行配对（变量必须和属性同名）</p></li><li><p>解构也适用于嵌套结构的对象（要使用一样的结构）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br>foo <span class="hljs-comment">// &quot;aaa&quot;</span><br>bar <span class="hljs-comment">// &quot;bbb&quot;</span><br><br><span class="hljs-keyword">let</span> &#123; baz &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br>baz <span class="hljs-comment">// undefined //不同名，取不到</span><br></code></pre></td></tr></table></figure><p>嵌套赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-keyword">let</span> arr = [];<br><br>(&#123; <span class="hljs-attr">foo</span>: obj.prop, <span class="hljs-attr">bar</span>: arr[<span class="hljs-number">0</span>] &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-number">123</span>, <span class="hljs-attr">bar</span>: <span class="hljs-literal">true</span> &#125;);<br><br>obj <span class="hljs-comment">// &#123;prop:123&#125;</span><br>arr <span class="hljs-comment">// [true]</span><br></code></pre></td></tr></table></figure><ul><li>字符串的解构和数组相似</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">[a,b,c]</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a,b,c)<br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>foo(arr)<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>对于json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> json = <span class="hljs-string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#x27;</span><br><span class="hljs-keyword">let</span> &#123;a,b&#125; = <span class="hljs-built_in">JSON</span>.parse(json)  <span class="hljs-comment">//将json格式输出成对象，再进行解构赋值</span><br></code></pre></td></tr></table></figure></blockquote><p>使用了别名之后，真正被赋值的是后者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">foo</span>: baz &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br>baz <span class="hljs-comment">// &quot;aaa&quot;</span><br>foo <span class="hljs-comment">// error: foo is not defined</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 错误的写法</span><br><span class="hljs-keyword">let</span> x;<br>&#123;x&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">// 正确的写法</span><br><span class="hljs-keyword">let</span> x;<br>(&#123;x&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;);  <span class="hljs-comment">//将解构赋值语句放在一个原括号里</span><br></code></pre></td></tr></table></figure><ul><li><p>数值和布尔值的解构赋值：</p><p>会先转换为对象</p><blockquote><p>解构赋值的规则：</p><p>只要等号右边的值不是对象或数组，就先转换为对象</p><p><code>undefined</code> 和 <code>null</code> 无法转为对象，故无法进行解构赋值</p></blockquote></li><li><p>函数的参数也可以使用解构赋值</p></li></ul><p>用途：</p><ol><li><p>交换变量的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-number">2</span>;<br><br>[x, y] = [y, x];<br></code></pre></td></tr></table></figure></li><li><p>从函数返回多个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 返回一个数组</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><span class="hljs-keyword">let</span> [a, b, c] = example();<br><br><span class="hljs-comment">// 返回一个对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">bar</span>: <span class="hljs-number">2</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">let</span> &#123; foo, bar &#125; = example();<br></code></pre></td></tr></table></figure></li><li><p>函数参数的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 参数是一组有次序的值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">[x, y, z]</span>) </span>&#123; ... &#125;<br>f([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br><span class="hljs-comment">// 参数是一组无次序的值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;<br>f(&#123;<span class="hljs-attr">z</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>提取JSON数据</p></li><li><p>函数参数的默认值</p></li><li><p>遍历Map结构</p></li><li><p>输入模块的指定方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;source-map&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-数组的各种遍历方式"><a href="#4-数组的各种遍历方式" class="headerlink" title="4. 数组的各种遍历方式"></a>4. 数组的各种遍历方式</h2><h3 id="ES5中的数组遍历方式"><a href="#ES5中的数组遍历方式" class="headerlink" title="ES5中的数组遍历方式"></a>ES5中的数组遍历方式</h3><ul><li>for循环</li><li>forEach()：没有返回值，只是针对每个元素调用func</li><li>map():返回新的Array，每个元素为调用func的结果</li><li>filter():返回符合func条件的元素数组</li><li>some():返回布尔，判断是否有元素符合func条件</li><li>every():返回布尔，判断每个元素是否符合func条件</li><li>reduce():接收一个函数作为累加器</li><li>for in ???</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js">arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">//for </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt;arr.length;i++) &#123;<br>    <span class="hljs-comment">//....</span><br>&#125;<br><br><span class="hljs-comment">//forEach(不支持break continue)</span><br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem,index,array</span>)</span>&#123;<br>    <span class="hljs-comment">//.....</span><br>&#125;)<br><br><span class="hljs-comment">//map</span><br><span class="hljs-keyword">let</span> result = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    value += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> value<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr,result)  <span class="hljs-comment">//map循环之后会生成新的数组，不会去更改之前的arr</span><br><br><span class="hljs-comment">//filter（过滤）</span><br><span class="hljs-keyword">let</span> result = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr,result)  <span class="hljs-comment">//会生成一个新的数组，这个新的数组只会保存满足条件的值</span><br><br><span class="hljs-comment">//some</span><br><span class="hljs-keyword">let</span> result = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-number">4</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr,result)  <span class="hljs-comment">//返回的是一个布尔值，因为arr中没有4，所以返回false（只要找到一个满足条件的值就会返回true）</span><br><br><span class="hljs-comment">//every</span><br><span class="hljs-keyword">let</span> result = arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr,result)  <span class="hljs-comment">//所有元素都满足条件时才会返回true</span><br><br><span class="hljs-comment">//reduce</span><br><span class="hljs-comment">//0初始值 prev上一个处理的元素 cur当前处理的元素 index当前处理元素的索引 array原数组</span><br><span class="hljs-keyword">let</span> sum = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">prev,cur,index,array</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> prev + cur<br>&#125;,<span class="hljs-number">0</span>) <span class="hljs-comment">//得到的就是求和的结果</span><br><span class="hljs-comment">//reduce可以实现求max min 去重等</span><br><span class="hljs-comment">//去重</span><br><span class="hljs-keyword">let</span> res = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">prev,cur</span>)</span>&#123;<br>    prev.indexOf(cur) == -<span class="hljs-number">1</span> &amp;&amp; prev.push(cur)<br>    <span class="hljs-keyword">return</span> prev<br>&#125;,[])<br><br><span class="hljs-comment">//for in xx</span><br><span class="hljs-comment">//这种方法遍历数组会将arr上的所有东西遍历出来（包括原型上的方法）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> arr)&#123;<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ES6中数组遍历方法"><a href="#ES6中数组遍历方法" class="headerlink" title="ES6中数组遍历方法"></a>ES6中数组遍历方法</h3><ul><li>find():返回第一个通过测试的元素</li><li>findIndex():返回的值为该通过第一个元素的索引</li><li>for of</li><li>values()</li><li>keys()</li><li>entries()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]<br><br><span class="hljs-comment">//find</span><br><span class="hljs-keyword">let</span> res = arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr,res) <span class="hljs-comment">//res返回的2为arr的第一个2</span><br><br><span class="hljs-comment">//findIndex</span><br><span class="hljs-keyword">let</span> res = arr.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr,res) <span class="hljs-comment">//res返回的是为arr的第一个2的索引</span><br><br><span class="hljs-comment">//for of</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr)&#123;<br>    <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br><span class="hljs-comment">//for(let item of arr.values())&#123;&#125; 和上面的效果一样</span><br><span class="hljs-comment">//arr.values() 为内容</span><br><span class="hljs-comment">//arr.keys() 为索引</span><br><span class="hljs-comment">//arr.entries() 为两者都输出</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [index,item] <span class="hljs-keyword">of</span> arr.entries())&#123;<br>    <span class="hljs-built_in">console</span>.log(index,item)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-数组的扩展"><a href="#5-数组的扩展" class="headerlink" title="5. 数组的扩展"></a>5. 数组的扩展</h2><ul><li><p>类数组/伪数组</p><p>有长度，但不能使用数组的方法</p></li><li><p>Array.from()</p></li><li><p>Array.of()</p></li><li><p>copyWithin()</p></li><li><p>fill()</p></li><li><p>includes()</p></li></ul><p> es5中，可以通过slice方法将伪数组转换成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Array</span>.prototype.slice.call(divs3)<br>arr.push(<span class="hljs-number">123</span>) <span class="hljs-comment">//此时已经转换成了真正的数组，使用数组方法不会报错</span><br></code></pre></td></tr></table></figure><p>es6中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Array.from() 将其转换为数组</span><br><span class="hljs-built_in">Array</span>.from(arrayLike)<br><br><span class="hljs-comment">//Array.of()</span><br><span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Array</span>.of(<span class="hljs-number">3</span>)<br><span class="hljs-comment">//let arr = new Array(3) 这个返回的是3个空白，并不是数组[3]。这种方法会随着传入的参数个数不同而得到不同的数组</span><br><br><span class="hljs-comment">//copyWithin()替换元素</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">console</span>.log(arr.copyWithin(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))  <span class="hljs-comment">//从第一个位置开始读取，再读取下标为3的数组，（因为没有第三个参数，所有默认到结尾），于是就用4,5来替换2,3</span><br><br><span class="hljs-comment">//fill()填充</span><br><span class="hljs-comment">//1.</span><br><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>).fill(<span class="hljs-number">7</span>) <span class="hljs-comment">//数组长度为3，用7进行填充，于是得到[7,7,7]</span><br><span class="hljs-comment">//2.</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>arr.fill(<span class="hljs-string">&#x27;yl&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">//从下标为1开始替换，直到下标为3（不包括） 得到[1,&#x27;yl&#x27;,&#x27;yl&#x27;,4,5]</span><br>arr.fill(<span class="hljs-number">0</span>)  <span class="hljs-comment">//全部被替换成0</span><br><br><span class="hljs-comment">//includes()是否包含</span><br></code></pre></td></tr></table></figure><p>NAN == NAN 不相等</p><h2 id="6-函数的参数"><a href="#6-函数的参数" class="headerlink" title="6. 函数的参数"></a>6. 函数的参数</h2><ul><li>参数的默认值</li><li>与解构赋值结合</li><li>length属性</li><li>作用域</li><li>函数的name属性</li></ul><h3 id="1-参数的默认值"><a href="#1-参数的默认值" class="headerlink" title="1. 参数的默认值"></a>1. 参数的默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//es5</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br>    y = y || <span class="hljs-string">&#x27;world&#x27;</span>  <span class="hljs-comment">//判断参数是否存在，但存在问题</span><br>    <span class="hljs-built_in">console</span>.log(x,y)<br>&#125;<br>foo(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">0</span>) <span class="hljs-comment">//如果不传y值，则打印&#x27;world&#x27;；而0由于是false，所以打印出来的是world</span><br><br><span class="hljs-comment">//es6</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x, y = <span class="hljs-string">&#x27;world&#x27;</span></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x,y)<br>&#125;<br>foo(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">//此时打印出来的是hello，0</span><br><br><span class="hljs-comment">//函数内部的参数已经默认声明过了，使用const或let再次声明会报错</span><br><span class="hljs-comment">//函数内部的参数不能重名 eg.foo(x,x,y)报错</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x = <span class="hljs-number">5</span></span>)</span>&#123;<br>    <span class="hljs-comment">//这里不能再声明x</span><br>&#125;<br>foo()<br><br><span class="hljs-comment">//参数的默认值放最后面</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,z,y=<span class="hljs-number">5</span></span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-与解构赋值结合"><a href="#2-与解构赋值结合" class="headerlink" title="2. 与解构赋值结合"></a>2. 与解构赋值结合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">&#123;x,y = <span class="hljs-number">5</span>&#125;</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x,y)<br>&#125;<br>foo(&#123;&#125;)  <span class="hljs-comment">//打印出 underfined 5（x没有赋值），这里符合解构赋值</span><br><span class="hljs-comment">//foo() 报错，结构要一样才可以</span><br></code></pre></td></tr></table></figure><p>与默认值一同使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">url,&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">    body = <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    method = <span class="hljs-string">&#x27;GET&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    headers = &#123;&#125;</span></span><br><span class="hljs-params"><span class="hljs-function">&#125; = &#123;&#125;</span>)</span>&#123;  <span class="hljs-comment">//如果不传入第二个参数，则默认值为空值</span><br>    <span class="hljs-built_in">console</span>.log(method)<br>&#125;<br>ajax(<span class="hljs-string">&#x27;http://ww.imooc.com&#x27;</span>,&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span><br>&#125;)  <span class="hljs-comment">//POST</span><br></code></pre></td></tr></table></figure><h3 id="3-length属性"><a href="#3-length属性" class="headerlink" title="3. length属性"></a>3. length属性</h3><p>返回没有指定默认值的个数</p><h3 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y=x</span>)</span>&#123;   <span class="hljs-comment">//()中形成了一个作用域，故y取到的值为这个作用域里面的x值</span><br>    <span class="hljs-built_in">console</span>.log(y)  <span class="hljs-comment">//2</span><br>&#125;<br>foo(<span class="hljs-number">2</span>)   <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">y=x</span>)</span>&#123; <br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">2</span><br>    <span class="hljs-built_in">console</span>.log(y)  <span class="hljs-comment">//1</span><br>&#125;<br>foo()  <br><span class="hljs-comment">//没有传入参数，此时y会沿着作用域链**往外**找，找到全局变量中有一个x的值，然后赋值得到</span><br><span class="hljs-comment">//如果没有声明全局变量，则返回的是underfined</span><br></code></pre></td></tr></table></figure><h3 id="5-函数的name属性"><a href="#5-函数的name属性" class="headerlink" title="5. 函数的name属性"></a>5. 函数的name属性</h3><p>(new Function).name  //输出anonymous</p><h2 id="7-拓展运算符-与-rest参数"><a href="#7-拓展运算符-与-rest参数" class="headerlink" title="7. 拓展运算符 与 rest参数"></a>7. 拓展运算符 与 rest参数</h2><ul><li><p>…</p></li><li><p>扩展运算符：把数组或者类数组展开成用逗号隔开的值</p></li><li><p>rest参数：把逗号隔开的值组合成一个数组</p><blockquote><p>互逆操作</p><p>如果…放在等号左边或是形参上，则rest参数</p><p>如果…放在等号右边或是实参上，则扩展运算符</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a,b,c</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a,b,c)<br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>foo(..arr)<br><span class="hljs-comment">//如果使用foo(arr)需要使用解构赋值，而使用拓展运算符则会将arr变成1,2,3</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//合并数组</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><br><span class="hljs-comment">//es5</span><br><span class="hljs-built_in">Array</span>.prototype.push.apply(arr2,arr2)  <span class="hljs-comment">//在原型上进行push apply</span><br><br><span class="hljs-comment">//es6</span><br>arr1.push(...arr2)  <span class="hljs-comment">//...可以打散arr2，再通过push加上去</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//打散字符串</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">var</span> arr = [...str]  <span class="hljs-comment">//得到[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/jbj6568839z/article/details/106618708?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161832152716780265480719%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161832152716780265480719&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-106618708.pc_search_result_hbase_insert&utm_term=%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE">作用域</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//es5</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,y,z</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">Array</span>.prototype.forEach.call(<span class="hljs-built_in">arguments</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;  <span class="hljs-comment">//arguments返回的是伪数组</span><br>        sum += item<br>    &#125;)<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><span class="hljs-built_in">console</span>.log(foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))  <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))  <span class="hljs-comment">//6</span><br><br><span class="hljs-comment">//使用es6中Array.from转换数组</span><br><span class="hljs-comment">//Array.from(arguments).forEach(function(item)&#123;&#125;)</span><br><br><span class="hljs-comment">//使用reset参数(对于不确定参数) 参数要放在最后</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(args)<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    args.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;<br>        sum += item<br>    &#125;)<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><br><span class="hljs-comment">//reset提取剩余的参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">x,...args</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x)  <span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">console</span>.log(args)  <span class="hljs-comment">//[2,3,4,5]</span><br>&#125;<br>foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">//同样适用于解构赋值中</span><br><span class="hljs-keyword">let</span> [x,...y] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(x)  <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(y)  <span class="hljs-comment">//[2,3]</span><br></code></pre></td></tr></table></figure><h2 id="8-箭头函数"><a href="#8-箭头函数" class="headerlink" title="8. 箭头函数"></a>8. 箭头函数</h2><ul><li><p>this指向<strong>定义时</strong>所在的对象，而不是调用时所在的对象</p><p>箭头函数里没有this，会往外一层去找this</p></li><li><p>不可以当作构造函数</p></li><li><p>不可以使用arguments对象</p></li></ul><blockquote><p>箭头函数的写法:箭头左边是参数，右边是方法体</p><p>let sum = (x,y) =&gt; {</p><p>​    return x + y</p><p>}</p><p>//可以简写成 let sum = (x,y) =&gt; x + y （方法体只有一行代码)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//es5中构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;yl&#x27;</span>,<span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> foo = <span class="hljs-function">(<span class="hljs-params">..args</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//console.log(arguments) 浏览器会报错</span><br>    <span class="hljs-comment">//可以使用reset参数进行输出</span><br>    <span class="hljs-built_in">console</span>.log(args)<br>&#125;<br>foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="9-对象的扩展"><a href="#9-对象的扩展" class="headerlink" title="9. 对象的扩展"></a>9. 对象的扩展</h2><ul><li><p>属性简洁表示法</p></li><li><p>属性名表达式</p></li><li><p>Object.is() 即===</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210413230838386.png" alt="image-20210413230838386"></p></li><li><p>拓展运算符 与 Object.assign()</p></li><li><p>in</p></li><li><p>对象的遍历方式</p></li></ul><h3 id="1-属性简洁表示法-属性名表达式"><a href="#1-属性简洁表示法-属性名表达式" class="headerlink" title="1. 属性简洁表示法 属性名表达式"></a>1. 属性简洁表示法 属性名表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;yl&#x27;</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">11</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;school&#x27;</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>    name,<br>    age,<br>    [s]:<span class="hljs-string">&#x27;gdut&#x27;</span>  <span class="hljs-comment">//如果想要使用变量，则加上[]</span><br>    <span class="hljs-function"><span class="hljs-title">study</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//es6为对象提供了一种简写的方式，如果使用箭头函数会报错，this指代的是window</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;studying&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Object-is"><a href="#2-Object-is" class="headerlink" title="2. Object.is()"></a>2. Object.is()</h3><p>obj1 == obj2  //false</p><p>obj存储的是一个引用地址，每一个obj都会进行一次new Object()，在堆内存中进行存储，所以哪怕两个对象内容一模一样，在堆内存中的位置也是不一样的，故返回false</p><p>同样 Object.is(obj1 == obj2)  //false</p><blockquote><p>let obj1 = obj2</p><p>Object.is(obj1 == obj2)  //true</p></blockquote><h3 id="3-拓展运算符-与-Object-assign"><a href="#3-拓展运算符-与-Object-assign" class="headerlink" title="3. 拓展运算符 与 Object.assign()"></a>3. 拓展运算符 与 Object.assign()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> x = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> <br>    <span class="hljs-attr">b</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">let</span> y = &#123;..x&#125;<br><span class="hljs-built_in">console</span>.log(y)  <span class="hljs-comment">//&#123;a:3,b:4&#125;</span><br><br><span class="hljs-comment">//Object.assign()</span><br><span class="hljs-keyword">let</span> x = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,  <span class="hljs-comment">//后面的值会覆盖前面的，所以a:3</span><br>    <span class="hljs-attr">b</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">let</span> y = &#123;<br>    <span class="hljs-attr">c</span>:<span class="hljs-number">5</span>,<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">6</span> <br>&#125;<br><span class="hljs-built_in">Object</span>.assign(y,x)<br><span class="hljs-built_in">console</span>.log(y)  <span class="hljs-comment">//&#123;a:3,b:4,c:5&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-in"><a href="#4-in" class="headerlink" title="4. in"></a>4. in</h3><p>判断对象中是否存在</p><p>如果是数组：</p><p>console.log(3 in arr)  //下标为3是否存在</p><h3 id="5-对象的遍历方式"><a href="#5-对象的遍历方式" class="headerlink" title="5. 对象的遍历方式"></a>5. 对象的遍历方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-built_in">console</span>.log(key,obj[key])<br>&#125;<br><br><span class="hljs-comment">//2</span><br><span class="hljs-built_in">Object</span>.keys(obj).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(key,obj[key])<br>&#125;)<br><br><span class="hljs-comment">//3</span><br><span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(key,obj[key])<br>&#125;)<br><br><span class="hljs-comment">//4</span><br><span class="hljs-built_in">Reflect</span>.ownKeys(obj).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(key,obj[key])<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="10-深拷贝与浅拷贝"><a href="#10-深拷贝与浅拷贝" class="headerlink" title="10. 深拷贝与浅拷贝"></a>10. 深拷贝与浅拷贝</h2><p><a href="https://blog.csdn.net/Einstellung/article/details/109380798?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161840591216780264052028%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161840591216780264052028&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-109380798.pc_search_result_hbase_insert&utm_term=js+%E6%B7%B1%E6%8B%B7%E8%B4%9D+%E6%B5%85%E6%8B%B7%E8%B4%9D">一篇博客</a></p><h3 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1. 浅拷贝"></a>1. 浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> Foo = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">let</span> newFoo = Foo<br>newFoo.a = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用object.assign()</span><br><span class="hljs-keyword">let</span> Foo = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-comment">// let newFoo = Foo</span><br><span class="hljs-built_in">Object</span>.assign(newFoo, Foo)<br>newFoo.a = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>改变内容，都会改变（因为改变的是引用地址）</p><h3 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2. 深拷贝"></a>2. 深拷贝</h3><ul><li><p>JSON方式</p><p>JSON.parse() 将JSON字符串转换成JavaScript对象</p><p>JSON.stringify() 将JavaScript对象转换成JSON字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> Foo = &#123;<br>    <span class="hljs-attr">a</span>: &#123;<br>      <span class="hljs-attr">c</span>:<span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(Foo)<br><span class="hljs-keyword">let</span> newFoo = <span class="hljs-built_in">JSON</span>.parse(str)<br>newFoo.a.c = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> checkType = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(data).slice(<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> deepClone = <span class="hljs-function"><span class="hljs-params">target</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> targetType = checkType(target)<br>    <span class="hljs-keyword">let</span> result<br>    <span class="hljs-comment">// 初始化操作</span><br>    <span class="hljs-keyword">if</span> (targetType === <span class="hljs-string">&#x27;Object&#x27;</span>) &#123;<br>        result = &#123;&#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetType === <span class="hljs-string">&#x27;Array&#x27;</span>) &#123;<br>        result = []<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 都不是的话证明是基本数据类型，基本数据</span><br>        <span class="hljs-comment">// 类型只会有一个值，所以直接返回这个值就可以了</span><br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>    <span class="hljs-comment">// target不是基本类型，进入遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> target) &#123;<br>        <span class="hljs-keyword">let</span> value = target[i]<br>        <span class="hljs-keyword">let</span> valueType = checkType(value)<br>        <span class="hljs-keyword">if</span> (valueType === <span class="hljs-string">&#x27;Object&#x27;</span> || valueType === <span class="hljs-string">&#x27;Array&#x27;</span>) &#123;<br>            result[i] = deepClone(value) <span class="hljs-comment">// 递归</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 是基本类型直接赋值</span><br>            result[i] = value<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="11-面向过程与面向对象"><a href="#11-面向过程与面向对象" class="headerlink" title="11. 面向过程与面向对象"></a>11. 面向过程与面向对象</h2><p>面向过程：强调实现需求的步骤</p><p>面向对象：对象的属性、方法</p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210420160238158.png" alt="image-20210420160238158" style="zoom:50%;" /><blockquote><p>JavaScript是一种基于对象的语言</p></blockquote><p>类是对象的模板，定义了同一组对象共有的属性和方法</p><h2 id="12-ES5中的类与继承"><a href="#12-ES5中的类与继承" class="headerlink" title="12. ES5中的类与继承"></a>12. ES5中的类与继承</h2><p>组合式继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>Animal.prototype.showName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;名字为&#x27;</span> + <span class="hljs-built_in">this</span>.name);<br>&#125;<br><br><span class="hljs-comment">//子类</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">name,color</span>) </span>&#123;<br>    Animal.call(<span class="hljs-built_in">this</span>,name);  <span class="hljs-comment">//继承父类的属性，**但不继承父类的方法**</span><br>    <span class="hljs-built_in">this</span>.color = color;<br>&#125;<br>Dog.prototype = <span class="hljs-keyword">new</span> Animal();  <span class="hljs-comment">//组合继承，既能继承属性又能继承方法</span><br>Dog.prototype.constuctor = Dog;<br>lett d = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;wangcai&#x27;</span>,<span class="hljs-string">&#x27;white&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(d1);<br></code></pre></td></tr></table></figure><h2 id="13-ES6中的类与继承"><a href="#13-ES6中的类与继承" class="headerlink" title="13. ES6中的类与继承"></a>13. ES6中的类与继承</h2><h3 id="1-class是语法糖"><a href="#1-class是语法糖" class="headerlink" title="1. class是语法糖"></a>1. class是语法糖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">showName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;yl&#x27;</span>,<span class="hljs-number">11</span>);<br><span class="hljs-built_in">console</span>.log(p1);<br></code></pre></td></tr></table></figure><h3 id="2-继承-extends"><a href="#2-继承-extends" class="headerlink" title="2. 继承 extends"></a>2. 继承 extends</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age,company</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name,age);<br>        <span class="hljs-built_in">this</span>.company = company;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">showCompany</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.company);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-Setters-amp-Getters"><a href="#3-Setters-amp-Getters" class="headerlink" title="3. Setters&amp;Getters"></a>3. Setters&amp;Getters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type, age</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>._age = age;<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">age</span>() &#123;  <span class="hljs-comment">//只读</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._age;<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title">age</span>(<span class="hljs-params">val</span>) &#123;  <span class="hljs-comment">//可写</span><br>        <span class="hljs-built_in">this</span>._age = val;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用这种方式可以在里面写语句</p><p>eg. </p><p>set age(val) {<br>        if (val &gt; 0 &amp;&amp; val &lt; 10) {<br>            #age = val<br>        }<br> }</p><h3 id="4-静态方法"><a href="#4-静态方法" class="headerlink" title="4. 静态方法"></a>4. 静态方法</h3><p>使用<code>static</code>来标记</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">walk</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log( <span class="hljs-string">`I am walking`</span> )<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">eat</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log( <span class="hljs-string">`I am eating`</span> )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>类中的构造器不是必须写的，要写实例进行一些初始化的操作，如添加指定属性时才写</li><li>如果A类继承了B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的</li><li>类中所定义的方法，都是放在了类的原型对象上，供实例去使用</li></ol></blockquote><ol><li></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//传统方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Point</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.x = x;<br>  <span class="hljs-built_in">this</span>.y = y;<br>&#125;<br>Point.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-built_in">this</span>.x + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-built_in">this</span>.y + <span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125;;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Point(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//class方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.x = x;<br>    <span class="hljs-built_in">this</span>.y = y;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;    <span class="hljs-comment">//方法必须使用该语法，方法名（）&#123;&#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-built_in">this</span>.x + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-built_in">this</span>.y + <span class="hljs-string">&#x27;)&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Object.assign()一次向类添加多个方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">Object</span>.assign(Point.prototype, &#123;<br>  <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<br>  <span class="hljs-function"><span class="hljs-title">toValue</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>类必须使用<code>new</code>调用</li><li></li></ol><blockquote><p>es5里，实例的属性是函数原型的属性</p><p>在es6中，static声明静态属性，属性属于类不属于实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Phone</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>Phone.name = <span class="hljs-string">&#x27;手机&#x27;</span>;   <span class="hljs-comment">//name属性属于函数对象的，不属于实例对象，称为静态属性</span><br>Phone.prototype.size = <span class="hljs-string">&#x27;5.5inch&#x27;</span>;  <span class="hljs-comment">//原型</span><br><span class="hljs-keyword">let</span> nokia = <span class="hljs-keyword">new</span> Phone();   <span class="hljs-comment">//实例化</span><br><span class="hljs-built_in">console</span>.log(nokia.name);   <span class="hljs-comment">//报错</span><br><span class="hljs-built_in">console</span>.log(nokia.size);   <span class="hljs-comment">//输出 5.5inch</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造方法</span><br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">brand, price</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.brand = brand;<br>    <span class="hljs-built_in">this</span>.price = price;<br>&#125;<br><span class="hljs-comment">//父类的成员属性</span><br><span class="hljs-function"><span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我可以打电话!!&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span> </span>&#123;   <span class="hljs-comment">//用extends来继承</span><br><span class="hljs-comment">//构造方法</span><br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">brand, price, color, size</span>)</span>&#123;<br>    <span class="hljs-built_in">super</span>(brand, price);<span class="hljs-comment">// Phone.call(this, brand, price)  关键字super</span><br>    <span class="hljs-built_in">this</span>.color = color;<br>    <span class="hljs-built_in">this</span>.size = size;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">photo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;拍照&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-title">playGame</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;玩游戏&quot;</span>);<br>&#125;<br><span class="hljs-comment">//call()&#123;</span><br><span class="hljs-comment">//    console.log(&#x27;我可以进行视频通话&#x27;);   //子类对父类方法的重写</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">const</span> xiaomi = <span class="hljs-keyword">new</span> SmartPhone(<span class="hljs-string">&#x27;小米&#x27;</span>,<span class="hljs-number">799</span>,<span class="hljs-string">&#x27;黑色&#x27;</span>,<span class="hljs-string">&#x27;4.7inch&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="5"><li>取值get  存值set</li></ol><h2 id="14-新的原始数据类型Symbol"><a href="#14-新的原始数据类型Symbol" class="headerlink" title="14. 新的原始数据类型Symbol"></a>14. 新的原始数据类型Symbol</h2><blockquote><p>let s = <strong>new</strong> Symbol()  错误，不能使用new</p><p>Symbol不是对象，不能添加属性（是一种类似于字符串的数据类型）</p></blockquote><h3 id="1-独一无二"><a href="#1-独一无二" class="headerlink" title="1. 独一无二"></a>1. 独一无二</h3><p>这个可以保证相同key值的也保存下来（比如重名学生）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-built_in">console</span>.log(s1);  <span class="hljs-comment">//Symbol()</span><br><span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>();<br><span class="hljs-built_in">console</span>.log(s1 === s2);  <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="2-自动调用toString-函数"><a href="#2-自动调用toString-函数" class="headerlink" title="2. 自动调用toString()函数"></a>2. 自动调用toString()函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yl&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>(obj);<br><span class="hljs-built_in">console</span>.log(s);  <span class="hljs-comment">//Symbol(yl)</span><br></code></pre></td></tr></table></figure><h3 id="3-Symbol-for"><a href="#3-Symbol-for" class="headerlink" title="3. Symbol.for()"></a>3. Symbol.for()</h3><p>在全局中注册的</p><p>不会每次调用都返回一个新的 Symbol 类型的值，而是先检查给定的key是否已经存在，不存在才新建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(s1 === s2);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="4-Symbol-keyFor"><a href="#4-Symbol-keyFor" class="headerlink" title="4. Symbol.keyFor()"></a>4. Symbol.keyFor()</h3><p>返回一个已经登记的Symbol类型值的key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> s1 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Symbol</span>.keyFor(s1)) <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">const</span> s2 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Symbol</span>.keyFor(s2)) <span class="hljs-comment">// foo</span><br></code></pre></td></tr></table></figure><h3 id="5-属性遍历"><a href="#5-属性遍历" class="headerlink" title="5. 属性遍历"></a>5. 属性遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;imooc&#x27;</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>        <span class="hljs-built_in">this</span>[sym] = <span class="hljs-string">&#x27;imooc.com&#x27;</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-built_in">this</span>[sym]<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&#x27;xiecheng&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(user.getName())<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) &#123;   <span class="hljs-comment">//不能遍历symbol类型的值</span><br>    <span class="hljs-built_in">console</span>.log(key)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(user)) &#123;  <span class="hljs-comment">//不能遍历symbol类型的值</span><br>    <span class="hljs-built_in">console</span>.log(key)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.getOwnPropertySymbols(user)) &#123;  <span class="hljs-comment">//只能遍历symbol类型的值</span><br>    <span class="hljs-built_in">console</span>.log(key)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-built_in">Reflect</span>.ownKeys(user)) &#123;  <span class="hljs-comment">//全都能遍历</span><br>    <span class="hljs-built_in">console</span>.log(key)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以很好地保护symbol值</p><h3 id="6-消除魔术字符串"><a href="#6-消除魔术字符串" class="headerlink" title="6. 消除魔术字符串"></a>6. 消除魔术字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getArea</span>(<span class="hljs-params">shape</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> area = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">switch</span> (shape) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Triangle&#x27;</span>:<span class="hljs-comment">//魔术字符串</span><br>            area = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Circle&#x27;</span>:<br>            area = <span class="hljs-number">2</span><br>            <span class="hljs-keyword">break</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> area<br>&#125;<br><span class="hljs-built_in">console</span>.log(getArea(<span class="hljs-string">&#x27;Triangle&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> shapeType = &#123;<br>    <span class="hljs-attr">triangle</span>: <span class="hljs-built_in">Symbol</span>(),<span class="hljs-comment">//使用symbol赋一个独一无二的值</span><br>    <span class="hljs-attr">circle</span>: <span class="hljs-built_in">Symbol</span>()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getArea</span>(<span class="hljs-params">shape</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> area = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">switch</span> (shape) &#123;<br>        <span class="hljs-keyword">case</span> shapeType.triangle:<br>            area = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> shapeType.circle:<br>            area = <span class="hljs-number">2</span><br>            <span class="hljs-keyword">break</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> area<br>&#125;<br><span class="hljs-built_in">console</span>.log(getArea(shapeType.triangle))<br></code></pre></td></tr></table></figure><h2 id="15-新的数据结构Set"><a href="#15-新的数据结构Set" class="headerlink" title="15. 新的数据结构Set"></a>15. 新的数据结构Set</h2><p>数据结构 Se类似于数组，但是成员的值都是唯一的，没有重复的值</p><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><p>生成 Set 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">s.add(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>s.add(<span class="hljs-string">&#x27;goodbye&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">s.add(<span class="hljs-string">&#x27;hello&#x27;</span>).add(<span class="hljs-string">&#x27;goodbye&#x27;</span>)  <span class="hljs-comment">//写在一起</span><br></code></pre></td></tr></table></figure><blockquote><p>添加重复的数据是无效的</p></blockquote><p>删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">s.delete(<span class="hljs-string">&#x27;hello&#x27;</span>)  <span class="hljs-comment">// 删除指定数据</span><br>s.clear()  <span class="hljs-comment">// 删除全部数据</span><br></code></pre></td></tr></table></figure><p>统计数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 判断是否包含数据项，返回 true 或 false</span><br>s.has(<span class="hljs-string">&#x27;hello&#x27;</span>) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 计算数据项总数</span><br>s.size <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr)<br></code></pre></td></tr></table></figure><p>合并去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([...arr1, ...arr2])<br><span class="hljs-built_in">console</span>.log(s)<br><span class="hljs-built_in">console</span>.log([...s])<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(s))<br></code></pre></td></tr></table></figure><p>交集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr1)<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr2)<br><span class="hljs-keyword">let</span> result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr1.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> s2.has(item)))<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(result))<br></code></pre></td></tr></table></figure><p>差集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr1.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> !s2.has(item)))<br><span class="hljs-keyword">let</span> arr4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr2.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> !s1.has(item)))<br><span class="hljs-built_in">console</span>.log(arr3)<br><span class="hljs-built_in">console</span>.log(arr4)<br><span class="hljs-built_in">console</span>.log([...arr3, ...arr4])<br></code></pre></td></tr></table></figure><h3 id="2-遍历方式"><a href="#2-遍历方式" class="headerlink" title="2. 遍历方式"></a>2. 遍历方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(s.keys()) <span class="hljs-comment">// SetIterator &#123;&quot;hello&quot;, &quot;goodbye&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(s.values()) <span class="hljs-comment">// SetIterator &#123;&quot;hello&quot;, &quot;goodbye&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(s.entries()) <span class="hljs-comment">// SetIterator &#123;&quot;hello&quot; =&gt; &quot;hello&quot;, &quot;goodbye&quot; =&gt; &quot;goodbye&quot;&#125;</span><br>s.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(item) <span class="hljs-comment">// hello // goodbye</span><br>&#125;)<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> s) &#123;<br>    <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> s.keys()) &#123;<br>    <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> s.values()) &#123;<br>    <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> s.entries()) &#123;<br>    <span class="hljs-built_in">console</span>.log(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>])  <span class="hljs-comment">//key值和value值都是一样的</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-WeakSet"><a href="#3-WeakSet" class="headerlink" title="3. WeakSet"></a>3. WeakSet</h3><p>区别：</p><p>成员只能是对象，而不能是其他类型的值</p><p>没有size属性，不能遍历</p><p>弱引用</p><blockquote><p> 所谓垃圾回收机制：</p><p>如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakSet</span>()<br>ws.add(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// TypeError: Invalid value used in weak set</span><br>ws.add(<span class="hljs-built_in">Symbol</span>())<br><span class="hljs-comment">// TypeError: invalid value used in weak set</span><br><span class="hljs-keyword">let</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakSet</span>()<br><span class="hljs-keyword">const</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;imooc&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">5</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(ws)<br><span class="hljs-built_in">console</span>.log(ws.has(obj2))<br></code></pre></td></tr></table></figure><h2 id="16-新的数据类型Map"><a href="#16-新的数据类型Map" class="headerlink" title="16. 新的数据类型Map"></a>16. 新的数据类型Map</h2><p>类似于对象，键值对的集合</p><blockquote><p> “键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键</p><p>也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应</p></blockquote><p>是一种更完善的 Hash 结构实现</p><p>如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><h3 id="1-基本语法-1"><a href="#1-基本语法-1" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><p>实例化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([<br>    [<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;yl&#x27;</span>],<br>    [<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-number">5</span>]<br>])<br><span class="hljs-built_in">console</span>.log(map);  <span class="hljs-comment">//Map(2) &#123;&quot;name&quot; =&gt; &#x27;yl&#x27;,&quot;age&quot; =&gt; 5&#125;</span><br></code></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yl&#x27;</span><br>&#125;<br>map.set(obj,<span class="hljs-string">&#x27;66&#x27;</span>);<br></code></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">map.delete(keyObj);    <span class="hljs-comment">// 删除指定的数据</span><br>map.clear();           <span class="hljs-comment">// 删除所有数据</span><br></code></pre></td></tr></table></figure><p>统计数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(map.size) <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(map.has(keyObj)) <span class="hljs-comment">//判断是否有 key-value</span><br></code></pre></td></tr></table></figure><p>查询数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(map.get(keyObj)) <span class="hljs-comment">// 和键&#x27;keyObj&#x27;关联的值</span><br></code></pre></td></tr></table></figure><h3 id="2-遍历方式-1"><a href="#2-遍历方式-1" class="headerlink" title="2. 遍历方式"></a>2. 遍历方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">map.forEach(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(value, key))  <span class="hljs-comment">//value, key</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map) &#123;  <span class="hljs-comment">//key, value</span><br>    <span class="hljs-built_in">console</span>.log(key, value)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.keys()) &#123;<br>    <span class="hljs-built_in">console</span>.log(key)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> map.values()) &#123;<br>    <span class="hljs-built_in">console</span>.log(value)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map.entries()) &#123;<br>    <span class="hljs-built_in">console</span>.log(key, value)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Map  <em>VS</em>  Object：</p><ul><li><p><strong>键的类型</strong></p><p>Object的键: 字符串或者 Symbols</p><p> Map 的键: 任意值</p></li><li><p><strong>键的顺序</strong></p><p>Object的键：无序</p><p>Map的键值：有序</p><blockquote><p>进行遍历时，Map 对象是<strong>按插入的顺序</strong>返回键值。</p></blockquote></li><li><p><strong>键值对的统计</strong></p><p> Object的个数：只能手算</p><p> Map的个数：用size</p></li><li><p><strong>键值对的遍历</strong></p><p>Object：先获取键数组，再进行迭代</p><p>Map：可直接进行迭代</p></li><li><p><strong>性能</strong></p><p>在涉及频繁增删键值对的场景下，Map 会有些性能优势</p></li></ul></blockquote><h3 id="3-WeekMap"><a href="#3-WeekMap" class="headerlink" title="3. WeekMap"></a>3. WeekMap</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// WeakMap 可以使用 set 方法添加成员</span><br><span class="hljs-keyword">const</span> wm1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()<br><span class="hljs-keyword">const</span> key = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span><br>&#125;<br>wm1.set(key, <span class="hljs-number">2</span>)<br>wm1.get(key) <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// WeakMap 也可以接受一个数组</span><br><span class="hljs-comment">// 作为构造函数的参数</span><br><span class="hljs-keyword">const</span> k1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> k2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-keyword">const</span> wm2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>([<br>    [k1, <span class="hljs-string">&#x27;foo&#x27;</span>],<br>    [k2, <span class="hljs-string">&#x27;bar&#x27;</span>]<br>])<br>wm2.get(k2) <span class="hljs-comment">// &quot;bar&quot;</span><br></code></pre></td></tr></table></figure><p>区别：</p><ul><li><p>WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名</p></li><li><p>不计入垃圾回收机制</p></li></ul><h2 id="17-字符串的扩展"><a href="#17-字符串的扩展" class="headerlink" title="17. 字符串的扩展"></a>17. 字符串的扩展</h2><h3 id="1-Unicode表示法（少用）"><a href="#1-Unicode表示法（少用）" class="headerlink" title="1. Unicode表示法（少用）"></a>1. Unicode表示法（少用）</h3><blockquote><p>Unicode有啥用：</p><p>保证简便高效和保持与已有编码标准兼容之间的平衡</p><p>在内部使用Unicode的应用程序，能够同时存储和处理世界上所有的字符，这消除了传统的国际化方法所面临的一些困难</p></blockquote><ol><li>es5</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;\u0061&quot;</span>    <span class="hljs-comment">// &quot;a&quot;</span><br></code></pre></td></tr></table></figure><p>只限于码点在\u0000~\uFFFF之间的字符</p><p>超出须用两个双字节的形式表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;\uD842\uDFB7&quot;</span>   <span class="hljs-comment">// &quot;𠮷&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>es6</li></ol><p>将码点放入大括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;\u&#123;20BB7&#125;&quot;</span>   <span class="hljs-comment">// &quot;𠮷&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;\z&#x27;</span> === <span class="hljs-string">&#x27;z&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-string">&#x27;\172&#x27;</span> === <span class="hljs-string">&#x27;z&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-string">&#x27;\x7A&#x27;</span> === <span class="hljs-string">&#x27;z&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-string">&#x27;\u007A&#x27;</span> === <span class="hljs-string">&#x27;z&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-string">&#x27;\u&#123;7A&#125;&#x27;</span> === <span class="hljs-string">&#x27;z&#x27;</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="2-遍历器接口"><a href="#2-遍历器接口" class="headerlink" title="2. 遍历器接口"></a>2. 遍历器接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;imooc&#x27;</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-模板字符串"><a href="#3-模板字符串" class="headerlink" title="3. ==模板字符串=="></a>3. ==模板字符串==</h3><ul><li><p>多行字符串</p><p>使用后，不需要使用/n换行</p></li><li><p>插入表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Fifteen is <span class="hljs-subst">$&#123;a + b&#125;</span> and</span><br><span class="hljs-string">not <span class="hljs-subst">$&#123;<span class="hljs-number">2</span> * a + b&#125;</span>.`</span>);<br></code></pre></td></tr></table></figure><p>如果模板字符串中的变量没有声明，会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 变量place没有声明</span><br><span class="hljs-keyword">let</span> msg = <span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;place&#125;</span>`</span>; <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure></li><li><p>嵌套模板</p></li><li><p>标签模板</p><blockquote><p>==tag函数（?）==</p></blockquote></li></ul><h3 id="4-扩展方法"><a href="#4-扩展方法" class="headerlink" title="4. 扩展方法"></a>4. 扩展方法</h3><ul><li><p>String.fromCodePoint() </p><p>从 Unicode 码点返回对应字符（可以识别大于0xFFFF的字符）</p><blockquote><p>弥补了<code>String.fromCharCode()</code>方法的不足</p></blockquote></li><li><p>String.includes()</p><p>是否包含该字符串(es5中使用indexOf)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;imooc&#x27;</span><br><span class="hljs-built_in">console</span>.log(str.includes(<span class="hljs-string">&#x27;mo&#x27;</span>))  <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p>String.startsWith()</p><p>判断是否在头部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;imooc&#x27;</span><br><span class="hljs-built_in">console</span>.log(str.endsWith(<span class="hljs-string">&#x27;mooc&#x27;</span>))  <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p>String.endsWith()</p><p>判断是否在尾部</p><blockquote><p>上述三个方法都有第二个参数n</p><p>includes和startsWith从第n个位置直到字符串结束</p><p>endsWith是对前n个字符</p></blockquote></li><li><p>String.repeat(n)</p><p>将原字符串重复n次后返回一个字符串</p><p>如果是小数，会被取整</p><p>如果是负数或者infinity，报错</p><p>NaN等同0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;yl&#x27;</span><br><span class="hljs-keyword">const</span> newStr = str.repeat(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">console</span>.log(newStr)  <span class="hljs-comment">//ylylylylylylylylylyl</span><br></code></pre></td></tr></table></figure></li><li><p>String.raw() 在斜杆前面再加一个斜杆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.raw<span class="hljs-string">`Hi\n<span class="hljs-subst">$&#123;<span class="hljs-number">2</span>+<span class="hljs-number">3</span>&#125;</span>!`</span>  <span class="hljs-comment">//&quot;Hi\\n5!&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 等同于`foo$&#123;1 + 2&#125;bar`  &quot;foo3bar&quot;</span><br><span class="hljs-built_in">String</span>.raw(&#123; <span class="hljs-attr">raw</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>] &#125;, <span class="hljs-number">1</span> + <span class="hljs-number">2</span>) <br></code></pre></td></tr></table></figure></li><li><p>String.codePointAt() 返回码点的十进制值</p></li><li><p>String.normalize()</p></li><li><p>String.trimStart()【trimLeft()】 消除头部的空格，尾部会被保留</p></li><li><p>String.trimEnd() 【trimRight()】消除尾部的空格，头部会被保留</p></li><li><p>String.matchAll() 返回一个正则表达式在当前字符串的所有匹配</p></li><li><p>String.replaceAll(searchValue, replacement)  替换掉所有匹配值</p><p>searchValue不能是<strong>不带g修饰符</strong>的正则表达式，会报错</p><p>replacement为替换的文本，也可以是函数，或是以下特殊字符串：</p><ul><li><p><code>$&amp;</code>：匹配的子字符串。</p></li><li><p><code>$</code> `：匹配结果前面的文本。</p></li><li><p><code>$&#39;</code>：匹配结果后面的文本。</p></li><li><p><code>$n</code>：匹配成功的第<code>n</code>组内容，<code>n</code>是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。</p></li><li><p><code>$$</code>：指代美元符号<code>$</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// $&amp; 表示匹配的字符串，即`b`本身</span><br><span class="hljs-comment">// 所以返回结果与原字符串一致</span><br><span class="hljs-string">&#x27;abbc&#x27;</span>.replaceAll(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;$&amp;&#x27;</span>)<br><span class="hljs-comment">// &#x27;abbc&#x27;</span><br><br><span class="hljs-comment">// $` 表示匹配结果之前的字符串</span><br><span class="hljs-comment">// 对于第一个`b`，$` 指代`a`</span><br><span class="hljs-comment">// 对于第二个`b`，$` 指代`ab`</span><br><span class="hljs-string">&#x27;abbc&#x27;</span>.replaceAll(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;$`&#x27;</span>)<br><span class="hljs-comment">// &#x27;aaabc&#x27;</span><br><br><span class="hljs-comment">// $&#x27; 表示匹配结果之后的字符串</span><br><span class="hljs-comment">// 对于第一个`b`，$&#x27; 指代`bc`</span><br><span class="hljs-comment">// 对于第二个`b`，$&#x27; 指代`c`</span><br><span class="hljs-string">&#x27;abbc&#x27;</span>.replaceAll(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">`$&#x27;`</span>)<br><span class="hljs-comment">// &#x27;abccc&#x27;</span><br><br><span class="hljs-comment">// $1 表示正则表达式的第一个组匹配，指代`ab`</span><br><span class="hljs-comment">// $2 表示正则表达式的第二个组匹配，指代`bc`</span><br><span class="hljs-string">&#x27;abbc&#x27;</span>.replaceAll(<span class="hljs-regexp">/(ab)(bc)/g</span>, <span class="hljs-string">&#x27;$2$1&#x27;</span>)<br><span class="hljs-comment">// &#x27;bcab&#x27;</span><br><br><span class="hljs-comment">// $$ 指代 $</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.replaceAll(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;$$&#x27;</span>)<br><span class="hljs-comment">// &#x27;a$c&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>在es5中使用replace()如果想要匹配所有，需要使用正则表达式</p></blockquote></li></ul><h2 id="18-正则表达式的拓展"><a href="#18-正则表达式的拓展" class="headerlink" title="18. 正则表达式的拓展"></a>18. 正则表达式的拓展</h2><p><a href="http://c.runoob.com/front-end/854">正则表达式在线测试及常用正则表达式</a></p><p><a href="https://www.w3school.com.cn/jsref/jsref_obj_regexp.asp">正则表达手册</a></p><p>作用：检索、替换那些符合某个模式（规则）的文本</p><blockquote><p>eg. 验证表单（匹配）、过滤页面内容中的一些敏感词（替换），或从字符串中获取我们想要的特定部分（提取）</p></blockquote><h3 id="1-RegExp构造函数"><a href="#1-RegExp构造函数" class="headerlink" title="1. RegExp构造函数"></a>1. RegExp构造函数</h3><ol><li>利用RegExp对象来创建</li><li>利用字面量创建</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;xyz&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>);<br><span class="hljs-comment">// 等价于 var regex = /xyz/i;</span><br><span class="hljs-comment">//ES5不允许此时使用第二个参数添加修饰符</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/xyz/i</span>);<br><span class="hljs-comment">// 等价于 var regex = /xyz/i;</span><br></code></pre></td></tr></table></figure><p>测试正则表达式 test() 返回布尔值  <code>regexObj.test(str)</code> 检测是否符合正则表达式要求的规范</p><p>正则表达式里面不需要使用引号</p><h3 id="2-y修饰符"><a href="#2-y修饰符" class="headerlink" title="2. y修饰符"></a>2. y修饰符</h3><ul><li><p>“粘连”修饰符</p><p>后一次匹配都从上一次匹配成功的下一个位置开始</p><p>与g修饰符类似，全局匹配</p></li></ul><blockquote><p>不同：</p><ul><li>g修饰符只要剩余位置中存在匹配就可</li><li>y修饰符确保匹配必须从<strong>剩余的第一个位置</strong>开始</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;aaa_aa_a&#x27;</span>;<br><span class="hljs-keyword">var</span> r1 = <span class="hljs-regexp">/a+/g</span>;<br><span class="hljs-keyword">var</span> r2 = <span class="hljs-regexp">/a+/y</span>;<br><br>r1.exec(s) <span class="hljs-comment">// [&quot;aaa&quot;]</span><br>r2.exec(s) <span class="hljs-comment">// [&quot;aaa&quot;]</span><br><br>r1.exec(s) <span class="hljs-comment">// [&quot;aa&quot;]</span><br>r2.exec(s) <span class="hljs-comment">// null</span><br><span class="hljs-comment">//y修饰符号隐含了头部匹配的标志^</span><br></code></pre></td></tr></table></figure></blockquote><ul><li>检测 y 标志 =&gt; <code>sticky</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/hello\d/y</span>;<br><span class="hljs-built_in">console</span>.log(patten.sticky);<br></code></pre></td></tr></table></figure><ul><li>lastIndex  指定从xx位置开始匹配</li></ul><h3 id="3-u修饰符"><a href="#3-u修饰符" class="headerlink" title="3. u修饰符"></a>3. u修饰符</h3><p>Unicode模式</p><ul><li><p>处理大于 <code>\uFFFF</code> 的Unicode字符</p></li><li><p>点字符 除了换行符以外的任意单个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;𠮷&#x27;</span>;<br><br><span class="hljs-regexp">/^.$/</span>.test(s)   <span class="hljs-comment">// false</span><br>/^.$/u.test(s)  <span class="hljs-comment">// true，需要添加u字符</span><br></code></pre></td></tr></table></figure></li><li><p>i修饰符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">/[a-z]/i.test(<span class="hljs-string">&#x27;\u212A&#x27;</span>) <span class="hljs-comment">// false</span><br>/[a-z]/iu.test(<span class="hljs-string">&#x27;\u212A&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>unicode   是否设置了<code>u</code>修饰符</p></li><li><p>处理不兼容es6：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasRegExpU</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">var</span> pattern = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (ex) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-flags属性"><a href="#4-flags属性" class="headerlink" title="4. flags属性"></a>4. flags属性</h3><ul><li><p>source 获取正则表达式的文本</p></li><li><p>flags 返回正则表达式中石油标志组成的字符串形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/ab/g</span>;<br><span class="hljs-built_in">console</span>.log(re.source); <span class="hljs-comment">// &quot;ab&quot;</span><br><span class="hljs-built_in">console</span>.log(re.flags); <span class="hljs-comment">// &quot;g&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-后行断言"><a href="#5-后行断言" class="headerlink" title="5. 后行断言"></a>5. 后行断言</h3><ul><li><p>先行断言：<code>x</code>只有在<code>y</code>前面才匹配，必须写成<code>/x(?=y)/</code></p></li><li><p>先行否定断言：<code>x</code>只有不在<code>y</code>前面才匹配，必须写成<code>/x(?!y)/</code></p></li><li><p>后行断言：<code>x</code>只有在<code>y</code>后面才匹配，必须写成<code>/(?&lt;=y)x/</code></p></li><li><p>后行否定断言：<code>x</code>只有不在<code>y</code>后面才匹配，必须写成<code>/(?&lt;!y)x/</code></p></li></ul><h3 id="6-具名组匹配"><a href="#6-具名组匹配" class="headerlink" title="6. 具名组匹配"></a>6. 具名组匹配</h3><p>用圆括号分组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> RE_DATE = <span class="hljs-regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;<br><br><span class="hljs-keyword">const</span> matchObj = RE_DATE.exec(<span class="hljs-string">&#x27;1999-12-31&#x27;</span>);<br><span class="hljs-keyword">const</span> year = matchObj[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 1999</span><br><span class="hljs-keyword">const</span> month = matchObj[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 12</span><br><span class="hljs-keyword">const</span> day = matchObj[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 31</span><br></code></pre></td></tr></table></figure><p>ES2018引入了具名组匹配</p><p><code>/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</code></p><h3 id="7-引用"><a href="#7-引用" class="headerlink" title="7. 引用"></a>7. 引用</h3><p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用<code>\k&lt;组名&gt;</code>的写法</p><h3 id="8-正则匹配索引"><a href="#8-正则匹配索引" class="headerlink" title="8. 正则匹配索引"></a>8. 正则匹配索引</h3><ul><li><p>indices 返回每个组</p></li><li><p>indices.groups  提供具名组匹配<code>Z</code>的开始位置和结束位置</p><blockquote><p>获取组匹配不成功，均返回<code>undefined</code></p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&#x27;zabbcdef&#x27;</span>;<br><span class="hljs-keyword">const</span> re = <span class="hljs-regexp">/ab+(cd(ef))/</span>;<br><span class="hljs-keyword">const</span> result = re.exec(text);<br><br>result.indices <span class="hljs-comment">// [ [1, 8], [4, 8], [6, 8] ]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&#x27;zabbcdef&#x27;</span>;<br><span class="hljs-keyword">const</span> re = <span class="hljs-regexp">/ab+(?&lt;Z&gt;cd)/</span>;<br><span class="hljs-keyword">const</span> result = re.exec(text);<br><br>result.indices.groups <span class="hljs-comment">// &#123; Z: [ 4, 6 ] &#125;</span><br></code></pre></td></tr></table></figure><h2 id="19-数值的拓展"><a href="#19-数值的拓展" class="headerlink" title="19. 数值的拓展"></a>19. 数值的拓展</h2><h3 id="1-二进制0B-八进制0O"><a href="#1-二进制0B-八进制0O" class="headerlink" title="1. 二进制0B 八进制0O"></a>1. 二进制0B 八进制0O</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">console</span>.log(a.toString(<span class="hljs-number">2</span>));  <span class="hljs-comment">//十进制转换成二进制 101</span><br><br><span class="hljs-keyword">const</span> b = <span class="hljs-number">101</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(b,<span class="hljs-number">2</span>));  <span class="hljs-comment">//二进制转换成十进制</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">0B0101</span>  <span class="hljs-comment">//二进制</span><br><span class="hljs-built_in">console</span>.log(a)<br><br><span class="hljs-keyword">const</span> b = <span class="hljs-number">0O777</span>  <span class="hljs-comment">//八进制</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">//输出的是十进制</span><br></code></pre></td></tr></table></figure><h3 id="2-新增方法"><a href="#2-新增方法" class="headerlink" title="2. 新增方法"></a>2. 新增方法</h3><ul><li><p>Number.isFinite()  检查一个<strong>数值</strong>是否为有限的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//数值就会返回true，其他的都是false</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-number">15</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-number">0.8</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-literal">NaN</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-literal">Infinity</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isFinite(-<span class="hljs-literal">Infinity</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-string">&#x27;foo&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-string">&#x27;15&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-literal">true</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>Number.isNaN()  检查一个值是否为NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//NAN值就返回true</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-literal">NaN</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-number">15</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-string">&#x27;15&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-literal">true</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-number">9</span> / <span class="hljs-literal">NaN</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-string">&#x27;true&#x27;</span> / <span class="hljs-number">0</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-string">&#x27;true&#x27;</span> / <span class="hljs-string">&#x27;true&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>Number.parseInt()</p><p>在es5中，parseInt是window上的</p></li><li><p>Number.parseFloat()</p><p>同上</p></li><li><p>Number.isInteger()  判断一个数值是否为整数</p><blockquote><p>JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。</p><p><strong>存在误判的情况</strong> 例如精度丢失、小于Number.MIN_VALUE</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-number">25</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-number">25.1</span>) <span class="hljs-comment">// false</span><br><br><span class="hljs-built_in">Number</span>.isInteger() <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-literal">null</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-string">&#x27;15&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-literal">true</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>Number.MAX_SAFE_INTEGER 最大安全数：2^53 = 9007199254740991 </p></li><li><p>Number.MIN_SAFE_INTEGER -9007199254740991 </p></li><li><p>Number.isSafeInteger()  在-2^53^到2^53^之间（不含两个端点）</p></li><li><p>Number.EPSILON   表示 1 与大于 1 的最小浮点数之间的差 [可接受的最小误差范围]</p><blockquote><p>最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差</p></blockquote></li></ul><h3 id="3-Math拓展"><a href="#3-Math拓展" class="headerlink" title="3. Math拓展"></a>3. Math拓展</h3><blockquote><p>ES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用</p></blockquote><ul><li><p>Math.trunc()   去除一个数的小数部分，返回整数部分</p><p>true代表1，false代表0，其余非数值的返回NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-number">5.5</span>))<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(-<span class="hljs-number">5.5</span>))<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-literal">true</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-literal">false</span>)) <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-literal">NaN</span>)) <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-literal">undefined</span>)) <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc()) <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure></li><li><p>Math.sign()  判断正数、负数、零</p><p>true和false会转换为数值后进行判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.sign(<span class="hljs-number">5</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.sign(-<span class="hljs-number">5</span>)) <span class="hljs-comment">// -1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.sign(<span class="hljs-number">0</span>)) <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.sign(<span class="hljs-literal">NaN</span>)) <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.sign(<span class="hljs-literal">true</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.sign(<span class="hljs-literal">false</span>)) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure></li><li><p>Math.cbrt()  计算一个数的立方根，非数的返回NaN</p></li><li><p>Math.clz32()    将参数转为 32 位无符号整数的形式，返回 32 位值里面有多少个前导 0  <strong>只考虑整数部分</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Math</span>.clz32(<span class="hljs-number">1000</span>) <span class="hljs-comment">// 22 1000 的二进制形式是0b1111101000，一共有10位，所以32位之中有22个前导0</span><br><span class="hljs-built_in">Math</span>.clz32(<span class="hljs-number">0b01000000000000000000000000000000</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">Math</span>.clz32(<span class="hljs-number">0b00100000000000000000000000000000</span>) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><blockquote><p>左移运算符（<code>&lt;&lt;</code>）与<code>Math.clz32</code>方法直接相关</p></blockquote></li><li><p>Math.imul()  效果和<code>(a*b)|0</code>相同，可以处理溢出的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Math</span>.imul(-<span class="hljs-number">2</span>, -<span class="hljs-number">2</span>) <span class="hljs-comment">// 4</span><br>(<span class="hljs-number">0x7fffffff</span> * <span class="hljs-number">0x7fffffff</span>)|<span class="hljs-number">0</span> <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">Math</span>.imul(<span class="hljs-number">0x7fffffff</span>, <span class="hljs-number">0x7fffffff</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>Math.fround() 将64位双精度浮点数转为32位单精度浮点数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 丢失精度</span><br><span class="hljs-built_in">Math</span>.fround(<span class="hljs-number">0.7</span>)   <span class="hljs-comment">// 0.699999988079071</span><br><br><span class="hljs-comment">//对于 NaN 和 Infinity，此方法返回原值</span><br><span class="hljs-built_in">Math</span>.fround(<span class="hljs-literal">NaN</span>)      <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">Math</span>.fround(<span class="hljs-literal">Infinity</span>) <span class="hljs-comment">// Infinity</span><br><br><span class="hljs-comment">//先将其转为数值，再返回单精度浮点数</span><br><span class="hljs-built_in">Math</span>.fround(<span class="hljs-string">&#x27;5&#x27;</span>)      <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">Math</span>.fround(<span class="hljs-literal">true</span>)     <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">Math</span>.fround(<span class="hljs-literal">null</span>)     <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">Math</span>.fround([])       <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">Math</span>.fround(&#123;&#125;)       <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>Math.hypot() 返回所有参数的平方和的平方根</p><p>先将非数值的转换为数值，无法转换的返回NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Math</span>.hypot(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);        <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">Math</span>.hypot(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);     <span class="hljs-comment">// 7.0710678118654755</span><br><span class="hljs-built_in">Math</span>.hypot();            <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">Math</span>.hypot(<span class="hljs-literal">NaN</span>);         <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">Math</span>.hypot(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">Math</span>.hypot(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;5&#x27;</span>);   <span class="hljs-comment">// 7.0710678118654755</span><br><span class="hljs-built_in">Math</span>.hypot(-<span class="hljs-number">3</span>);          <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure></li><li><p>Math.expm1()  <code>Math.expm1(x)</code> =&gt; ex - 1 == <code>Math.exp(x) - 1</code>。</p></li><li><p>Math.log1p()  <code>Math.log1p(x)</code> == <code>Math.log(1 + x)</code></p></li><li><p>Math.log10()    返回以 10 为底的<code>x</code>的对数</p></li><li><p>Math.log2()  返回以 2 为底的<code>x</code>的对数</p></li></ul><blockquote><p>以上三个方法，如果<code>x</code>小于 0，则返回 NaN</p></blockquote><ul><li>双曲函数方法：<ul><li><code>Math.sinh(x)</code> 返回<code>x</code>的双曲正弦</li><li><code>Math.cosh(x)</code> 返回<code>x</code>的双曲余弦</li><li><code>Math.tanh(x)</code> 返回<code>x</code>的双曲正切</li><li><code>Math.asinh(x)</code> 返回<code>x</code>的反双曲正弦</li><li><code>Math.acosh(x)</code> 返回<code>x</code>的反双曲余弦</li><li><code>Math.atanh(x)</code> 返回<code>x</code>的反双曲正切</li></ul></li></ul><h2 id="20-代理proxy"><a href="#20-代理proxy" class="headerlink" title="20. 代理proxy"></a>20. 代理proxy</h2><p>自定义一些常用行为如查找、赋值、枚举、函数调用等</p><h3 id="1-基本语法-2"><a href="#1-基本语法-2" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler)<br></code></pre></td></tr></table></figure><p> target ：用来代理的“对象”，被代理之后不能直接被访问</p><p> handler ：实现代理的过程</p><h3 id="2-拦截操作场景"><a href="#2-拦截操作场景" class="headerlink" title="2. 拦截操作场景"></a>2. 拦截操作场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiaoming&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br><br><span class="hljs-keyword">let</span> handler = &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">obj, key</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.has(obj, key) ? obj[key] : <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(o, handler)<br><br><span class="hljs-built_in">console</span>.log(p.from)<br></code></pre></td></tr></table></figure><p><strong>场景 1</strong></p><p>从服务端获取的数据希望是只读，不允许在任何一个环节被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// response.data 是 JSON 格式的数据，来自服务端的响应</span><br><span class="hljs-comment">// 在 ES5 中只能通过遍历把所有的属性设置为只读</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key] <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.entries(response.data)) &#123;<br>    <span class="hljs-built_in">Object</span>.defineProperty(response.data, key, &#123;<br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 Proxy ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(response.data, &#123;<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">obj, key, value</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>场景 2</strong></p><p>校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Validator.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (obj, key, value) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Reflect</span>.has(key) &amp;&amp; value &gt; <span class="hljs-number">20</span>) &#123;<br>        obj[key] = value<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> Validator <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Validator&#x27;</span><br><span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(response.data, &#123;<br>    <span class="hljs-attr">set</span>: Validator<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>场景 3</strong></p><p>对读写进行监控：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> validator = &#123;<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, key, value</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;age&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">&#x27;number&#x27;</span> || <span class="hljs-built_in">Number</span>.isNaN(value)) &#123;  <span class="hljs-comment">// 非数值、空值</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Age must be a number&#x27;</span>)<br>            &#125;<br>            <span class="hljs-keyword">if</span> (value &lt;= <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 输入的值小于等于0</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Age must be a positive number&#x27;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span><br>&#125;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(person, validator)<br><br><br><span class="hljs-comment">// 添加监控</span><br><span class="hljs-built_in">window</span>.addEventListener(<br>    <span class="hljs-string">&#x27;error&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(e.message) <span class="hljs-comment">// Uncaught TypeError: Age must be a number</span><br>    &#125;,<br>    <span class="hljs-literal">true</span><br>)<br></code></pre></td></tr></table></figure><p><strong>场景 4</strong></p><p>实例一个对象，每个对象都有一个自己的 id 而且只读。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(&#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-built_in">Math</span>.random().toString(<span class="hljs-number">36</span>).slice(-<span class="hljs-number">8</span>)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">id</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.proxy.id<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-常用拦截操作"><a href="#3-常用拦截操作" class="headerlink" title="3. 常用拦截操作"></a>3. 常用拦截操作</h3><p>get</p><p>拦截对象属性的读取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(arr, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, prop</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> prop <span class="hljs-keyword">in</span> target ? target[prop] : <span class="hljs-string">&#x27;error&#x27;</span><br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">1</span>])  <span class="hljs-comment">//8</span><br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">10</span>])  <span class="hljs-comment">//error</span><br></code></pre></td></tr></table></figure><p>set</p><p>拦截对象属性的设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = []<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(arr, &#123;<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, prop, val</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>            target[prop] = val<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">//需要返回一个布尔值</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>&#125;)<br>arr.push(<span class="hljs-number">5</span>)<br>arr.push(<span class="hljs-number">6</span>)<br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>], arr.length)<br></code></pre></td></tr></table></figure><p>has</p><p>拦截propKey in proxy的操作，返回一个布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> range = &#123;<br>    <span class="hljs-attr">start</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">end</span>: <span class="hljs-number">5</span><br>&#125;<br><br>range = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(range, &#123;<br>    <span class="hljs-function"><span class="hljs-title">has</span>(<span class="hljs-params">target, prop</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> prop &gt;= target.start &amp;&amp; prop &lt;= target.end<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> range)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span> <span class="hljs-keyword">in</span> range)<br></code></pre></td></tr></table></figure><p>ownKeys</p><p>拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组</p><p>该方法返回目标对象所有自身的属性的属性名</p><p>而Object.keys()的返回结果<em>仅包括</em>目标对象自身的可遍历属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;imooc&#x27;</span>,<br>    [<span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;es&#x27;</span>)]: <span class="hljs-string">&#x27;es6&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj))  <span class="hljs-comment">//[&quot;name&quot;]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertySymbols(obj))  <span class="hljs-comment">//[Symbol(es)]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(obj))<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-built_in">console</span>.log(key)   <span class="hljs-comment">//name</span><br>&#125;<br><br><span class="hljs-keyword">let</span> userinfo = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;xiecheng&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">34</span>,<br>    <span class="hljs-attr">_password</span>: <span class="hljs-string">&#x27;***&#x27;</span><br>&#125;<br>userinfo = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(userinfo, &#123;<br>    <span class="hljs-function"><span class="hljs-title">ownKeys</span>(<span class="hljs-params">target</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(target).filter(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> !key.startsWith(<span class="hljs-string">&#x27;_&#x27;</span>)) <span class="hljs-comment">// 过滤</span><br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(userinfo))<br></code></pre></td></tr></table></figure><p>deleteProperty</p><p>拦截delete proxy[propKey]的操作，返回一个布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiecheng&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">34</span>,<br>    <span class="hljs-attr">_password</span>: <span class="hljs-string">&#x27;***&#x27;</span><br>&#125;<br>user = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(user, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, prop</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (prop.startsWith(<span class="hljs-string">&#x27;_&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;不可访问&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> target[prop]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, prop, val</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (prop.startsWith(<span class="hljs-string">&#x27;_&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;不可访问&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[prop] = val<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">//返回一个布尔值</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">deleteProperty</span>(<span class="hljs-params">target, prop</span>)</span> &#123; <span class="hljs-comment">// 拦截删除</span><br>        <span class="hljs-keyword">if</span> (prop.startsWith(<span class="hljs-string">&#x27;_&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;不可删除&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">delete</span> target[prop]<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">ownKeys</span>(<span class="hljs-params">target</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(target).filter(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> !key.startsWith(<span class="hljs-string">&#x27;_&#x27;</span>))<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(user.age)<br><span class="hljs-built_in">console</span>.log(user._password)<br>user.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">console</span>.log(user.age)<br><span class="hljs-keyword">try</span> &#123;<br>    user._password = <span class="hljs-string">&#x27;xxx&#x27;</span><br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-built_in">console</span>.log(e.message)<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// delete user.age</span><br>    <span class="hljs-keyword">delete</span> user._password<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-built_in">console</span>.log(e.message)<br>&#125;<br><span class="hljs-built_in">console</span>.log(user.age)<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) &#123;<br>    <span class="hljs-built_in">console</span>.log(key)<br>&#125;<br></code></pre></td></tr></table></figure><p>apply</p><p>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sum = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><br>    args.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        num += item<br>    &#125;)<br>    <span class="hljs-keyword">return</span> num<br>&#125;<br><br>sum = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(sum, &#123;<br>    <span class="hljs-function"><span class="hljs-title">apply</span>(<span class="hljs-params">target, ctx, args</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> target(...args) * <span class="hljs-number">2</span><br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">console</span>.log(sum.call(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">console</span>.log(sum.apply(<span class="hljs-literal">null</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))  <span class="hljs-comment">//需要是数组</span><br></code></pre></td></tr></table></figure><p>construct</p><p>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> User = <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br>User = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(User, &#123;<br>    <span class="hljs-function"><span class="hljs-title">construct</span>(<span class="hljs-params">target, args, newTarget</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;construct&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> target(...args)<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&#x27;imooc&#x27;</span>))<br></code></pre></td></tr></table></figure><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210421235558470.png" alt="image-20210421235558470" style="zoom: 40%;" /><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210421235705899.png" alt="image-20210421235705899" style="zoom: 40%;" /><h2 id="21-反射Reflect"><a href="#21-反射Reflect" class="headerlink" title="21. 反射Reflect"></a>21. 反射Reflect</h2><p>和Proxy一起使用</p><h3 id="1-设计目的"><a href="#1-设计目的" class="headerlink" title="1. 设计目的"></a>1. 设计目的</h3><ul><li>将Object属于语言内部的方法放到Reflect上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;&#125;<br><span class="hljs-keyword">let</span> newVal = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">Reflect</span>.defineProperty(obj, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> newVal<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set&#x27;</span>)<br>        <span class="hljs-comment">// this.name = val</span><br>        newVal = val<br>    &#125;<br>&#125;)<br>obj.name = <span class="hljs-string">&#x27;es&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj.name)<br></code></pre></td></tr></table></figure><ul><li>修改某些<em>Object方法</em>的返回结果，让其变得更合理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">Object</span>.defineProperty(target, property, attributes)<br>    <span class="hljs-comment">// success</span><br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-comment">// failure</span><br>&#125;<br><br><span class="hljs-comment">// 新写法</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Reflect</span>.defineProperty(target, property, attributes)) &#123;<br>    <span class="hljs-comment">// success</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// failure</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>让Object操作变成函数行为</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><br><span class="hljs-string">&#x27;assign&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 新写法</span><br><span class="hljs-built_in">Reflect</span>.has(<span class="hljs-built_in">Object</span>, <span class="hljs-string">&#x27;assign&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li><p>Reflect对象的方法与Proxy对象的方法一一对应</p><p>（只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Proxy</span>(target, &#123;<br>    <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, name, value, receiver</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> success = <span class="hljs-built_in">Reflect</span>.set(target, name, value, receiver)<br>        <span class="hljs-keyword">if</span> (success) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;property &#x27;</span> + name + <span class="hljs-string">&#x27; on &#x27;</span> + target + <span class="hljs-string">&#x27; set to &#x27;</span> + value)<br>        &#125;<br>        <span class="hljs-keyword">return</span> success<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>Reflect 是一个内置的对象，提供拦截 JavaScript 操作的方法，这些方法与处理器对象的方法相同</p><p>Reflect不是一个函数对象，因此它是不可构造的。</p><p>Reflect没有构造函数(不能与new使用，或将Reflect对象作为函数调用</p><p>Reflect的所有属性和方法都是静态的</p><h3 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2. 常用方法"></a>2. 常用方法</h3><ul><li><h4 id="Reflect-apply"><a href="#Reflect-apply" class="headerlink" title="Reflect.apply()"></a>Reflect.apply()</h4></li></ul><blockquote><p>Reflect.apply(target, thisArgument, argumentsList)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">目标函数</td><td align="center">Y</td></tr><tr><td align="center">thisArgument</td><td align="center">target函数调用时绑定的this对象</td><td align="center">N</td></tr><tr><td align="center">argumentsList</td><td align="center">target函数调用时传入的实参列表，该参数应该是一个类数组的对象</td><td align="center">N</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Reflect</span>.apply(<span class="hljs-built_in">Math</span>.floor, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">1.75</span>])    <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">Reflect</span>.apply(<span class="hljs-built_in">String</span>.fromCharCode, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>])  <span class="hljs-comment">// &quot;hello&quot;</span><br><br><span class="hljs-built_in">Reflect</span>.apply(<span class="hljs-built_in">RegExp</span>.prototype.exec, <span class="hljs-regexp">/ab/</span>, [<span class="hljs-string">&#x27;confabulation&#x27;</span>]).index   <span class="hljs-comment">// 4</span><br><br><span class="hljs-built_in">Reflect</span>.apply(<span class="hljs-string">&#x27;&#x27;</span>.charAt, <span class="hljs-string">&#x27;ponies&#x27;</span>, [<span class="hljs-number">3</span>])  <span class="hljs-comment">// &quot;i&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>ES5 对比</strong></p><p>与ES5中Function.prototype.apply()方法类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.apply.call(<span class="hljs-built_in">Math</span>.floor, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">1.75</span>])<br></code></pre></td></tr></table></figure></blockquote><ul><li><h4 id="Reflect-construct"><a href="#Reflect-construct" class="headerlink" title="Reflect.construct()"></a>Reflect.construct()</h4><p>允许使用可变的参数来调用构造函数</p></li></ul><blockquote><p>Reflect.construct(target, argumentsList[, newTarget])</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">被运行的目标函数</td><td align="center">Y</td></tr><tr><td align="center">argumentsList</td><td align="center">调用构造函数的数组或者伪数组</td><td align="center">Y</td></tr><tr><td align="center">newTarget</td><td align="center">该参数为构造函数， 参考 new.target 操作符，如果没有newTarget参数， 默认和target一样</td><td align="center">N</td></tr></tbody></table><blockquote><p>如果target或者newTarget不是构造函数，抛出TypeError</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">#### <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">someConstructor</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Reflect</span>.construct(<span class="hljs-built_in">Array</span>, [], someConstructor)<br><br><span class="hljs-built_in">Reflect</span>.getPrototypeOf(result) <span class="hljs-comment">// 输出：someConstructor.prototype</span><br><span class="hljs-built_in">Array</span>.isArray(result) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty()"></a>Reflect.defineProperty()</h4><p>静态方法 Reflect.defineProperty() 基本等同于 Object.defineProperty() 方法，唯一不同是返回 Boolean 值。</p></li></ul><blockquote><p>Reflect.defineProperty(target, propertyKey, attributes)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">目标对象</td><td align="center">Y</td></tr><tr><td align="center">propertyKey</td><td align="center">要定义或修改的属性的名称</td><td align="center">Y</td></tr><tr><td align="center">attributes</td><td align="center">要定义或修改的属性的描述</td><td align="center">Y</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> student = &#123;&#125;<br><span class="hljs-built_in">Reflect</span>.defineProperty(student, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Mike&#x27;</span><br>&#125;) <span class="hljs-comment">// true</span><br>student.name <span class="hljs-comment">// &quot;Mike&quot;</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="Reflect-deleteProperty"><a href="#Reflect-deleteProperty" class="headerlink" title="Reflect.deleteProperty()"></a>Reflect.deleteProperty()</h4></li></ul><p>Reflect.deleteProperty 允许你删除<em>一个</em>对象上的属性</p><p>返回一个 Boolean 值表示该属性是否被成功删除</p><blockquote><p>Reflect.deleteProperty(target, propertyKey)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">删除属性的目标对象</td><td align="center">Y</td></tr><tr><td align="center">propertyKey</td><td align="center">将被删除的属性的名称</td><td align="center">Y</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">#### <span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-built_in">Reflect</span>.deleteProperty(obj, <span class="hljs-string">&quot;x&quot;</span>) <span class="hljs-comment">// true</span><br>obj <span class="hljs-comment">// &#123; y: 2 &#125;</span><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">Reflect</span>.deleteProperty(arr, <span class="hljs-string">&quot;3&quot;</span>) <span class="hljs-comment">// true</span><br>arr <span class="hljs-comment">// [1, 2, 3, , 5]</span><br><br><span class="hljs-comment">// 如果属性不存在，返回 true</span><br><span class="hljs-built_in">Reflect</span>.deleteProperty(&#123;&#125;, <span class="hljs-string">&quot;foo&quot;</span>) <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 如果属性不可配置，返回 false</span><br><span class="hljs-built_in">Reflect</span>.deleteProperty(<span class="hljs-built_in">Object</span>.freeze(&#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span><br>&#125;), <span class="hljs-string">&quot;foo&quot;</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="Reflect-get"><a href="#Reflect-get" class="headerlink" title="Reflect.get()"></a>Reflect.get()</h4><p>Reflect.get() 方法的工作方式，就像从 object (target[propertyKey]) 中获取属性，但它是作为一个函数执行的。</p></li></ul><blockquote><p>Reflect.get(target, propertyKey[, receiver])</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">需要取值的目标对象</td><td align="center">Y</td></tr><tr><td align="center">propertyKey</td><td align="center">需要获取的值的键值</td><td align="center">Y</td></tr><tr><td align="center">receiver</td><td align="center">如果遇到 getter，此值将提供给目标调用</td><td align="center">N</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Object</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-built_in">Reflect</span>.get(obj, <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// Array</span><br><span class="hljs-built_in">Reflect</span>.get([<span class="hljs-string">&#x27;zero&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>], <span class="hljs-number">1</span>) <span class="hljs-comment">// &quot;one&quot;</span><br><br><span class="hljs-comment">// Proxy with a get handler</span><br><span class="hljs-keyword">var</span> x = &#123;<br>    <span class="hljs-attr">p</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(x, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">t, k, r</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> k + <span class="hljs-string">&#x27;bar&#x27;</span><br>    &#125;<br>&#125;)<br><span class="hljs-built_in">Reflect</span>.get(obj, <span class="hljs-string">&#x27;foo&#x27;</span>) <span class="hljs-comment">// &quot;foobar&quot;</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="Reflect-getOwnPropertyDescriptor"><a href="#Reflect-getOwnPropertyDescriptor" class="headerlink" title="Reflect.getOwnPropertyDescriptor()"></a>Reflect.getOwnPropertyDescriptor()</h4><p>与 Object.getOwnPropertyDescriptor() 方法相似</p><p>如果在对象中存在，则返回给定的属性的属性描述符，否则返回 undefined</p></li></ul><blockquote><p>Reflect.getOwnPropertyDescriptor(target, propertyKey)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">需要寻找属性的目标对象</td><td align="center">Y</td></tr><tr><td align="center">propertyKey</td><td align="center">获取自己的属性描述符的属性的名称</td><td align="center">N</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Reflect</span>.getOwnPropertyDescriptor(&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;, <span class="hljs-string">&#x27;x&#x27;</span>)<br><span class="hljs-comment">// &#123;value: &quot;hello&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><br><span class="hljs-built_in">Reflect</span>.getOwnPropertyDescriptor(&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;, <span class="hljs-string">&#x27;y&#x27;</span>)<br><span class="hljs-comment">// undefined</span><br><br><span class="hljs-built_in">Reflect</span>.getOwnPropertyDescriptor([], <span class="hljs-string">&#x27;length&#x27;</span>)<br><span class="hljs-comment">// &#123;value: 0, writable: true, enumerable: false, configurable: false&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>对比</strong></p><p>如果该方法的第一个参数不是一个对象（一个原始值），那么将造成 TypeError 错误</p><p>而对于 Object.getOwnPropertyDescriptor，非对象的第一个参数将被强制转换为一个对象处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Reflect</span>.getOwnPropertyDescriptor(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment">// TypeError: &quot;foo&quot; is not non-null object</span><br><br><span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment">// &#123; value: &quot;f&quot;, writable: false, enumerable: true, configurable: false &#125;</span><br></code></pre></td></tr></table></figure></blockquote><ul><li><h4 id="Reflect-getPrototypeOf"><a href="#Reflect-getPrototypeOf" class="headerlink" title="Reflect.getPrototypeOf()"></a>Reflect.getPrototypeOf()</h4><p>与 Object.getPrototypeOf() 方法是一样</p><p>返回指定对象的原型</p></li></ul><blockquote><p>Reflect.getPrototypeOf(target)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">获取原型的目标对象</td><td align="center">Y</td></tr></tbody></table><ul><li><h4 id="Reflect-has"><a href="#Reflect-has" class="headerlink" title="Reflect.has()"></a>Reflect.has()</h4><p>检查一个对象是否拥有某个属性， 相当于in 操作符</p></li></ul><blockquote><p>Reflect.has(target, propertyKey)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">获取原型的目标对象</td><td align="center">Y</td></tr><tr><td align="center">propertyKey</td><td align="center">属性名，需要检查目标对象是否存在此属性</td><td align="center">Y</td></tr></tbody></table><ul><li><h4 id="Reflect-isExtensible"><a href="#Reflect-isExtensible" class="headerlink" title="Reflect.isExtensible()"></a>Reflect.isExtensible()</h4><p>Reflect.isExtensible 判断一个对象是否可扩展 （即是否能够添加新的属性）</p><p>与 Object.isExtensible() 方法一样</p></li></ul><blockquote><p>Reflect.isExtensible(target)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">获取原型的目标对象</td><td align="center">Y</td></tr></tbody></table><ul><li><h4 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h4><p>返回一个由目标对象自身的属性键组成的数组</p><p>返回值等同于 Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</p></li></ul><blockquote><p>Reflect.ownKeys(target)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">获取原型的目标对象</td><td align="center">Y</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Reflect</span>.ownKeys(&#123;<br>    <span class="hljs-attr">z</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">1</span><br>&#125;) <span class="hljs-comment">// [ &quot;z&quot;, &quot;y&quot;, &quot;x&quot; ]</span><br><span class="hljs-built_in">Reflect</span>.ownKeys([]) <span class="hljs-comment">// [&quot;length&quot;]</span><br><br><span class="hljs-keyword">var</span> sym = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;comet&quot;</span>)<br><span class="hljs-keyword">var</span> sym2 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;meteor&quot;</span>)<br><span class="hljs-keyword">var</span> obj = &#123;<br>    [sym]: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;str&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;773&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">0</span>,<br>    [sym2]: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;-1&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;8&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;second str&quot;</span>: <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-built_in">Reflect</span>.ownKeys(obj)<br><span class="hljs-comment">// [ &quot;0&quot;, &quot;8&quot;, &quot;773&quot;, &quot;str&quot;, &quot;-1&quot;, &quot;second str&quot;, Symbol(comet), Symbol(meteor) ]</span><br><span class="hljs-comment">// Indexes in numeric order,</span><br><span class="hljs-comment">// strings in insertion order,</span><br><span class="hljs-comment">// symbols in insertion order</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="Reflect-preventExtensions"><a href="#Reflect-preventExtensions" class="headerlink" title="Reflect.preventExtensions()"></a>Reflect.preventExtensions()</h4><p> 阻止新属性添加到对象 (eg. 防止将来对对象的扩展被添加到对象中)</p><p>与 Object.preventExtensions() 方法一致</p></li></ul><blockquote><p>Reflect.preventExtensions(target)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">获取原型的目标对象</td><td align="center">Y</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">#### <span class="hljs-comment">// Objects are extensible by default.</span><br><span class="hljs-keyword">var</span> empty = &#123;&#125;<br><span class="hljs-built_in">Reflect</span>.isExtensible(empty) <span class="hljs-comment">// === true</span><br><br><span class="hljs-comment">// ...but that can be changed.</span><br><span class="hljs-built_in">Reflect</span>.preventExtensions(empty)<br><span class="hljs-built_in">Reflect</span>.isExtensible(empty) <span class="hljs-comment">// === false</span><br><span class="hljs-built_in">Reflect</span>.preventExtensions(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// TypeError: 1 is not an object</span><br><br><span class="hljs-built_in">Object</span>.preventExtensions(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="Reflect-set"><a href="#Reflect-set" class="headerlink" title="Reflect.set()"></a>Reflect.set()</h4><p>允许在对象上设置属性</p><p>给属性赋值,并像 property accessor 语法一样，但以函数的方式</p></li></ul><blockquote><p>Reflect.set(target, propertyKey, value[, receiver])</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">获取原型的目标对象</td><td align="center">Y</td></tr><tr><td align="center">propertyKey</td><td align="center">设置的属性的名称</td><td align="center">Y</td></tr><tr><td align="center">value</td><td align="center">设置的值</td><td align="center">Y</td></tr><tr><td align="center">receiver</td><td align="center">如果遇到 setter，this 将提供给目标调用</td><td align="center">N</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Object</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;<br><span class="hljs-built_in">Reflect</span>.set(obj, <span class="hljs-string">&quot;prop&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>) <span class="hljs-comment">// true</span><br>obj.prop <span class="hljs-comment">// &quot;value&quot;</span><br><br><span class="hljs-comment">// Array</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;duck&quot;</span>, <span class="hljs-string">&quot;duck&quot;</span>, <span class="hljs-string">&quot;duck&quot;</span>]<br><span class="hljs-built_in">Reflect</span>.set(arr, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;goose&quot;</span>) <span class="hljs-comment">// true</span><br>arr[<span class="hljs-number">2</span>] <span class="hljs-comment">// &quot;goose&quot;</span><br><br><span class="hljs-comment">// It can truncate an array.</span><br><span class="hljs-built_in">Reflect</span>.set(arr, <span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// true</span><br>arr <span class="hljs-comment">// [&quot;duck&quot;]</span><br><br><span class="hljs-comment">// With just one argument, propertyKey and value are &quot;undefined&quot;.</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;<br><span class="hljs-built_in">Reflect</span>.set(obj) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Reflect</span>.getOwnPropertyDescriptor(obj, <span class="hljs-string">&quot;undefined&quot;</span>)<br><span class="hljs-comment">// &#123; value: undefined, writable: true, enumerable: true, configurable: true &#125;</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="Reflect-setPrototypeOf"><a href="#Reflect-setPrototypeOf" class="headerlink" title="Reflect.setPrototypeOf()"></a>Reflect.setPrototypeOf()</h4></li></ul><p>​    改变指定对象的原型</p><blockquote><p>Reflect.setPrototypeOf(target, prototype)</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">获取原型的目标对象</td><td align="center">Y</td></tr><tr><td align="center">prototype</td><td align="center">对象的新原型 （一个对象或 null）</td><td align="center">Y</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Reflect</span>.setPrototypeOf(&#123;&#125;, <span class="hljs-built_in">Object</span>.prototype) <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// It can change an object&#x27;s [[Prototype]] to null.</span><br><span class="hljs-built_in">Reflect</span>.setPrototypeOf(&#123;&#125;, <span class="hljs-literal">null</span>) <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// Returns false if target is not extensible.</span><br><span class="hljs-built_in">Reflect</span>.setPrototypeOf(<span class="hljs-built_in">Object</span>.freeze(&#123;&#125;), <span class="hljs-literal">null</span>) <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// Returns false if it cause a prototype chain cycle.</span><br><span class="hljs-keyword">var</span> target = &#123;&#125;<br><span class="hljs-keyword">var</span> proto = <span class="hljs-built_in">Object</span>.create(target)<br><span class="hljs-built_in">Reflect</span>.setPrototypeOf(target, proto) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="22-异步操作"><a href="#22-异步操作" class="headerlink" title="22. 异步操作"></a>22. 异步操作</h2><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210430202518.png" alt="image-20210430202144003" style="zoom: 33%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);  <span class="hljs-comment">//（1）</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">//（2）</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);  <span class="hljs-comment">//（3)</span><br><span class="hljs-comment">//1  3  2</span><br></code></pre></td></tr></table></figure><p>(1)(3)属于主线程任务，为同步操作，（2）为异步任务，先进入Event Table中，等待0秒后进入Event Queue中等待主线程的任务全部完成后，再读取任务队列中结果进入主线程执行。</p><p>所以，如果有一个异步任务经过2秒后进入到Event Queue中，但是主线程的任务需要5秒才能执行完毕，此时的异步任务会在Event Queue中等待主线程任务完成，即等待3秒后进入主线程。</p><ul><li><p>Ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">url,callback</span>) </span>&#123;<br>    <span class="hljs-comment">// 1. 创建XMLHttpRequest对象</span><br>    <span class="hljs-keyword">var</span> xmlhettp<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>        xmlhttp = <span class="hljs-keyword">new</span> XMLHttpRequest()<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//兼容早期浏览器</span><br>        xmlhttp = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// 2. 发送请求</span><br>    xmlhttp.open(<span class="hljs-string">&#x27;GET&#x27;</span>,url,<span class="hljs-literal">true</span>)<br>    xmlhttp.send()<br>    <span class="hljs-comment">// 3. 服务端相应</span><br>    xmlhttp.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(xmlhttp.readState === <span class="hljs-number">4</span> &amp;&amp; xmlhttp.staus === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(xmlhttp.responseText])<br>            callback(obj)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;...&#x27;</span>;<br>ajax(url,<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="23-Promise"><a href="#23-Promise" class="headerlink" title="23. Promise"></a>23. Promise</h2><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//resolve成功，rejecth失败</span><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,rejecth</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>        <span class="hljs-comment">// 一般情况下，使用if else语句进行判断是否成功</span><br>        <span class="hljs-comment">//if()&#123;  </span><br>        <span class="hljs-comment">//   resolve()</span><br>        <span class="hljs-comment">//   &#125;else&#123;</span><br>        <span class="hljs-comment">//       reject()</span><br>        <span class="hljs-comment">//   &#125;</span><br>        &#125;,<span class="hljs-number">1000</span>)<br>&#125;).then(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">//第一个方法必须要写，第二个方法可以省略</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>&#125;,<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">//可以在resolve写入参数，再通过传参来完成</span><br><span class="hljs-comment">//resolve(&#x27;success&#x27;)</span><br><span class="hljs-comment">//reject(&#x27;fail&#x27;)</span><br><span class="hljs-comment">//.then((res) =&gt; &#123;</span><br><span class="hljs-comment">//    console.log(res)  //success</span><br><span class="hljs-comment">//&#125;),(err) =&gt; &#123;</span><br><span class="hljs-comment">//    console.log(err)  //fail</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-状态"><a href="#2-状态" class="headerlink" title="2. 状态"></a>2. 状态</h3><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210430210917.png" alt="image-20210430210851701" style="zoom:33%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-number">1</span>)<br>&#125;)<br><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        resolve(<span class="hljs-number">2</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br><span class="hljs-keyword">let</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        reject(<span class="hljs-number">3</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(p1) <span class="hljs-comment">// resolved</span><br><span class="hljs-built_in">console</span>.log(p2) <span class="hljs-comment">// pending ==&gt; 1秒后变成resolved</span><br><span class="hljs-built_in">console</span>.log(p3) <span class="hljs-comment">// pending ==&gt; 1秒后变成rejected</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(p2)<br>&#125;, <span class="hljs-number">2000</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(p3)<br>&#125;, <span class="hljs-number">2000</span>)<br><br>p1.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)  <span class="hljs-comment">//1</span><br>&#125;)<br>p2.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)  <span class="hljs-comment">//2</span><br>&#125;)<br>p3.catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;  <span class="hljs-comment">//使用catch捕获错误</span><br>    <span class="hljs-built_in">console</span>.log(err)  <span class="hljs-comment">//3</span><br>&#125;)<br></code></pre></td></tr></table></figure><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210430211718.png" alt="image-20210430211605871" style="zoom: 67%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-number">2</span>)<br>    reject(<span class="hljs-number">1</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)<br>&#125;).catcj(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br><span class="hljs-comment">//只能输出2，Promise状态不能被改变</span><br></code></pre></td></tr></table></figure><h3 id="3-使用Promise发送ajax请求"><a href="#3-使用Promise发送ajax请求" class="headerlink" title="3. 使用Promise发送ajax请求"></a>3. 使用Promise发送ajax请求</h3><p>单纯使用ajax需要嵌套非常多层</p><p>使用Promise有大量重复代码，抽离出来写成一个函数，使得代码可读性更强，也有利于后期维护</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPromise</span>(<span class="hljs-params">url</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        ajax(url, <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        resolve(res)<br>    &#125;)<br>    &#125;)<br>&#125;<br>getPromise(...)<br>           .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>           <span class="hljs-built_in">console</span>.log(res)<br>   <span class="hljs-keyword">return</span> getPromise(...)<br>           &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(res)<br>               <span class="hljs-keyword">return</span> getPromise(...)<br>           &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(res)<br>           &#125;)<br></code></pre></td></tr></table></figure><p>统一捕获err</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPromise</span>(<span class="hljs-params">url</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        ajax(url, <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        resolve(res)<br>    &#125;)<br>    &#125;)<br>&#125;<br>getPromise(...)<br>           .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>           <span class="hljs-built_in">console</span>.log(res)<br>   <span class="hljs-keyword">return</span> getPromise(...)<br>           &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(res)<br>               <span class="hljs-keyword">return</span> getPromise(...)<br>           &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(res)<br>           &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                   <span class="hljs-built_in">console</span>.log(err)<br>           &#125;)  <span class="hljs-comment">//上述任何一个出现错误都会调用</span><br></code></pre></td></tr></table></figure><h3 id="4-Promise的静态方法"><a href="#4-Promise的静态方法" class="headerlink" title="4. Promise的静态方法"></a>4. Promise的静态方法</h3><p>Promise.resolve(‘success’)</p><p>Promise.reject(‘fail’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">flag</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(flag) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">//异步操作</span><br>            resolve(<span class="hljs-string">&#x27;success&#x27;</span>)<br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;fail&#x27;</span>)  <span class="hljs-comment">//如果写成return &#x27;fail&#x27;,当条件为false的时候，会报错</span><br>    &#125;<br>&#125;<br><br>foo(<span class="hljs-literal">false</span>).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)  <span class="hljs-comment">//fail</span><br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure><p>Promise.all([…])  所有对象都完成之后才会进入res，只要有一个是失败的，都会进入err中</p><blockquote><p>可应用于上传多张图片中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.all([p1,p2,p3]).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> imgArr = [<span class="hljs-string">&#x27;1.jpg&#x27;</span>, <span class="hljs-string">&#x27;2.jpg&#x27;</span>, <span class="hljs-string">&#x27;3.jpg&#x27;</span>]<br><span class="hljs-keyword">let</span> promiseArr = []<br>imgArr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    promiseArr.push(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 图片上传的操作</span><br>        resolve()<br>    &#125;))<br>&#125;)<br><span class="hljs-built_in">Promise</span>.all(promiseArr).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 插入数据库的操作</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;图片全部上传完成&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>Promise.race([…])  只要有一个成功，整个就会进入res中</p><blockquote><p>可应用于请求图片超时</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.race([p1,p2,p3]).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getImg</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> Image()<br>        img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            resolve(img) <span class="hljs-comment">//返回图片</span><br>        &#125;<br>        <span class="hljs-comment">// img.src = &#x27;http://www.xxx.com/xx.jpg&#x27;</span><br>        img.src = <span class="hljs-string">&#x27;https://www.imooc.com/static/img/index/logo.png&#x27;</span><br>    &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeout</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            reject(<span class="hljs-string">&#x27;图片请求超时&#x27;</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>&#125;<br><br><span class="hljs-built_in">Promise</span>.race([getImg(), timeout()]).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res)<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="24-Generator"><a href="#24-Generator" class="headerlink" title="24.  Generator"></a>24.  Generator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-keyword">yield</span> i<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> f = foo()<br><span class="hljs-built_in">console</span>.log(f.next())<br><span class="hljs-built_in">console</span>.log(f.next())<br><span class="hljs-built_in">console</span>.log(f.next())<br><span class="hljs-built_in">console</span>.log(f.next())<br><br><span class="hljs-comment">//yield关键字只存在于Generator，这里的的yield关键字是在forEach函数里的</span><br><span class="hljs-comment">// function* gen(args) &#123;</span><br><span class="hljs-comment">//     args.forEach(item =&gt; &#123;</span><br><span class="hljs-comment">//         yield item + 1</span><br><span class="hljs-comment">//     &#125;)</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>​    对应结果：</p><p>​    <img src="https://gitee.com/youlan_lan/md_image/raw/master/20210430224054.png" alt="image-20210430224027207" style="zoom:70%;" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">gen</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-number">2</span> * (<span class="hljs-keyword">yield</span>(x + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">let</span> z = <span class="hljs-keyword">yield</span>(y / <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> x + y + z<br>&#125;<br><span class="hljs-comment">//在next里可以传递参数</span><br><span class="hljs-keyword">let</span> g = gen(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">console</span>.log(g.next()) <span class="hljs-comment">// 6</span><br><span class="hljs-built_in">console</span>.log(g.next(<span class="hljs-number">12</span>)) <span class="hljs-comment">// y=24  8（对应的x+1=12）</span><br><span class="hljs-built_in">console</span>.log(g.next(<span class="hljs-number">13</span>)) <span class="hljs-comment">// z=13 x=5 42（对应的y/3=13</span><br></code></pre></td></tr></table></figure><p>使用Generator进行ajax请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">url</span>) </span>&#123;<br>    ajax(url, <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        getData.next(res)<br>    &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">gen</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> res1 = <span class="hljs-keyword">yield</span> request(<span class="hljs-string">&#x27;static/a.json&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(res1)<br>    <span class="hljs-keyword">let</span> res2 = <span class="hljs-keyword">yield</span> request(<span class="hljs-string">&#x27;static/b.json&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(res2)<br>    <span class="hljs-keyword">let</span> res3 = <span class="hljs-keyword">yield</span> request(<span class="hljs-string">&#x27;static/c.json&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(res3)<br>&#125;<br><span class="hljs-keyword">let</span> getData = gen()<br>getData.next()<br></code></pre></td></tr></table></figure><h2 id="25-Module"><a href="#25-Module" class="headerlink" title="25. Module"></a>25. Module</h2><ul><li>export default 默认，导入不需要知道命名（可以直接使用别名）</li><li>import * from ‘../../xx.js’  </li></ul><ol><li></li></ol><blockquote><p>把庞大的代码拆开</p><p>将多个功能的代码按功能进行分开，以达到多个模块组合在一起形成一个功能复杂的功能</p></blockquote><ol><li><p>好处：</p><ul><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ul></li><li><p>语法</p><blockquote><p><code>&lt;script type=&quot;module&quot;&gt;  &lt;/script&gt;</code></p><p>也可以使用 <code>&lt;script src=&quot;./src/js/app.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt; </code>将引用部分放到另一个js文件里</p></blockquote><ul><li><p>export 对外接口</p><blockquote><p>导入的时候命名要完全一样，可以起别名，起了别名之后文件中使用只能使用别名，原名已经失效了</p><p>export 和 export default 可以一起使用   <code>import add, &#123;str&#125; from &#39;../../xxx.js&#39;</code></p></blockquote><ul><li><p>分别暴露：在要暴露的语句前面+export</p></li><li><p>统一暴露：在某个位置使用export{}，将要暴露的数据放在花括号里面</p><blockquote><p>在模块文件里，使用export default</p><p><code>export default &#123;</code></p><p>​    <code>...</code></p><p><code>&#125;</code></p><p>这样就可以直接使用了</p></blockquote></li><li><p>默认暴露：export.default = { }，这种方法在调用时需要添加default</p><blockquote><p>导入不需要知道命名（可以直接使用别名）</p></blockquote></li></ul></li><li><p>import 输入其他模块提供的功能</p><ul><li><p>通用的导入方式：import * as m1 from “./src/js/m1.js”;</p><blockquote><p>导入的是全部</p></blockquote></li><li><p>解构赋值的形式：</p><ul><li>import{school，teach} from “./src/js/m1.js”; </li><li>import{default as m1} from “./src/js/m1.js”; </li></ul><blockquote><p>重名时需要使用别名，不然会报错</p></blockquote></li><li><p>简便形式(针对默认暴露）：improt m3 from “./src/js/m3.js”</p></li></ul></li></ul></li><li><p>使用babel</p><ul><li><p>安装工具 <code>npm i babel-cli babel-preset-env browerify -D</code></p></li><li><p>编译：<code> npx babel src/js -d dist/js --presets=babel-preset-env</code>  先 [原文件目录] 后 [存放文件目录]</p></li><li><p>打包 ： <code>npx browserify dist/js/app.js -o dist/bundle.js</code>   将存放文件目录下的文件打包生成bundle.js文件</p></li></ul></li></ol><h1 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h1><h2 id="1-数组拓展"><a href="#1-数组拓展" class="headerlink" title="1. 数组拓展"></a>1. 数组拓展</h2><ul><li><p>Array.prototype.includes(searchElement[,fromIndex]) </p></li><li><p>includes VS indexOf</p><ul><li>includes 返回布尔值，可以检测NaN</li><li>indexOf  返回index / -1，不可以检测NaN</li></ul></li><li><p>幂运算符：**</p><p>等同于Math.pow()</p></li></ul><h1 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h1><h2 id="1-异步编程解决方案Async-Await"><a href="#1-异步编程解决方案Async-Await" class="headerlink" title="1. 异步编程解决方案Async Await"></a>1. 异步编程解决方案Async Await</h2><p>两者成对出现</p><p>代码可读性更强</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeout</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>            resolve()<br>        &#125;,<span class="hljs-number">1000</span>)<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">await</span> timeout()   <span class="hljs-comment">//等待timeout()运行完毕后再继续往下运行</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;<br><br>foo()<br></code></pre></td></tr></table></figure><p>之前的ajax请求代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> res1 = <span class="hljs-keyword">await</span> request(<span class="hljs-string">&#x27;static/a.json&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(res1)<br>    <span class="hljs-keyword">const</span> res2 = <span class="hljs-keyword">await</span> request(<span class="hljs-string">&#x27;static/b.json&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(res2)<br>    <span class="hljs-keyword">const</span> res3 = <span class="hljs-keyword">await</span> request(<span class="hljs-string">&#x27;static/c.json&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(res3)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-对象拓展"><a href="#2-对象拓展" class="headerlink" title="2. 对象拓展"></a>2. 对象拓展</h2><ul><li><p>Object.values()  获得值</p></li><li><p>Object.entries()  获得数组（key和value）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> res = <span class="hljs-built_in">Object</span>,keys(obj).map(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> obj[key])<br><span class="hljs-built_in">console</span>.log(res)<br><br><span class="hljs-comment">//上面可以写成</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.values(obj))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.entries([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]))<br><span class="hljs-comment">//[&quot;0&quot;,&quot;a&quot;],[&quot;1&quot;,&quot;b&quot;],[&quot;2&quot;,&quot;c&quot;]</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-对象属性描述"><a href="#3-对象属性描述" class="headerlink" title="3. 对象属性描述"></a>3. 对象属性描述</h2><ul><li>Object.getOwnPropertyDescriptors()<ul><li>value 当前对象的默认值</li><li>writable  是否可以修改</li><li>enumerable  是否可以通过for..in方式循环</li><li>configurable  是否可以删除</li></ul></li></ul><h2 id="4-字符串拓展"><a href="#4-字符串拓展" class="headerlink" title="4.  字符串拓展"></a>4.  字符串拓展</h2><ul><li><p>String.prototype.padStart()  头部补全</p></li><li><p>String.prototype.padEnd()  尾部补全</p><p>第一个参数为长度，第二个参数为用于补全的字符串</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;x&#x27;</span>.padStart(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;ababx&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.padStart(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;abax&#x27;</span><br><br><span class="hljs-string">&#x27;x&#x27;</span>.padEnd(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xabab&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.padEnd(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xaba&#x27;</span><br><br><span class="hljs-comment">//等于或大于最大长度，则字符串补全不生效，返回原字符串</span><br><span class="hljs-string">&#x27;xxx&#x27;</span>.padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xxx&#x27;</span><br><span class="hljs-string">&#x27;xxx&#x27;</span>.padEnd(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xxx&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//应用于日期  yyyy-mm-dd</span><br><span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-keyword">const</span> year = now.getFullYear()<br><span class="hljs-comment">//padStart是String原型下面的方法，所以想要将其转换为String</span><br><span class="hljs-comment">//getMonth()返回的是0-11的数字，所以要加1</span><br><span class="hljs-keyword">const</span> month = (now.getMonth() + <span class="hljs-number">1</span>).toString().padStart(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>) <br><span class="hljs-keyword">const</span> day = (now.getDate()) + <span class="hljs-number">1.</span>toString().padStart(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;year&#125;</span>-<span class="hljs-subst">$&#123;month&#125;</span>-<span class="hljs-subst">$&#123;day&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//加密手机号</span><br><span class="hljs-keyword">const</span> tel = <span class="hljs-string">&#x27;13011111111&#x27;</span><br><span class="hljs-keyword">const</span> NewTel = tel.slice(-<span class="hljs-number">4</span>).padStart(tel.length,<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(NewTel)<br></code></pre></td></tr></table></figure><h2 id="5-尾逗号"><a href="#5-尾逗号" class="headerlink" title="5. 尾逗号"></a>5. 尾逗号</h2><p>允许数参数列表使用尾逗号</p><h1 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h1><h2 id="1-异步迭代for-await-of"><a href="#1-异步迭代for-await-of" class="headerlink" title="1. 异步迭代for await of"></a>1. 异步迭代for await of</h2><ul><li>for-await-of</li><li>Symbol.asyncIterator</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//同步迭代</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;es6&#x27;</span>,<span class="hljs-string">&#x27;es7&#x27;</span>,<span class="hljs-string">&#x27;es8&#x27;</span>,<span class="hljs-string">&#x27;es9&#x27;</span>]<br>arr[<span class="hljs-built_in">Symbol</span>.iterator] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> nextIndex = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> nextIndex &lt; arr.length ? &#123;<br>                <span class="hljs-attr">value</span>: arr[nextIndex++],<br>                <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>            &#125; : &#123;<br>                <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>,<br>                <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//异步迭代</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPromise</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(&#123;  <span class="hljs-comment">//写成对象的形式</span><br>                <span class="hljs-attr">value</span>: time,<br>                <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span><br>            &#125;)<br>        &#125;,time)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> arr = [getPromise(<span class="hljs-number">1000</span>),getPromise(<span class="hljs-number">2000</span>),getPromise(<span class="hljs-number">3000</span>)]<br>arr[<span class="hljs-built_in">Symbol</span>.asyncIterator] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> nextIndex = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> nextIndex &lt; arr.length ? arr[nextIndex++] : <br>            <span class="hljs-built_in">Promise</span>.resolve(&#123;<br>                <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>,<br>                <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>        <span class="hljs-built_in">console</span>.log(item)<br>    &#125;<br>&#125;<br>test()<br></code></pre></td></tr></table></figure><h2 id="2-正则表达式拓展"><a href="#2-正则表达式拓展" class="headerlink" title="2. 正则表达式拓展"></a>2. 正则表达式拓展</h2><ul><li><p>dotAll </p><p>dot不能匹配\n \r（包括两者的Unicode）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/./</span>s  <span class="hljs-comment">//匹配任意单个字符</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;5&#x27;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;x&#x27;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;\n&#x27;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;\r&#x27;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;\u&#123;2028&#125;&#x27;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;\u&#123;2029&#125;&#x27;</span>))  <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p>具名组匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> RE_DATE = <span class="hljs-regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;  <span class="hljs-comment">//用圆括号分组</span><br><br><span class="hljs-keyword">const</span> matchObj = RE_DATE.exec(<span class="hljs-string">&#x27;1999-12-31&#x27;</span>);<br><span class="hljs-keyword">const</span> year = matchObj[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 1999</span><br><span class="hljs-keyword">const</span> month = matchObj[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 12</span><br><span class="hljs-keyword">const</span> day = matchObj[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 31</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg = /(?&lt;year&gt;\d&#123;<span class="hljs-number">4</span>&#125;-(?&lt;month)\d&#123;2&#125;-(?&lt;day&gt;\d&#123;2&#125;))<br>const groups = reg.exec(&#x27;2020-02-01&#x27;).groups<br>//使用解构赋值<br>const &#123;year, month,day&#125; = groups<br>console.log(year, month, day)<br></code></pre></td></tr></table></figure></li><li><p>后行断言 match</p><ul><li><p>先行断言：<code>x</code>只有在<code>y</code>前面才匹配，必须写成<code>/x(?=y)/</code></p></li><li><p>先行否定断言：<code>x</code>只有不在<code>y</code>前面才匹配，必须写成<code>/x(?!y)/</code></p></li><li><p><strong>后行断言</strong>：<code>x</code>只有在<code>y</code>后面才匹配，必须写成<code>/(?&lt;=y)x/</code></p></li><li><p>后行否定断言：<code>x</code>只有不在<code>y</code>后面才匹配，必须写成<code>/(?&lt;!y)x/</code></p></li></ul></li></ul><h2 id="3-对象拓展Rest-amp-Spread"><a href="#3-对象拓展Rest-amp-Spread" class="headerlink" title="3. 对象拓展Rest&amp;Spread"></a>3. 对象拓展Rest&amp;Spread</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//克隆对象 为深拷贝</span><br><span class="hljs-keyword">const</span> obj3 = &#123;..obj1&#125;<br><br><span class="hljs-comment">//合并对象  为浅拷贝</span><br><span class="hljs-keyword">const</span> obj4 = &#123;...obj1, ...obj2&#125;  <span class="hljs-comment">//obj1和obj2相同键名的会被后者覆盖</span><br><br><span class="hljs-comment">//...rest 获取剩余的属性</span><br><span class="hljs-keyword">const</span> &#123;name, age, ...rest&#125; = obj1  <span class="hljs-comment">//...rest 必须放在最后，不然会报错</span><br></code></pre></td></tr></table></figure><h2 id="4-Promise拓展finally"><a href="#4-Promise拓展finally" class="headerlink" title="4. Promise拓展finally()"></a>4. Promise拓展finally()</h2><ul><li><p>Promise.prototype.finally()</p><p>无论失败还是成功<strong>都会</strong>执行finally里面的语句【例如：成功失败相同的代码逻辑、关闭操作】</p></li></ul><h2 id="5-字符串扩展"><a href="#5-字符串扩展" class="headerlink" title="5. 字符串扩展"></a>5. 字符串扩展</h2><p>放松模板字符串文字限制，对一些错误不报错，返回undefined</p><h1 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h1><h2 id="1-对象扩展"><a href="#1-对象扩展" class="headerlink" title="1. 对象扩展"></a>1. 对象扩展</h2><ul><li><p>Object.fromEntries()  返回对象结构 【和Object.Entries()相反（返回键对结构）】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// map  =&gt;  对象</span><br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()<br>map.set(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;n1&#x27;</span>)<br>map.set(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;n2&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(map)<br><span class="hljs-keyword">const</span> fromEntries = <span class="hljs-built_in">Object</span>.fromEntries(map)<br><span class="hljs-built_in">console</span>.log(map)  <span class="hljs-comment">//对象格式</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-字符串扩展"><a href="#2-字符串扩展" class="headerlink" title="2. 字符串扩展"></a>2. 字符串扩展</h2><ul><li>String.prototype.trimStart()【trimLeft()】 消除头部的空格，尾部会被保留</li><li>String.prototype.trimEnd() 【trimRight()】消除尾部的空格，头部会被保留</li><li>String.prototype.trim()  消除空格</li></ul><h2 id="3-数组扩展"><a href="#3-数组扩展" class="headerlink" title="3. 数组扩展"></a>3. 数组扩展</h2><ul><li><p>Array.prototype.flat(num)  对多维数组进行扁平化操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>],<span class="hljs-number">12</span>]]  <span class="hljs-comment">//三维数组</span><br><span class="hljs-built_in">console</span>.log(arr.flat().flat().flat())<br><span class="hljs-built_in">console</span>.log(arr.flat(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">console</span>.log(arr.flat(<span class="hljs-literal">Infinity</span>))<br></code></pre></td></tr></table></figure></li><li><p>Array.prototype.flatMap()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-comment">//const res = arr.map(x =&gt; [x + 1]).flat() 等价于↓</span><br><span class="hljs-keyword">const</span> res = arr.flatMap(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> [x + <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-修订toString"><a href="#4-修订toString" class="headerlink" title="4. 修订toString()"></a>4. 修订toString()</h2><p>返回源代码中的实际文本片段【原样输出返回一模一样的原始代码，包括注释空格等等】</p><h2 id="5-可选的Catch-Binding"><a href="#5-可选的Catch-Binding" class="headerlink" title="5. 可选的Catch Binding"></a>5. 可选的Catch Binding</h2><p>省略catch绑定的参数和括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-JSON扩展"><a href="#6-JSON扩展" class="headerlink" title="6. JSON扩展"></a>6. JSON扩展</h2><ul><li>JSON superset</li><li>JSON.stringify() 增强能力</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// JSON 超集 【少用】\u2029 \u2028</span><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;var str = &quot;youlan&quot;;\u2029 function foo()&#123;return str;&#125;&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(foo())<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//0xD800~0xDfff</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-string">&#x27;\uD830\uDE0E&#x27;</span>))  <span class="hljs-comment">//emoji</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-string">&#x27;\uD830&#x27;</span>))  <span class="hljs-comment">//\ud830 原样输出</span><br></code></pre></td></tr></table></figure><h2 id="7-Symbol扩展"><a href="#7-Symbol扩展" class="headerlink" title="7. Symbol扩展"></a>7. Symbol扩展</h2><ul><li>Symbol.prototype.description  只读属性，不可写【修改description也不会报错，但是不能起作用】</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> s = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;yl&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(s)  <span class="hljs-comment">//Symbol(yl)</span><br><span class="hljs-built_in">console</span>.log(s.description)  <span class="hljs-comment">//yl 如果没有值则返回undefined</span><br><br></code></pre></td></tr></table></figure><h1 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h1><h2 id="1-全局模式捕获matchAll"><a href="#1-全局模式捕获matchAll" class="headerlink" title="1. 全局模式捕获matchAll()"></a>1. 全局模式捕获matchAll()</h2><ul><li><p>String.prototype.matchAll()  和正则一起使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;html&gt;</span><br><span class="hljs-string">        &lt;body&gt;</span><br><span class="hljs-string">            &lt;div&gt;第一个div&lt;/div&gt;</span><br><span class="hljs-string">            &lt;p&gt;这是p&lt;/p&gt;</span><br><span class="hljs-string">            &lt;div&gt;第二个div&lt;/div&gt;</span><br><span class="hljs-string">            &lt;span&gt;这是span&lt;/span&gt;</span><br><span class="hljs-string">            &lt;div&gt;第三个div&lt;/div&gt;</span><br><span class="hljs-string">        &lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;</span><br><span class="hljs-string">`</span><br><span class="hljs-comment">//exec g</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectDiv1</span>(<span class="hljs-params">regExp, str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> matches = []<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">const</span> match = regExp.exec(str)<br>        <span class="hljs-keyword">if</span>(match == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        matches.push(match[<span class="hljs-number">1</span>]) <span class="hljs-comment">//完整匹配</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> matches<br>&#125;<br><span class="hljs-keyword">const</span> regExp = <span class="hljs-regexp">/&lt;div&gt;(.*)&lt;/</span>div&gt;/g<br><span class="hljs-keyword">const</span> res1 = selectDiv1(regExp, str)<br><span class="hljs-built_in">console</span>.log(res1)  <span class="hljs-comment">//[&quot;第一个div&quot;,&quot;第二个div&quot;,&quot;第三个div&quot;]</span><br><br><span class="hljs-comment">//match</span><br><span class="hljs-comment">//console.log(str.match(regExp))  //[&quot;&lt;div&gt;第一个div&lt;/div&gt;&quot;,&quot;&lt;div&gt;第二个div&lt;/div&gt;&quot;,&quot;&lt;div&gt;第三个div&lt;/div&gt;&quot;]</span><br><br><span class="hljs-comment">//replace</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectDiv2</span>(<span class="hljs-params">regExp, str</span>) </span>&#123;<br><span class="hljs-keyword">let</span> matches = []<br>    str.replace(regExp, <span class="hljs-function">(<span class="hljs-params">all, first</span>) =&gt;</span> &#123;<br>        matches.push(first) <span class="hljs-comment">//完整匹配</span><br>    &#125;) <br>    <span class="hljs-keyword">return</span> matches<br>&#125;<br><span class="hljs-keyword">const</span> res2 = selectDiv2(regExp, str)<br><span class="hljs-built_in">console</span>.log(res2) <span class="hljs-comment">//[&quot;第一个div&quot;,&quot;第二个div&quot;,&quot;第三个div&quot;]</span><br><br><span class="hljs-comment">//matchAll </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectDiv3</span>(<span class="hljs-params">regExp, st</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> matches = []<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> match <span class="hljs-keyword">of</span> str.matchAll(regExp))&#123;<br>        matches.push(match[<span class="hljs-number">1</span>]) <span class="hljs-comment">//完整匹配</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> matches<br>&#125;<br><span class="hljs-keyword">const</span> res3 = selectDiv3(regExp, str)<br><span class="hljs-built_in">console</span>.log(res3) <span class="hljs-comment">//[&quot;第一个div&quot;,&quot;第二个div&quot;,&quot;第三个div&quot;]</span><br></code></pre></td></tr></table></figure><p>matchAll方法的正则表达式需要有g（全局匹配）</p></li></ul><h2 id="2-动态导入Dynamic-import"><a href="#2-动态导入Dynamic-import" class="headerlink" title="2. 动态导入Dynamic import()"></a>2. 动态导入Dynamic import()</h2><p>按需引入，使得页面渲染更快</p><p>懒加载</p><p>eg. 点击按钮才导入某个模块、才开始渲染这一部分的东西</p><h2 id="3-新的原始数据类型BigInt"><a href="#3-新的原始数据类型BigInt" class="headerlink" title="3. 新的原始数据类型BigInt"></a>3. 新的原始数据类型BigInt</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1n</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1n</span> === <span class="hljs-number">1</span>) <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//创建</span><br><span class="hljs-keyword">const</span> bigInt = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">900719925474740993n</span>)<br>bigInt.toSring()<br></code></pre></td></tr></table></figure><h2 id="4-Promise扩展allSettled"><a href="#4-Promise扩展allSettled" class="headerlink" title="4. Promise扩展allSettled()"></a>4. Promise扩展allSettled()</h2><ul><li>Promise.allSettled()</li><li>allSettled()  Vs  all()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.allSettled([<br>    <span class="hljs-built_in">Promise</span>.resolve(&#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    &#125;),<br>    <span class="hljs-built_in">Promise</span>.reject(&#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">data</span>: []<br>    &#125;),<br>    <span class="hljs-built_in">Promise</span>.resolve(&#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">data</span>: [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>    &#125;),<br>]).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//console.log(res,&quot;成功&quot;)</span><br>    <span class="hljs-keyword">const</span> data = res.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.status === <span class="hljs-string">&quot;fulfilled&quot;</span>)<br>    <span class="hljs-built_in">console</span>.log(data)<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err,<span class="hljs-string">&quot;失败&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果使用all()，则其中有一个reject都会导致整个进程进入“失败”；而allSettled()，成功的会返回<code>status: &quot;fulfilled&quot; value:&#123;...&#125;</code>,失败的返回<code>reson: &#123;...&#125;</code>，使用filter进行过滤获得请求成功的数据</p><h2 id="5-全局对象globalThis"><a href="#5-全局对象globalThis" class="headerlink" title="5. 全局对象globalThis"></a>5. 全局对象globalThis</h2><p>提供一个标准的方式去获取不同环境下的全局对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// node: global</span><br><span class="hljs-comment">// web: window self</span><br><span class="hljs-keyword">const</span> getGlobal = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> selt !== <span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> self<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">global</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">global</span><br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;无法找到全局变量&quot;</span>)<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">global</span> = getGlobal()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>)<br><br><span class="hljs-comment">//在es11中</span><br><span class="hljs-comment">//console.log(globalThis)</span><br></code></pre></td></tr></table></figure><h2 id="6-可选链Optional-chaining"><a href="#6-可选链Optional-chaining" class="headerlink" title="6.  可选链Optional chaining"></a>6.  可选链Optional chaining</h2><p>先判断这个方法属性是否存在，如果存在再往下取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> street = user &amp;&amp; user.address &amp;&amp; user.address.street<br><span class="hljs-built_in">console</span>.log(street)<br><span class="hljs-keyword">const</span> num = user &amp;&amp; user.address &amp;&amp; user.address.getNum &amp;&amp; user.address.getNum()<br><span class="hljs-built_in">console</span>.log(num)<br><br><span class="hljs-comment">//es11中,代码更加简洁</span><br><span class="hljs-keyword">const</span> street = user?.address?.street<br><span class="hljs-built_in">console</span>.log(street)<br><span class="hljs-keyword">const</span> num = user?.address?.getNum?.()<br><span class="hljs-built_in">console</span>.log(num)<br></code></pre></td></tr></table></figure><p><code>?.</code> 中间不能有空格</p><h2 id="7-空值合并运算符Nullish-coalescing-Operator"><a href="#7-空值合并运算符Nullish-coalescing-Operator" class="headerlink" title="7. 空值合并运算符Nullish coalescing Operator"></a>7. 空值合并运算符Nullish coalescing Operator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> b = <span class="hljs-literal">null</span><br><span class="hljs-keyword">const</span> a = b ?? <span class="hljs-number">6</span>  <span class="hljs-comment">//当b为undefined或null时，取默认值</span><br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><p><code>??</code> 中间不能有空格</p>]]></content>
    
    
    <categories>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>es6</tag>
      
      <tag>课程笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【手把手系列2】 Fluid 主题配置教程</title>
    <link href="/2021/06/07/Hexo%20%E4%B8%BB%E9%A2%98%E4%B9%8B%20Fluid/"/>
    <url>/2021/06/07/Hexo%20%E4%B8%BB%E9%A2%98%E4%B9%8B%20Fluid/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-主题之-Fluid"><a href="#Hexo-主题之-Fluid" class="headerlink" title="Hexo 主题之 Fluid"></a>Hexo 主题之 Fluid</h1><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>Hexo搭建好的博客是使用<code>landscape</code>主题，看起来挺丑的….不是很喜欢，所以我们到hexo官网上寻找一些好看的主题进行更改。</p><blockquote><p>hexo主题网站： <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>这里有几百个主题供你选择，由于太多而且网站中也没有对这些主题进行筛选的功能，让人难以选择，所以我们推荐到github上寻找合适的主题：</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607132952.png" alt="github上的搜索"></p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607133049.png" alt="" style="zoom: 67%;" /><p>从而可以看出，最受欢迎的是<code>Next主题</code>，还有几个主题的star数也不少，大家根据自己的喜好挑选即可。</p><p>浅谈几个挑选合适主题的标准：</p><ul><li>star数、fork数多的</li><li>使用文档写的比较详细的</li><li>更新时间比较近的，或者更新频率比较高的</li></ul><h3 id="1-Fluid主题介绍"><a href="#1-Fluid主题介绍" class="headerlink" title="1. Fluid主题介绍"></a>1. Fluid主题介绍</h3><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607135407.png" alt="" style="zoom:67%;" /><p>这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作： <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607135202.png"></p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607135243.png"></p><p>整体上，简约风，个人是比较喜爱的。最重要的是这个主题的文档写得非常地详细，查起来非常容易，上手快。</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>安装的话，github的README.md文档写的很清楚了</p><p>这里直接复制粘贴一下：</p><p><strong>方式一：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><p><strong>方式二：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">git</span> <span class="hljs-string">clone</span> <span class="hljs-string">https://github.com/fluid-dev/hexo-theme-fluid.git</span><br></code></pre></td></tr></table></figure><p>或者直接下载压缩文件，解压后放到themes目录，将解压出来的文件夹命名为<code>fluid</code></p><h3 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h3><p>修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="4-创建页"><a href="#4-创建页" class="headerlink" title="4. 创建页"></a>4. 创建页</h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><p><strong>分类页、标签类也类似</strong></p><p>创建了这两个页，在写文章的时候，在最前面写上对应的category、tags即可</p><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 使用Hexo搭建博客（基础版）<br>index<span class="hljs-emphasis">_img: https://gitee.com/youlan_</span>lan/md<span class="hljs-emphasis">_image/raw/master/20210607012255.png</span><br><span class="hljs-emphasis">categories:</span><br><span class="hljs-emphasis">- 博客搭建</span><br><span class="hljs-emphasis">tags:</span><br><span class="hljs-emphasis">- 博客搭建</span><br><span class="hljs-emphasis">- node</span><br><span class="hljs-emphasis">- git</span><br><span class="hljs-emphasis">- github</span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure><p>具体的参数可以查阅官方文档： <a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></p><h3 id="5-一些基础配置"><a href="#5-一些基础配置" class="headerlink" title="5. 一些基础配置"></a>5. 一些基础配置</h3><p>本篇文章只介绍一些基础的配置，足够你搭建一个好看的博客。想要高级玩法请到fluid上查看指南~</p><p>打开<code>_config.fluid.yml</code>文件，这个文件已经很贴心的为我们写好了中文注释，大家根据自己的喜好进行配置即可~</p><p><strong>我们从上外下看吧</strong></p><h4 id="1-图标favicon"><a href="#1-图标favicon" class="headerlink" title="1. 图标favicon"></a>1. 图标favicon</h4><p>这个是用于浏览器标签的图标</p><p>也就是这个小东东</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607141316.png" alt="就是这个小东东"></p><p>favicon 和 apple_touch_icon设置成同一个就可以了</p><h4 id="2-代码高亮"><a href="#2-代码高亮" class="headerlink" title="2. 代码高亮"></a>2. 代码高亮</h4><p>这个部分可以默认，也可以根据你的喜好进行修改</p><h4 id="3-打字机效果fun-features"><a href="#3-打字机效果fun-features" class="headerlink" title="3. 打字机效果fun_features"></a>3. 打字机效果fun_features</h4><p>我这里把是否循环播放效果打开了，一直重复打字机的动画效果</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607141600.png"></p><h4 id="4-颜色color"><a href="#4-颜色color" class="headerlink" title="4. 颜色color"></a>4. 颜色color</h4><p>这里是对一些颜色的配置，可以直接默认，我这边是把<code>navbar_bg_color</code> 设置成和主页图片相近的颜色，这样视觉效果更好</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607141715.png"></p><h4 id="5-字体font"><a href="#5-字体font" class="headerlink" title="5. 字体font"></a>5. 字体font</h4><p>默认好像是16px，我觉得有点小了，改成19px比较合适</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607141845.png"></p><h4 id="6-懒加载lazyload"><a href="#6-懒加载lazyload" class="headerlink" title="6. 懒加载lazyload"></a>6. 懒加载lazyload</h4><p>这个打开，懒加载可以使得页面更加流畅，看不到的范围就先不加载，前端的小伙伴都懂~</p><p>这里有一个加载时的占位图片loading_img也可以设置一下</p><h4 id="7-导航栏navbar"><a href="#7-导航栏navbar" class="headerlink" title="7. 导航栏navbar"></a>7. 导航栏navbar</h4><p>主要设置的参数：</p><ul><li>blog_title</li><li>menu（一般这个默认就可以了）</li></ul><h4 id="8-搜索功能search"><a href="#8-搜索功能search" class="headerlink" title="8. 搜索功能search"></a>8. 搜索功能search</h4><p>打开这个，可以在网页里通过关键字搜索到博客内容</p><h4 id="9-页脚footer"><a href="#9-页脚footer" class="headerlink" title="9. 页脚footer"></a>9. 页脚footer</h4><p>根据自己的需要进行修改吧</p><p>我这边只修改了content和打开了statistics</p><p>content的内容需要使用<strong>HTML</strong>进行编写</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607142609.png"></p><h4 id="10-banner"><a href="#10-banner" class="headerlink" title="10 . banner"></a>10 . banner</h4><p>刚创建好的banner都是一样的图片，不太好看，我们先对banner进行配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/example.jpg</span>   <span class="hljs-comment"># 对应存放在 /source/img/bg/example.jpg</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://static.zkqiang.cn/example.jpg</span><br></code></pre></td></tr></table></figure><p>推荐使用网络链接</p><blockquote><p>如果是本地图片，目录文件夹可自定义，但必须在 source 目录下，博客与主题的 source 目录最终会合并，因此优先选择博客的 source。</p><p>图片大小建议压缩到 1MB 以内，否则会严重拖慢页面加载。</p></blockquote><ol><li><p>index</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607142729.png" alt="index"></p><p>效果：</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607142806.png" alt="index"></p><p>里面有个api接口，感兴趣的小伙伴可以去了解了解，可以使用随机播放不同的text</p></li><li><p>文章页 Post Page</p><ul><li><p>default_index_img 文章默认图片，如果没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</p></li><li><p>meta 这里有一些文章标题下方的元信息设置，根据自己的喜好设置就可以了，需要使用的功能就设置成 true 就行了</p></li><li><p>updated 一些关于更新后显示的信息</p></li><li><p>copyright 版权声明，同样的content里需要使用html格式</p></li><li><p>其他的就默认就好了，不是关键的功能</p></li></ul></li><li><p>其他页面</p><p>根据自己的喜好设置就好了，可以一路默认</p></li></ol><p><strong>主要是以下两个参数</strong></p><ul><li>banner_img</li><li>banner_img_height</li></ul><p>每个页面都可以配置一个banner_img，直接搜索<code>banner_img</code>快速定位进行修改</p><h3 id="6-config-yml"><a href="#6-config-yml" class="headerlink" title="6. _config.yml"></a>6. _config.yml</h3><p>这里的注释是英文的，可能看起来不是那么方便，这里主要是两个地方需要修改，其他直接默认就可以了</p><ol><li><p>最开头的网站信息</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607143908.png"></p></li><li><p>以及最末尾的部署设置</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607143912.png"></p></li></ol><p>这里可以配置二次元人物，具体就到网上搜索就好了~ 搜<code>live2 看板娘</code></p><h3 id="7-最后"><a href="#7-最后" class="headerlink" title="7.  最后"></a>7.  最后</h3><p>算是一个傻瓜式教程了。。。。省略了非常多的步骤。next听说可玩度很高，配置之后网页非常好看（但我不喜欢又关我什么事hhh），next的贡献者非常多，所以next主题的维护以及更新等等方面都非常地强。</p><p>但是！fluid的简约风真的非常nice！！！安利一波</p><h3 id="8-小彩蛋"><a href="#8-小彩蛋" class="headerlink" title="8. 小彩蛋"></a>8. 小彩蛋</h3><p>对了，在设置banner_img的时候，由于banner比较大，所以把图片放大之后非常地模糊。。。所以这个也让我浪费了非常多时间在找高清图以及增强图片清晰度的方法</p><ul><li><p>增强图片清晰度的方法： </p><ul><li><p>用ps：emmm….难度有点大，ps小白表示不想</p></li><li><p>一些ai图像修复网站：傻瓜式操作，还不错</p></li></ul></li><li><p>一些高清图片的网站</p><p>这个是我后来在fluid的博客上看到的…应该早点看到，泪目</p><ul><li><strong>元气桌面 <a href="https://desk.duba.com/">https://desk.duba.com/</a></strong></li><li><a href="https://wallpaperhub.app/">https://wallpaperhub.app/</a></li><li><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li><li><a href="https://unsplash.com/">https://unsplash.com/</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>小白教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【手把手系列1】使用Hexo搭建博客（基础版）</title>
    <link href="/2021/06/07/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/06/07/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo搭建博客（基础版）"><a href="#使用Hexo搭建博客（基础版）" class="headerlink" title="使用Hexo搭建博客（基础版）"></a>使用Hexo搭建博客（基础版）</h1><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>就目前来说，有非常多平台可以发表自己的博客，像CSDN、简书、掘金等等，并且这些平台有一定的流量，一篇好的博客很快就能吸引来大量的浏览量。</p><ul><li>这些平台的优点很明显：操作简单，傻瓜式操作，可以进行交互。</li><li>但是也存在一些比较难受的缺点：平台的限制及一些广告，因违规而删除你的文章</li></ul><p>而去购买服务器来进行搭建博客又有点大费周折了，而且成本极高，不利于小白快速上手。</p><p>于是，使用博客框架以及github这一方式就介于上述两种之间。我们使用hexo框架，再将搭建好的博客依托到github page平台上。这样，我们只用专心于我们的写作了。</p><blockquote><p>github毕竟是国外的网，打开确实有点慢，而国内站点码云的<code>gitee page</code> 被暂停使用了……</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/20210607001959.png" alt="码云没了..."></p></blockquote><h3 id="1-Hexo的介绍"><a href="#1-Hexo的介绍" class="headerlink" title="1. Hexo的介绍"></a>1. Hexo的介绍</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>Hexo是基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p><blockquote><p>官方文档上的使用方法非常的详细，可以放心食用：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>本文只是摘取部分关键的步骤</p></blockquote><h3 id="2-使用hexo搭建博客的步骤"><a href="#2-使用hexo搭建博客的步骤" class="headerlink" title="2. 使用hexo搭建博客的步骤"></a>2. 使用hexo搭建博客的步骤</h3><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>将hexo部署到GitHub</li><li>更改主题</li><li>设置个人域名</li><li>发布文章</li></ol><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><h5 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h5><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><h5 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2. 安装 Node.js"></a>2. 安装 Node.js</h5><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><blockquote><p>上述两个安装方法不是本次教程的重点，不会安装的小伙伴可以到网上搜一下教程~</p></blockquote><h5 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h5><p>安装好git之后，我们可以右击选择<code>Git Bash here</code>可以打开一个命令行窗口，输入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">hexo-cli</span><br></code></pre></td></tr></table></figure><p>这是全局安装hexo脚手架，之后在这台电脑使用hexo搭建新的博客就不需要再次安装了</p><p>新建文件夹</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">init</span> <span class="hljs-string">&lt;folder&gt;</span><br><span class="hljs-string">$</span> <span class="hljs-string">cd</span> <span class="hljs-string">&lt;folder&gt;</span><br><span class="hljs-string">$</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br></code></pre></td></tr></table></figure><p>会生成很多文件夹，看不懂没关系，知道怎么配置就可以了。</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li><strong>_config.yml: 博客的配置文件</strong></li></ul><blockquote><p>关于文件里面的参数可以到官方文档上查看，这里不多说了。</p></blockquote><h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">s</span><br></code></pre></td></tr></table></figure><p>这三个命令非常重要</p><p>在浏览器中输入<code>localhost:4000</code> 就可以看到生成的博客页面了</p><p><code>ctrl + c </code> 可以关掉服务</p><h3 id="4-创建GitHub仓库"><a href="#4-创建GitHub仓库" class="headerlink" title="4. 创建GitHub仓库"></a>4. 创建GitHub仓库</h3><p>GitHub非常好用，配合着git一起使用，主要用于团队协作和下载优秀者的代码</p><blockquote><p>详情可以自己去搜一搜</p></blockquote><p>先注册一个账号，创建一个 <code>yourusername.github.io</code>的仓库</p><blockquote><p>必须用这个名字，不然GitHub page不能识别你的文件</p></blockquote><p>生成SSH添加到GitHub</p><blockquote><p>这也不是我们本次教程的重点，具体步骤可以到网上搜搜教程，属于git的使用</p><p>只有把你电脑的ssh添加到你的GitHub上，你的git才能正常使用</p></blockquote><h3 id="5-将Hexo部署到GitHub上"><a href="#5-将Hexo部署到GitHub上" class="headerlink" title="5. 将Hexo部署到GitHub上"></a>5. 将Hexo部署到GitHub上</h3><p>找到配置文件 <code>_config.yml</code>，翻到最后，根据自己的仓库进行配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-comment"># YourgithubName需要改成你的GitHub账号名</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/YourgithubName/YourgithubName.github.io.git</span><br>  <span class="hljs-comment"># 这里是你的代码推送到的分支名</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p style="color:red">注意：</p><p style="color:red">这里的branch需要填写仓库主支名，不然页面打开是没有效果的~</p><p>安装deploy-git：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span><br><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br><br><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">--d</span>   <span class="hljs-comment"># 一键部署</span><br></code></pre></td></tr></table></figure><p><code>hexo clean</code> 清除之前生成的东西<br><code>hexo generate</code> 生成静态文章，可以用 <code>hexo g</code> 缩写<br><code>hexo deploy</code> 部署文章，可以用 <code>hexo d</code> 缩写</p><p>部署成功后，在<a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站就可以访问到你的博客了</p><h3 id="6-更改主题"><a href="#6-更改主题" class="headerlink" title="6. 更改主题"></a>6. 更改主题</h3><p>到 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 挑选自己喜欢的主题</p><p>推荐到GitHub上找star最多的几个主题，star多证明这一主题使用的人也多，相对地使用文档也会更加完整清晰，体验感更佳√</p><p>这里就不细讲了，后面会更新一篇使用<code>Fluid</code>主题的简易配置教程</p><blockquote><p>待更……</p></blockquote><h3 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h3><p>现在你的域名是<code>yourname.github.io</code>，但是感觉好像逼格不够……</p><p>hhh 所以，你可以根据自己的喜好买一个看起来牛逼的域名</p><p>到阿里云上购买一个域名，不同的后缀价格不太一样，可以选择一个便宜的域名玩玩，看你的选择咯。</p><p>买到域名之后，需要进行实名认证，然后再到域名控制台中，找到你买的域名，点击解析，添加解析。</p><blockquote><p>解析线路选择默认，不要选择境外</p></blockquote><p>买好之后进入你的仓库，在settings中设置Custom domain，输入你的域名。</p><p>接着，你在你的博客文件source中创建一个名为<code>CNAME</code>文件，不用后缀，写上你的域名</p><p>然后再使用那几个命令进行部署就可以了</p><h3 id="8-发布文章"><a href="#8-发布文章" class="headerlink" title="8. 发布文章"></a>8. 发布文章</h3><p>创建一个新的文件，然后在source/_post中打开markdown文件，就可以开始编辑了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">newpapername</span><br></code></pre></td></tr></table></figure><p>写完之后，使用那三个命令进行部署</p><p>建议安装vscode，vscode带有命令行窗口非常方便，再下载一个<code>Markdown Preview Enhanced</code>插件，可以实时查看Markdown文件书写的效果图</p><h3 id="9-最后"><a href="#9-最后" class="headerlink" title="9. 最后"></a>9. 最后</h3><p>最重要的两个命令:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br><span class="hljs-string">$</span> <span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">--d</span><br></code></pre></td></tr></table></figure><p>建议新人先使用这种方式手动部署</p><p>待以后对GitHub等工具更为了解之后，可以使用GitHub page的自动部署功能</p><blockquote><p>待更……</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>小白教程</tag>
      
      <tag>node</tag>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经典排序算法</title>
    <link href="/2021/06/06/2106061/"/>
    <url>/2021/06/06/2106061/</url>
    
    <content type="html"><![CDATA[<h1 id="经典排序算法"><a href="#经典排序算法" class="headerlink" title="经典排序算法"></a>经典排序算法</h1><h2 id="0-放在前面"><a href="#0-放在前面" class="headerlink" title="0. 放在前面"></a>0. 放在前面</h2><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210414224115837.png" alt="image-20210414224115837"></p><p><img src="https://cdn.kakkk.cc/img/371-1.jpg?imageView2/1/w/1280/h/488#" alt="img"></p><h2 id="1-冒泡排序（重点）"><a href="#1-冒泡排序（重点）" class="headerlink" title="==1. 冒泡排序（重点）=="></a>==1. 冒泡排序（重点）==</h2><p>比较相邻的元素，前面&gt;后面，则调换位置</p><p>所有元素都进行这一操作</p><p>需要用到两个for循环</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/giphy.gif"></p><ul><li><p>时间复杂度：</p><ul><li>最好情况：O(n)</li><li>平均情况：O(n^2)</li><li>最坏情况：O(n^2)</li></ul></li><li><p>稳定性：稳定</p></li><li><p>额外的空间：O(1)</p><p>原地排序，不需要额外空间</p></li></ul><h3 id="1-一般版"><a href="#1-一般版" class="headerlink" title="1. 一般版"></a>1. 一般版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort1</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> len = arr.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;j&lt;len-<span class="hljs-number">1</span>-i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;      <span class="hljs-comment">//相邻元素两两对比</span><br>                <span class="hljs-keyword">var</span> temp = arr[j+<span class="hljs-number">1</span>];  <span class="hljs-comment">//元素交换</span><br>                arr[j+<span class="hljs-number">1</span>] = arr[j];<br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-改进版"><a href="#2-改进版" class="headerlink" title="2. 改进版"></a>2. 改进版</h3><p>设置pos，记录每轮排序中最后一次进行交换的位置。下一轮排序只扫描到pos位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort2</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> i = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-number">0</span>;  <span class="hljs-comment">//每一轮都初始化pos值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;      <span class="hljs-comment">//相邻元素两两对比</span><br>                pos = j; <span class="hljs-comment">//记录交换的位置</span><br>                <span class="hljs-keyword">var</span> temp = arr[j+<span class="hljs-number">1</span>];  <span class="hljs-comment">//元素交换</span><br>                arr[j+<span class="hljs-number">1</span>] = arr[j];<br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>        i = pos;  <span class="hljs-comment">//为下一趟做准备</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-双向冒泡"><a href="#3-双向冒泡" class="headerlink" title="3. 双向冒泡"></a>3. 双向冒泡</h3><p>正向和反向两遍冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort3</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> low = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> high = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(low&lt;high) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=low;j&lt;high;++j)&#123;  <span class="hljs-comment">//正向冒泡，找到最大值</span><br>            <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123; <br>                <span class="hljs-keyword">var</span> temp = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = arr[j];<br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>        --high;  <span class="hljs-comment">//为下面的循环做准备</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=high;j&lt;low;--j)&#123;  <span class="hljs-comment">//反向冒泡，找到最小值</span><br>            <span class="hljs-keyword">if</span>(arr[j]&lt;arr[j+<span class="hljs-number">1</span>])&#123; <br>                <span class="hljs-keyword">var</span> temp = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = arr[j];<br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><p>在序列中找到最小/最大值，放到序列起始位置</p><p>对所有未排序的元素进行相同的操作，每轮只找最小/最大值</p><blockquote><p>选择排序 vs 冒泡排序：</p><ul><li>选择排序是记录这一轮遍历数组里的最小/最大值，遍历完成后将这个最值放在起始位置，只需要一次交换</li><li>冒泡排序是两两之间进行交换，需要交换很多次</li></ul></blockquote><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/%E9%80%89%E6%8B%A9px.gif" alt="选择px"></p><ul><li><p>时间复杂度：</p><ul><li>最好情况：O(n^2)</li><li>平均情况：O(n^2)</li><li>最坏情况：O(n^2)</li></ul></li><li><p>稳定性：不稳定</p><blockquote><p>大小相同的两个元素，相对前后位置对换了</p><p>比如序列：{ 5, 8, 5, 2, 9 }，一次选择的最小元素是2，然后把2和第一个5进行交换，从而改变了两个元素5的相对次序。</p></blockquote></li><li><p>额外的空间：O(1)</p></li></ul><h3 id="1-简单选择排序（基本）"><a href="#1-简单选择排序（基本）" class="headerlink" title="1. 简单选择排序（基本）"></a>1. 简单选择排序（基本）</h3><h4 id="1-1-取下标"><a href="#1-1-取下标" class="headerlink" title="1-1 取下标"></a>1-1 取下标</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectionSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> len = arr.length;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len-<span class="hljs-number">1</span>;i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j=i;j&lt;len;j++) &#123;<br>      <span class="hljs-keyword">let</span> min = i;<br>      <span class="hljs-comment">//从剩下项中去寻找最小项，遇到比假设项小的就把其当作最小项继续寻找，直到找完剩下的所有项</span><br>      <span class="hljs-keyword">if</span> (arr[min] &gt; arr[j]) &#123; <span class="hljs-comment">// 寻找最小数下标</span><br>        min = j;  <span class="hljs-comment">//取出索引，下面进行判断，不相等就开始交换</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (min !== i) &#123;<br>        <span class="hljs-keyword">let</span> temp = arr[i];<br>        arr[i] = arr[min];<br>        arr[min] = temp;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-取值"><a href="#1-2-取值" class="headerlink" title="1-2 取值"></a>1-2 取值</h4><p>和上面的方法类似，只不过这里是直接拿数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectionSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; ++i) &#123;<br>    <span class="hljs-keyword">let</span> min = arr[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (min &gt; arr[j]) &#123;<br>        <span class="hljs-keyword">let</span> temp = min;<br>        min = arr[j];<br>        arr[j] = temp;<br>      &#125;<br>    &#125;<br>    arr[i] = min;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-堆排序（重点）"><a href="#2-堆排序（重点）" class="headerlink" title="==2. 堆排序（重点）=="></a>==2. 堆排序（重点）==</h3><ol><li>堆概念</li></ol><p>大顶堆：每个节点的值都大于或者等于它的左右子节点的值。</p><p>小顶堆：每个节点的值都小于或者等于它的左右子节点的值。</p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210418171723516.png" alt="image-20210418171723516" style="zoom:50%;" /><ol start="2"><li>具体操作</li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif" alt="img"></p><ol><li><p>最大堆调整：将堆的末端子节点作调整，使得子节点永远小于父节点</p></li><li><p>创建最大堆：将堆中的所有数据重新排序</p></li><li><p>堆排序：移除位在第一个数据的根节点，并做最大堆调整的递归运算 </p></li></ol><ul><li><p>时间复杂度：</p><ul><li>最好情况：O(nlgn)</li><li>平均情况：O(nlgn)</li><li>最坏情况：O(nlgn)</li></ul></li><li><p>稳定性：不稳定</p></li><li><p>额外的空间：O(1)</p><p>每次只对一个元素操作，就地排序</p><p>==(↓ 下面代码是复制粘贴过来的，先放着吧)==</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildMaxHeap</span>(<span class="hljs-params">arr</span>) </span>&#123;   <span class="hljs-comment">//建堆</span><br>    <span class="hljs-keyword">var</span> len = arr.length;<br>    <span class="hljs-comment">// [n/2-1]表示的是最后一个有子节点 (本来是n/2（堆从1数起），但是这里arr索引是从0开始，所以-1)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-built_in">Math</span>.floor(len/<span class="hljs-number">2</span>)-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br>        maxHeapify(arr, i);<br>    &#125;<br>    <span class="hljs-comment">//对每一个节点（非叶节点），做堆调整</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxHeapify</span>(<span class="hljs-params">arr, i</span>) </span>&#123;     <span class="hljs-comment">//堆调整</span><br>    <span class="hljs-keyword">var</span> left = <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,  <br>        right = <span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>, <br>        largest = i;   <span class="hljs-comment">//i为该子树的根节点</span><br>    <span class="hljs-keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;  <br>        largest = left;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;<br>        largest = right;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (largest !== i) &#123;  <span class="hljs-comment">//即上面的if中有一个生效了</span><br>        swap(arr, i, largest);  <span class="hljs-comment">//交换最大的为父节点</span><br>        maxHeapify(arr, largest);  <span class="hljs-comment">//交换后，原值arr[i]（往下降了）（索引保存为largest），</span><br>        <span class="hljs-comment">//作为根时，子节点可能比它大，因此要继续调整</span><br>    &#125;  <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swap</span>(<span class="hljs-params">arr, i, j</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> temp = arr[i];  <br>    arr[i] = arr[j];<br>    arr[j] = temp;<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    buildMaxHeap(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = arr.length-<span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        swap(arr, <span class="hljs-number">0</span>, i);<br>        len--;<br>        maxHeapify(arr, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>从第二位开始抽</p><p>抽出一个数，往前一位从后往前以此进行比对，找到比这个数小的数时则放其后（其实不就是打扑克排牌时的做法嘛）</p><p>1）从第一个元素开始，该元素可以被认为已经被排序<br>2）取出下一个元素，在已经排好序的序列中从后往前扫描<br>3）直到找到小于或者等于该元素的位置<br>4）将该位置后面的所有已排序的元素从后往前依次移一位<br>5)将该元素插入到该位置<br>6)重复步骤2~5</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><ul><li><p>时间复杂度：</p><ul><li>最好情况：O(n)  输入的数组是升序排序</li><li>平均情况：O(n^2)</li><li>最坏情况：O(n^2)  输入的数组是降序排序</li></ul></li><li><p>稳定性：稳定</p><p>相等元素的相对次序没有改变</p></li><li><p>额外的空间：O(1)</p></li></ul><h3 id="1-直接插入排序（基本）"><a href="#1-直接插入排序（基本）" class="headerlink" title="1. 直接插入排序（基本）"></a>1. 直接插入排序（基本）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">InsertionSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>        <span class="hljs-keyword">let</span> temp = arr[i];  <span class="hljs-comment">//抽出一个数</span><br>        <span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span>;    <span class="hljs-comment">//往前一位进行比对</span><br>        <span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j]&gt;arr[i])&#123;<br>            arr[j+<span class="hljs-number">1</span>] = arr[j];  <span class="hljs-comment">//如果前一位的数大于取出来的数，则arr[j]外后移一位</span><br>            j--；   <span class="hljs-comment">//继续往前移动</span><br>        &#125;   <span class="hljs-comment">//当j&lt;0时，循环结束</span><br>        a[j+<span class="hljs-number">1</span>] = b; <span class="hljs-comment">//此时把取出的元素插进去</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-二分插入排序"><a href="#2-二分插入排序" class="headerlink" title="2. 二分插入排序"></a>2. 二分插入排序</h3><p>使用二分查找法，实际上就是在上面的方法中更改了查找位置</p><p>在已排序序列中二分查找到第一个比它大的数的位置</p><p>时间复杂度：</p><ul><li>最好情况：<strong>O(nlogn)</strong></li><li>平均情况：O(n^2)</li><li>最坏情况：O(n^2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binaryInsertSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;arr.length; i++) &#123;<br>        <span class="hljs-keyword">var</span> temp=arr[i],left=<span class="hljs-number">0</span>,right=i-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;       <span class="hljs-comment">//在已排序的元素中二分查找第一个比它大的值</span><br>          <span class="hljs-keyword">var</span> mid= <span class="hljs-built_in">parseInt</span>((left+right)/<span class="hljs-number">2</span>); <span class="hljs-comment">//二分查找的中间值</span><br>          <span class="hljs-keyword">if</span>(temp&lt;arr[mid])&#123; <span class="hljs-comment">//当前值比中间值小,则在左边的子数组中继续寻找   </span><br>            right = mid-<span class="hljs-number">1</span>;<br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>            left=mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//当前值比中间值大,在右边的子数组继续寻找</span><br>          &#125;<br>        &#125;              <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i-<span class="hljs-number">1</span>;j&gt;=left;j--)&#123;<br>          arr[j+<span class="hljs-number">1</span>]=arr[j];<br>        &#125;<br>        arr[left]=temp;<br>      &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="3-希尔排序（了解）"><a href="#3-希尔排序（了解）" class="headerlink" title="3. 希尔排序（了解）"></a>3. <a href="https://blog.csdn.net/l_ppp/article/details/108855298?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161873006716780255267245%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161873006716780255267245&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-108855298.pc_search_result_hbase_insert&utm_term=%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">希尔排序</a>（了解）</h3><p>缩小增量排序</p><p>尽可能让小的值往前靠，让大的值靠后（避免大幅度的后移）</p><ol><li>设置一个增量n，这个n为数组长度的1/2</li><li>相隔n个的元素视为同一组，在组内进行比较排序</li><li>再将n*1/2，重复2步骤，直到增量n为1（此时所有元素都是同一个组了）</li></ol><img src="https://gitee.com/youlan_lan/md_image/raw/master/20200928201404153.gif" alt="在这里插入图片描述" style="zoom:50%;" /><p>（↓ 下面的代码是复制博客里的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shellSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> interval = <span class="hljs-built_in">Math</span>.floor(arr.length / <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// 不断地缩小间隔的大小，进行分组插入排序</span><br>    <span class="hljs-keyword">while</span>(interval &gt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 从 arr[interval] 开始往后遍历，将遍历到的数据与其小组进行插入排序</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = interval; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">let</span> temp = arr[i];<br>            <span class="hljs-keyword">let</span> j = i;<br>            <span class="hljs-keyword">while</span>(arr[j - interval] &gt; temp &amp;&amp; j - interval &gt;= <span class="hljs-number">0</span>) &#123;<br>                arr[j] = arr[j - interval];<br>                j -= interval ;<br>            &#125;<br>            arr[j] = temp;       <br>        &#125;<br>        <span class="hljs-comment">// 缩小间隔</span><br>        interval = <span class="hljs-built_in">Math</span>.floor(interval / <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-快速排序（重点）"><a href="#4-快速排序（重点）" class="headerlink" title="==4. 快速排序（重点）=="></a>==4. 快速排序（重点）==</h2><p>将数据分成两部分</p><p>一边的数据全都小于基准数，一边的数据全都大于基准数</p><p>按照这种方法再分别对这两部分的数据进行快速排序</p><img src="https://gitee.com/youlan_lan/md_image/raw/master/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序" style="zoom:50%;" /><blockquote><p> 第一轮之后的效果：</p><img src="https://gitee.com/youlan_lan/md_image/raw/master/image-20210418203839596.png" alt="image-20210418203839596" style="zoom:40%;" /></blockquote><ul><li><p>时间复杂度：</p><ul><li>最好情况：O(nlogn)</li><li>平均情况：O(nlogn)</li><li>最坏情况：O(n^2)</li></ul></li><li><p>稳定性：不稳定</p></li><li><p>额外的空间：O(logn)~O(n)</p><p>递归造成的栈空间的使用(用来保存left和right等局部变量)，取决于递归树的深度</p></li></ul><h3 id="1-有递归版本"><a href="#1-有递归版本" class="headerlink" title="1. 有递归版本"></a>1. 有递归版本</h3><blockquote><p>递归是什么？ ==&gt; 套娃</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quick</span>(<span class="hljs-params">arr, left = <span class="hljs-number">0</span>, right = arr.length - <span class="hljs-number">1</span></span>) </span>&#123; <br><span class="hljs-keyword">if</span> (left &gt;= right) <span class="hljs-keyword">return</span> arr;  <span class="hljs-comment">//arr长度为0或1的时候</span><br><span class="hljs-keyword">var</span> i = left, j = right, basic =i;<br><span class="hljs-keyword">while</span>(i &lt; j) &#123;<br><span class="hljs-keyword">while</span>(arr[j] &gt;= arr[basic] &amp;&amp; j &gt; basic) j--;<span class="hljs-comment">//如果j指针指向的值大于或等于基准，则j指针向左移动</span><br><span class="hljs-keyword">while</span>(arr[i] &lt;= arr[basic] &amp;&amp; i &lt; j) i++;  <span class="hljs-comment">//同样的，如果i指针指向的值小于或等于基准，则i指针向右移动</span><br><span class="hljs-keyword">var</span> temp = arr[basic];  <span class="hljs-comment">//此时ij相遇，与基准数交换</span><br>arr[basic] = arr[j];<br>arr[j] = temp;<br>basic = i<br>&#125;<br>quick(arr, left, basic - <span class="hljs-number">1</span>); <span class="hljs-comment">//对左边进行</span><br>quick(arr, basic + <span class="hljs-number">1</span>, right); <span class="hljs-comment">//对右边进行</span><br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于使用了递归，所以要有条件，不然会无限套娃，然后就崩了 =。=</p><h3 id="2-无递归版本（栈）"><a href="#2-无递归版本（栈）" class="headerlink" title="2. 无递归版本（栈）"></a>2. 无递归版本（栈）</h3><blockquote><p>先来了解一下栈：大概可以比喻成 ==&gt; 把东西往容器里放，拿出来的时候只能是最后放的那个</p><ul><li>栈声明一些方法。<ul><li>push(element(s))： 添加一个（或几个）新元素到栈顶</li><li>pop()：移除栈顶的元素，同时返回被移除的元素</li><li>peek()：返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）</li><li>isEmpty()：如果栈里没有任何元素就返回true，否则返回false</li><li>clear()：移除栈里的所有元素</li><li>size()：返回栈里的元素个数。该方法和数组的length 属性很类似</li></ul></li></ul></blockquote><p>模拟栈，将待排序数组的[left,right]保存到数组中，循环取出进行快排</p><p>(↓贴个代码，看懂了，不会写)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> stack = [];  <span class="hljs-comment">//栈</span><br>    stack.push([<span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>]);  <span class="hljs-comment">//push()添加元素到栈顶</span><br>    <span class="hljs-keyword">while</span> (stack.length) &#123;<br>      <span class="hljs-keyword">let</span> list = stack.pop();  <span class="hljs-comment">//pop()移除栈顶元素，同时返回被移除的元素</span><br>      <span class="hljs-keyword">let</span> i = left = list[<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">let</span> j = right = list[<span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">let</span> mid = arr[(i + j) &gt;&gt; <span class="hljs-number">1</span>];  <span class="hljs-comment">//右移</span><br>      <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">while</span> (arr[i] &lt; mid) ++i;<br>        <span class="hljs-keyword">while</span> (arr[j] &gt; mid) --j;<br>        <span class="hljs-keyword">if</span> (i &lt;= j) &#123;<br>          <span class="hljs-keyword">let</span> temp = arr[i];  <span class="hljs-comment">//交换</span><br>          arr[i] = arr[j];<br>          arr[j] = temp;<br>          ++i;<br>          --j;<br>        &#125;<br>      &#125; <span class="hljs-keyword">while</span> (i &lt;= j);<br>      <span class="hljs-keyword">if</span> (i &lt; right) stack.push([i, right]);<br>      <span class="hljs-keyword">if</span> (left &lt; j) stack.push([left, j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-归并排序（重点）"><a href="#5-归并排序（重点）" class="headerlink" title="==5. 归并排序（重点）=="></a>==5. 归并排序<strong>（重点）</strong>==</h2><p>分而治之</p><p>将数组分组至两两比较，最后直到所有元素都被分到一组里</p><p><img src="https://gitee.com/youlan_lan/md_image/raw/master/1038932-20180630211441031-350251983.png" alt="img"></p><ul><li>时间复杂度：<ul><li>最好情况：O(nlogn)</li><li>平均情况：O(nlogn)</li><li>最坏情况：O(nlogn)</li></ul></li><li>稳定性：稳定</li><li>额外的空间：O(n)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">mergeSort = <span class="hljs-function">(<span class="hljs-params">arr</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(arr.length&lt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> arr;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">var</span> mid=<span class="hljs-built_in">Math</span>.floor(arr.length/<span class="hljs-number">2</span>);  <span class="hljs-comment">//取中间值（向下取整）</span><br><span class="hljs-keyword">var</span> left=arr.slice(<span class="hljs-number">0</span>,mid);  <span class="hljs-comment">//分成左右两部分</span><br><span class="hljs-keyword">var</span> right=arr.slice(mid);<br>left = mergeSort(left);<br>right = mergeSort(right);<br><span class="hljs-keyword">var</span> temp=[];  <span class="hljs-comment">//一个空数组</span><br><span class="hljs-keyword">while</span>(left.length &amp;&amp; right.length)&#123;  <span class="hljs-comment">//左右两部分长度均存在</span><br><span class="hljs-keyword">if</span>(left[<span class="hljs-number">0</span>] &lt; right[<span class="hljs-number">0</span>])&#123;  <span class="hljs-comment">//比较两个数的大小，先把小的放进去</span><br>temp.push(left.shift()); <span class="hljs-comment">//shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>temp.push(right.shift());<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>  temp.concat(left,right);  <span class="hljs-comment">//用递归继续进行分割，用concat进行合并</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-基数排序（了解）"><a href="#6-基数排序（了解）" class="headerlink" title="6. 基数排序（了解）"></a>6. 基数排序（了解）</h2><p>从个位数开始，依次放入0~9的桶中，再依次拿出来排序；十位、千位……重复上述操作，一直排到最高位为止</p><img src="https://gitee.com/youlan_lan/md_image/raw/master/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="基数排序" style="zoom: 50%;" /><ul><li>时间复杂度：<ul><li>最好情况：O(n+k)</li><li>平均情况：O(n+k)</li><li>最坏情况：O(n+k)</li></ul></li><li>稳定性：稳定</li><li>额外的空间：O(n+k)</li></ul><p>（贴一个大佬的代码，写法有点帅）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">radixSort = <span class="hljs-function">(<span class="hljs-params">arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.length &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">let</span> maxDigit = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.max(...arr))).length <span class="hljs-comment">// 取最大位数</span><br>    <span class="hljs-keyword">let</span> mod = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">let</span> dev = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> counter = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; maxDigit; i++, dev *= <span class="hljs-number">10</span>, mod *= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>            <span class="hljs-keyword">let</span> bucket = <span class="hljs-built_in">parseInt</span>((arr[j] % mod) / dev);  <span class="hljs-comment">// 123%10/1=3；123%100/10=2；==&gt; 取位</span><br>            counter[bucket] = counter[bucket] == <span class="hljs-literal">null</span> ? [] : counter[bucket];<br>            counter[bucket].push(arr[j]);<br>        &#125;<br>        <span class="hljs-keyword">let</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; counter.length; j++) &#123;<br>            <span class="hljs-keyword">let</span> value = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span>(counter[j]!=<span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">while</span> ((value = counter[j].shift()) != <span class="hljs-literal">null</span>) &#123;<br>                    arr[pos++] = value;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
